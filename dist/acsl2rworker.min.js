/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 122);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var statement_1 = __webpack_require__(67);
var tablestatement_1 = __webpack_require__(70);
var arraystatement_1 = __webpack_require__(56);
var arrayexpression_1 = __webpack_require__(55);
var fnexpression_1 = __webpack_require__(43);
var ifsection_1 = __webpack_require__(61);
var proceduralsection_1 = __webpack_require__(65);
var docontinuesection_1 = __webpack_require__(59);
var lodash_1 = __webpack_require__(6);
function replaceSymbol(expression, symbol, replacement) {
    var expressions = expression.expressions;
    for (var name_1 in expressions) {
        var asCode = expressions[name_1].expression.toCode("R", 0);
        if (asCode == symbol) {
            expressions[name_1].expression = replacement;
        }
        else {
            replaceSymbol(expressions[name_1].expression, symbol, replacement);
        }
    }
}
exports.replaceSymbol = replaceSymbol;
function getDiscreteSymbolsRequiredByDerivative(acslProgram) {
    var symbolsProvided = new Set();
    acslProgram.dynamicSection.discreteSections.forEach(function (ds) { return ds.codeBlocks.forEach(function (c) { return c.symbolsProvided.forEach(function (s) { return symbolsProvided.add(s.toCode("R", 0)); }); }); });
    var symbolsRequired = new Set();
    acslProgram.dynamicSection.derivativeSection.codeBlocks.forEach(function (cb) { return cb.symbolsRequired.forEach(function (s) { return symbolsRequired.add(s.toCode("R", 0)); }); });
    var discreteSymbols = new Set();
    Array.from(symbolsProvided).filter(function (s) { return symbolsRequired.has(s); }).forEach(function (s) { return discreteSymbols.add(s); });
    return discreteSymbols;
}
exports.getDiscreteSymbolsRequiredByDerivative = getDiscreteSymbolsRequiredByDerivative;
function isSymbolSource(codeBlock, symbolToLower) {
    if ((isStatement(codeBlock) || isTableStatement(codeBlock)) && !!codeBlock.lvalue) {
        var lvalueToLower = codeBlock.lvalue.toCode("R", 0).toLowerCase();
        return lvalueToLower == symbolToLower;
    }
    return false;
}
function findSymbolProviderRec(codeBlock, symbolToLower) {
    if (isSymbolSource(codeBlock, symbolToLower))
        return codeBlock;
    for (var i = 0; i < codeBlock.codeBlocks.length; ++i) {
        var symbolSource = findSymbolProviderRec(codeBlock.codeBlocks[i], symbolToLower);
        if (!!symbolSource)
            return symbolSource;
    }
    return null;
}
function findSymbolProvider(codeBlock, symbol) {
    return findSymbolProviderRec(codeBlock, symbol.toCode("R", 0).toLowerCase());
}
exports.findSymbolProvider = findSymbolProvider;
function applyAcslTypesToExpression(expression, typeDictionary) {
    expression.applyAcslTypes(typeDictionary);
    if (expression instanceof fnexpression_1.default) {
        var name_2 = expression.name.toCode("R", 0);
        if (typeDictionary.has(name_2)) {
            var arrayExpression = new arrayexpression_1.default(expression.name, expression.args);
            return arrayExpression;
        }
    }
    return null;
}
exports.applyAcslTypesToExpression = applyAcslTypesToExpression;
function isStatement(obj) {
    return obj instanceof statement_1.default;
}
exports.isStatement = isStatement;
function isArrayStatement(obj) {
    return obj instanceof arraystatement_1.default;
}
exports.isArrayStatement = isArrayStatement;
function isTableStatement(obj) {
    return obj instanceof tablestatement_1.default;
}
exports.isTableStatement = isTableStatement;
function isIfSection(obj) {
    return obj instanceof ifsection_1.default;
}
exports.isIfSection = isIfSection;
function isDoContinueSection(obj) {
    return obj instanceof docontinuesection_1.default;
}
exports.isDoContinueSection = isDoContinueSection;
function isProceduralSection(obj) {
    return obj instanceof proceduralsection_1.default;
}
exports.isProceduralSection = isProceduralSection;
function getSymbolsRequired(symbolsProvided, codeBlocks) {
    var locals = symbolsProvided.map(function (s) { return s.toCode("R", 0); });
    var symbolsInScope = new Set(locals);
    var symbolsRequiredAA = codeBlocks.map(function (s) { return s.symbolsRequired; });
    var symbolsRequired = lodash_1.flatten(symbolsRequiredAA);
    var map = symbolsRequired.map(function (e) { return ({ symbol: e.toCode("R", 0), expression: e }); });
    var notInscope = map.filter(function (e) { return !symbolsInScope.has(e.symbol); });
    var required = notInscope.map(function (e) { return e.expression; });
    return required;
}
exports.getSymbolsRequired = getSymbolsRequired;
function getSymbolsProvided(codeBlocks) {
    var symbolsProvidedAA = codeBlocks.map(function (cb) { return cb.symbolsProvided; });
    var symbolsProvided = lodash_1.flatten(symbolsProvidedAA);
    return symbolsProvided;
}
exports.getSymbolsProvided = getSymbolsProvided;
function _checkResolvedInProcedurals(symbols, codeBlocks) {
    var symbolsInScope = new Set(symbols);
    for (var i = 0; i < codeBlocks.length; ++i) {
        var codeBlock = codeBlocks[i];
        if (isProceduralSection(codeBlock)) {
            for (var j = 0; j < codeBlock.codeBlocks.length; ++j) {
                var childCodeBlock = codeBlock.codeBlocks[j];
                var childSymbolsRequired = childCodeBlock.symbolsRequired;
                var symbolsRequired = childSymbolsRequired.map(function (s) { return s.toCode("R", 0); });
                var notInScope = new Set(symbolsRequired.filter(function (s) { return !symbolsInScope.has(s); }));
                if (0 == notInScope.size) {
                    var childSymbolsProvided = childCodeBlock.symbolsProvided;
                    var symbolsProvided = childSymbolsProvided.map(function (s) { return s.toCode("R", 0); });
                    symbolsProvided.forEach(function (s) { return symbolsInScope.add(s); });
                }
                else {
                    return notInScope;
                }
            }
        }
        else {
            var symbolsProvided = codeBlock.symbolsProvided;
            symbolsProvided.forEach(function (s) { return symbolsInScope.add(s.toCode("R", 0)); });
        }
    }
    return null;
}
function _orderComputations(symbols, codeBlocks) {
    var symbolSources = codeBlocks.map(function (c) {
        return {
            codeBlock: c,
            symbolsProvided: c.symbolsProvided.map(function (e) { return e.toCode("R", 0); }),
            symbolsRequired: c.symbolsRequired.map(function (e) { return e.toCode("R", 0); })
        };
    });
    var pending = [];
    var reordered = [];
    var symbolsInScope = new Set(symbols);
    while (symbolSources.length > 0) {
        var symbolSource = symbolSources.shift();
        var notInScope = symbolSource.symbolsRequired.filter(function (s) { return !symbolsInScope.has(s); });
        if (0 == notInScope.length) {
            reordered.push(symbolSource);
            symbolSource.symbolsProvided.forEach(function (s) { return symbolsInScope.add(s); });
        }
        else {
            pending.push(symbolSource);
        }
    }
    var _loop_1 = function () {
        var toInsert = pending;
        pending = [];
        var notInScope;
        for (var i = 0; i < toInsert.length; ++i) {
            var symbolSource = toInsert[i];
            symbolsInScope = new Set(symbols);
            for (var j = 0; j < reordered.length; ++j) {
                var current = reordered[j];
                current.symbolsProvided.forEach(function (s) { return symbolsInScope.add(s); });
                notInScope = new Set(symbolSource.symbolsRequired.filter(function (s) { return !symbolsInScope.has(s); }));
                if (0 == notInScope.size) {
                    reordered.splice(j + 1, 0, symbolSource);
                    symbolSource = null;
                    break;
                }
            }
            if (!!symbolSource) {
                pending.push(symbolSource);
            }
        }
        if (pending.length == toInsert.length) {
            if (null == notInScope) {
                notInScope = new Set();
                pending.forEach(function (p) {
                    var symbolsRequired = p.symbolsRequired;
                    symbolsRequired.filter(function (s) { return !symbols.has(s); }).forEach(function (s) { return notInScope.add(s); });
                });
            }
            return { value: notInScope };
        }
    };
    while (pending.length > 0) {
        var state_1 = _loop_1();
        if (typeof state_1 === "object")
            return state_1.value;
    }
    codeBlocks.length = 0;
    codeBlocks.push.apply(codeBlocks, reordered.map(function (ss) { return ss.codeBlock; }));
    return null;
}
function stripOutProceduralsRec(codeBlock) {
    var strippedOut = [];
    var codeBlocks = codeBlock.codeBlocks;
    for (var i = 0; i < codeBlocks.length; ++i) {
        var childCodeBlock = codeBlocks[i];
        if (isProceduralSection(childCodeBlock)) {
            strippedOut.push.apply(strippedOut, childCodeBlock.codeBlocks);
        }
        else {
            stripOutProceduralsRec(childCodeBlock);
            strippedOut.push(childCodeBlock);
        }
    }
    codeBlock.codeBlocks.length = 0;
    (_a = codeBlock.codeBlocks).push.apply(_a, strippedOut);
    var _a;
}
function stripOutProcedurals(codeBlocks) {
    var strippedOut = [];
    for (var i = 0; i < codeBlocks.length; ++i) {
        var codeBlock = codeBlocks[i];
        if (isProceduralSection(codeBlock)) {
            codeBlock.codeBlocks.forEach(function (cb) { return stripOutProceduralsRec(cb); });
            strippedOut.push.apply(strippedOut, codeBlock.codeBlocks);
        }
        else {
            stripOutProceduralsRec(codeBlock);
            strippedOut.push(codeBlock);
        }
    }
    return strippedOut;
}
function findAndOrderConditionalSectionsRec(symbols, codeBlocks, messages, sectionName) {
    var symbolSources = codeBlocks.map(function (c) {
        return {
            codeBlock: c,
            symbolsProvided: c.symbolsProvided.map(function (e) { return e.toCode("R", 0); }),
            symbolsRequired: c.symbolsRequired.map(function (e) { return e.toCode("R", 0); })
        };
    });
    var pending = [];
    var reordered = [];
    var symbolsInScope = new Set(symbols);
    symbolSources.forEach(function (ss) {
        if (ss.codeBlock instanceof ifsection_1.default) {
            ss.codeBlock.conditionalSections.forEach(function (cs) {
                var grouped = lodash_1.partition(cs.codeBlocks, function (c) { return isStatement(c) && c.isConstant; });
                var parameterAssignments = grouped[0];
                var computations = grouped[1];
                parameterAssignments.forEach(function (pa) { return symbolsInScope.add(pa.lvalue.toCode("R", 0)); });
                var reordered = _orderSection(symbolsInScope, computations, messages, sectionName);
                if (!!reordered) {
                    findAndOrderConditionalSectionsRec(symbols, computations, messages, sectionName);
                    cs.codeBlocks.length = 0;
                    (_a = cs.codeBlocks).push.apply(_a, parameterAssignments);
                    (_b = cs.codeBlocks).push.apply(_b, reordered);
                }
                var _a, _b;
            });
        }
        ss.symbolsProvided.forEach(function (s) { return symbolsInScope.add(s); });
    });
}
function _orderSection(symbols, computations, messages, sectionName) {
    var unresolved = _orderComputations(symbols, computations);
    if (!unresolved) {
        unresolved = _checkResolvedInProcedurals(symbols, computations);
    }
    if (!!unresolved) {
        var message = "Sorting failure in " + sectionName + ". One or more symbols not resolved: " + Array.from(unresolved).join(", ");
        messages.push(message);
        computations = stripOutProcedurals(computations);
        unresolved = _orderComputations(symbols, computations);
        if (!unresolved) {
            message = "Stripped out ALL PROCEDURALs to resolve issue. Review the changes carefully!";
            messages.push(message);
        }
    }
    return !!unresolved ? null : computations;
}
function orderComputations(acslProgram) {
    var messages = [];
    var grouped = lodash_1.partition(acslProgram.initialSection.codeBlocks, function (c) { return isStatement(c) && c.isConstant; });
    var parameterAssignments = grouped[0];
    var computations = grouped[1];
    var symbolsProvided = [];
    parameterAssignments.forEach(function (pa) { return symbolsProvided.push.apply(symbolsProvided, pa.symbolsProvided); });
    acslProgram.codeBlocks.forEach(function (c) { return symbolsProvided.push.apply(symbolsProvided, c.symbolsProvided); });
    acslProgram.dynamicSection.codeBlocks.forEach(function (c) { return symbolsProvided.push.apply(symbolsProvided, c.symbolsProvided); });
    var symbols = new Set(symbolsProvided.map(function (ia) { return ia.toCode("R", 0); }));
    var reordered = _orderSection(symbols, computations, messages, "INITIAL");
    findAndOrderConditionalSectionsRec(symbols, computations, messages, "INITIAL");
    if (!!reordered) {
        acslProgram.initialSection.codeBlocks.length = 0;
        (_a = acslProgram.initialSection.codeBlocks).push.apply(_a, parameterAssignments);
        (_b = acslProgram.initialSection.codeBlocks).push.apply(_b, reordered);
    }
    computations.forEach(function (c) { return c.symbolsProvided.forEach(function (s) { return symbols.add(s.toCode("R", 0)); }); });
    acslProgram.dynamicSection.derivativeSection.integs.forEach(function (i) { return i.symbolsProvided.forEach(function (s) { return symbols.add(s.toCode("R", 0)); }); });
    symbols.add("t");
    var discreteSymbols = getDiscreteSymbolsRequiredByDerivative(acslProgram);
    discreteSymbols.forEach(function (ds) { return symbols.add(ds); });
    acslProgram.dynamicSection.discreteSections.forEach(function (ds) {
        grouped = lodash_1.partition(ds.codeBlocks, function (c) { return isStatement(c) && c.isConstant; });
        parameterAssignments = grouped[0];
        computations = grouped[1];
        var symbolsForDS = new Set(Array.from(symbols));
        parameterAssignments.forEach(function (pa) { return symbolsForDS.add(pa.lvalue.toCode("R", 0)); });
        reordered = _orderSection(symbols, computations, messages, "DISCRETE=" + ds.name);
        findAndOrderConditionalSectionsRec(symbols, computations, messages, "DISCRETE=" + ds.name);
        if (!!reordered) {
            ds.codeBlocks.length = 0;
            (_a = ds.codeBlocks).push.apply(_a, parameterAssignments);
            (_b = ds.codeBlocks).push.apply(_b, reordered);
        }
        var _a, _b;
    });
    grouped = lodash_1.partition(acslProgram.dynamicSection.derivativeSection.codeBlocks, function (c) { return isStatement(c) && c.isConstant; });
    parameterAssignments = grouped[0];
    computations = grouped[1];
    parameterAssignments.forEach(function (pa) { return symbols.add(pa.lvalue.toCode("R", 0)); });
    reordered = _orderSection(symbols, computations, messages, "DERIVATIVE");
    findAndOrderConditionalSectionsRec(symbols, computations, messages, "DERIVATIVE");
    if (!!reordered) {
        acslProgram.dynamicSection.derivativeSection.codeBlocks.length = 0;
        (_c = acslProgram.dynamicSection.derivativeSection.codeBlocks).push.apply(_c, parameterAssignments);
        (_d = acslProgram.dynamicSection.derivativeSection.codeBlocks).push.apply(_d, reordered);
    }
    acslProgram.dynamicSection.derivativeSection.codeBlocks.forEach(function (c) { return isStatement(c) && symbols.add(c.lvalue.toCode("R", 0)); });
    grouped = lodash_1.partition(acslProgram.terminalSection.codeBlocks, function (c) { return isStatement(c) && c.isConstant; });
    parameterAssignments = grouped[0];
    computations = grouped[1];
    parameterAssignments.forEach(function (pa) { return pa.symbolsProvided.forEach(function (s) { return symbols.add(s.toCode("R", 0)); }); });
    reordered = _orderSection(symbols, computations, messages, "TERMINAL");
    findAndOrderConditionalSectionsRec(symbols, computations, messages, "TERMINAL");
    if (!!reordered) {
        acslProgram.terminalSection.codeBlocks.length = 0;
        (_e = acslProgram.terminalSection.codeBlocks).push.apply(_e, parameterAssignments);
        (_f = acslProgram.terminalSection.codeBlocks).push.apply(_f, reordered);
    }
    return 0 == messages.length ? null : messages;
    var _a, _b, _c, _d, _e, _f;
}
exports.orderComputations = orderComputations;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MessageType;
(function (MessageType) {
    MessageType[MessageType["ParseACSL"] = 0] = "ParseACSL";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
var Prec;
(function (Prec) {
    Prec[Prec["Assign"] = 0] = "Assign";
    Prec[Prec["Exp"] = 1] = "Exp";
    Prec[Prec["Unary"] = 2] = "Unary";
    Prec[Prec["MulDiv"] = 3] = "MulDiv";
    Prec[Prec["AddSub"] = 4] = "AddSub";
    Prec[Prec["Not"] = 5] = "Not";
    Prec[Prec["Infix"] = 6] = "Infix";
    Prec[Prec["Sub"] = 7] = "Sub";
    Prec[Prec["Id"] = 8] = "Id";
    Prec[Prec["Int"] = 9] = "Int";
    Prec[Prec["Float"] = 10] = "Float";
    Prec[Prec["Fn"] = 11] = "Fn";
    Prec[Prec["Integ"] = 12] = "Integ";
    Prec[Prec["Rsw"] = 13] = "Rsw";
    Prec[Prec["Pulse"] = 14] = "Pulse";
    Prec[Prec["Step"] = 15] = "Step";
})(Prec = exports.Prec || (exports.Prec = {}));
var CommentPlacement;
(function (CommentPlacement) {
    CommentPlacement[CommentPlacement["None"] = 0] = "None";
    CommentPlacement[CommentPlacement["Content"] = 1] = "Content";
    CommentPlacement[CommentPlacement["Line"] = 2] = "Line";
    CommentPlacement[CommentPlacement["EndLine"] = 3] = "EndLine";
    CommentPlacement[CommentPlacement["PreSection"] = 4] = "PreSection";
    CommentPlacement[CommentPlacement["PostSection"] = 5] = "PostSection";
    CommentPlacement[CommentPlacement["EndSection"] = 6] = "EndSection";
})(CommentPlacement = exports.CommentPlacement || (exports.CommentPlacement = {}));
var AcslType;
(function (AcslType) {
    AcslType[AcslType["Dimension"] = 0] = "Dimension";
    AcslType[AcslType["Real"] = 1] = "Real";
    AcslType[AcslType["DoublePrecision"] = 2] = "DoublePrecision";
    AcslType[AcslType["Integer"] = 3] = "Integer";
    AcslType[AcslType["Logical"] = 4] = "Logical";
    AcslType[AcslType["Character"] = 5] = "Character";
})(AcslType = exports.AcslType || (exports.AcslType = {}));


/***/ }),
/* 2 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function arrayToString(a) {
    return "[" + a.join(", ") + "]";
}

String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
    var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i,
        key = this.toString();

    remainder = key.length & 3; // key.length % 4
    bytes = key.length - remainder;
    h1 = String.prototype.seed;
    c1 = 0xcc9e2d51;
    c2 = 0x1b873593;
    i = 0;

    while (i < bytes) {
        k1 =
            ((key.charCodeAt(i) & 0xff)) |
            ((key.charCodeAt(++i) & 0xff) << 8) |
            ((key.charCodeAt(++i) & 0xff) << 16) |
            ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;

        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
    }

    k1 = 0;

    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= (key.charCodeAt(i) & 0xff);

            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
            h1 ^= k1;
    }

    h1 ^= key.length;

    h1 ^= h1 >>> 16;
    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
    h1 ^= h1 >>> 16;

    return h1 >>> 0;
};

function standardEqualsFunction(a, b) {
    return a.equals(b);
}

function standardHashCodeFunction(a) {
    return a.hashCode();
}

function Set(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Set.prototype, "length", {
    get: function () {
        var l = 0;
        for (var key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l + this.data[key].length;
            }
        }
        return l;
    }
});

Set.prototype.add = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
        values.push(value);
        return value;
    } else {
        this.data[key] = [value];
        return value;
    }
};

Set.prototype.contains = function (value) {
    return this.get(value) != null;
};

Set.prototype.get = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
    }
    return null;
};

Set.prototype.values = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};

Set.prototype.toString = function () {
    return arrayToString(this.values());
};

function BitSet() {
    this.data = [];
    return this;
}

BitSet.prototype.add = function (value) {
    this.data[value] = true;
};

BitSet.prototype.or = function (set) {
    var bits = this;
    Object.keys(set.data).map(function (alt) {
        bits.add(alt);
    });
};

BitSet.prototype.remove = function (value) {
    delete this.data[value];
};

BitSet.prototype.contains = function (value) {
    return this.data[value] === true;
};

BitSet.prototype.values = function () {
    return Object.keys(this.data);
};

BitSet.prototype.minValue = function () {
    return Math.min.apply(null, this.values());
};

BitSet.prototype.hashCode = function () {
    var hash = new Hash();
    hash.update(this.values());
    return hash.finish();
};

BitSet.prototype.equals = function (other) {
    if (!(other instanceof BitSet)) {
        return false;
    }
    return this.hashCode() === other.hashCode();
};

Object.defineProperty(BitSet.prototype, "length", {
    get: function () {
        return this.values().length;
    }
});

BitSet.prototype.toString = function () {
    return "{" + this.values().join(", ") + "}";
};

function Map(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Map.prototype, "length", {
    get: function () {
        var l = 0;
        for (var hashKey in this.data) {
            if (hashKey.indexOf("hash_") === 0) {
                l = l + this.data[hashKey].length;
            }
        }
        return l;
    }
});

Map.prototype.put = function (key, value) {
    var hashKey = "hash_" + this.hashFunction(key);
    if (hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key)) {
                var oldValue = entry.value;
                entry.value = value;
                return oldValue;
            }
        }
        entries.push({key:key, value:value});
        return value;
    } else {
        this.data[hashKey] = [{key:key, value:value}];
        return value;
    }
};

Map.prototype.containsKey = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return true;
        }
    }
    return false;
};

Map.prototype.get = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return entry.value;
        }
    }
    return null;
};

Map.prototype.entries = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};


Map.prototype.getKeys = function () {
    return this.entries().map(function(e) {
        return e.key;
    });
};


Map.prototype.getValues = function () {
    return this.entries().map(function(e) {
            return e.value;
    });
};


Map.prototype.toString = function () {
    var ss = this.entries().map(function(entry) {
        return '{' + entry.key + ':' + entry.value + '}';
    });
    return '[' + ss.join(", ") + ']';
};


function AltDict() {
    this.data = {};
    return this;
}


AltDict.prototype.get = function (key) {
    key = "k-" + key;
    if (key in this.data) {
        return this.data[key];
    } else {
        return null;
    }
};

AltDict.prototype.put = function (key, value) {
    key = "k-" + key;
    this.data[key] = value;
};

AltDict.prototype.values = function () {
    var data = this.data;
    var keys = Object.keys(this.data);
    return keys.map(function (key) {
        return data[key];
    });
};

function DoubleDict() {
    return this;
}

function Hash() {
    this.count = 0;
    this.hash = 0;
    return this;
}

Hash.prototype.update = function () {
    for(var i=0;i<arguments.length;i++) {
        var value = arguments[i];
        if (value == null)
            continue;
        if(Array.isArray(value))
            this.update.apply(value);
        else {
            var k = 0;
            switch (typeof(value)) {
                case 'undefined':
                case 'function':
                    continue;
                case 'number':
                case 'boolean':
                    k = value;
                    break;
                case 'string':
                    k = value.hashCode();
                    break;
                default:
                    value.updateHashCode(this);
                    continue;
            }
            k = k * 0xCC9E2D51;
            k = (k << 15) | (k >>> (32 - 15));
            k = k * 0x1B873593;
            this.count = this.count + 1;
            hash = this.hash ^ k;
            hash = (hash << 13) | (hash >>> (32 - 13));
            hash = hash * 5 + 0xE6546B64;
            this.hash = hash;
        }
    }
}

Hash.prototype.finish = function () {
    var hash = this.hash ^ (this.count * 4);
    hash = hash ^ (hash >>> 16);
    hash = hash * 0x85EBCA6B;
    hash = hash ^ (hash >>> 13);
    hash = hash * 0xC2B2AE35;
    hash = hash ^ (hash >>> 16);
    return hash;
}

function hashStuff() {
    var hash = new Hash();
    hash.update.apply(arguments);
    return hash.finish();
}

DoubleDict.prototype.get = function (a, b) {
    var d = this[a] || null;
    return d === null ? null : (d[b] || null);
};

DoubleDict.prototype.set = function (a, b, o) {
    var d = this[a] || null;
    if (d === null) {
        d = {};
        this[a] = d;
    }
    d[b] = o;
};


function escapeWhitespace(s, escapeSpaces) {
    s = s.replace("\t", "\\t");
    s = s.replace("\n", "\\n");
    s = s.replace("\r", "\\r");
    if (escapeSpaces) {
        s = s.replace(" ", "\u00B7");
    }
    return s;
}

function titleCase(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
};

function equalArrays(a, b)
{
    if (!Array.isArray(a) || !Array.isArray(b))
        return false;
    if (a == b)
        return true;
    if (a.length != b.length)
        return false;
    for (var i = 0; i < a.length; i++) {
        if (a[i] == b[i])
            continue;
        if (!a[i].equals(b[i]))
            return false;
    }
    return true;
};

exports.Hash = Hash;
exports.Set = Set;
exports.Map = Map;
exports.BitSet = BitSet;
exports.AltDict = AltDict;
exports.DoubleDict = DoubleDict;
exports.hashStuff = hashStuff;
exports.escapeWhitespace = escapeWhitespace;
exports.arrayToString = arrayToString;
exports.titleCase = titleCase;
exports.equalArrays = equalArrays;

/***/ }),
/* 3 */,
/* 4 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A token has properties: text, type, line, character position in the line
// (so we can ignore tabs), token channel, index, and source from which
// we obtained this token.

function Token() {
	this.source = null;
	this.type = null; // token type of the token
	this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
	this.start = null; // optional; return -1 if not implemented.
	this.stop = null; // optional; return -1 if not implemented.
	this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
	this.line = null; // line=1..n of the 1st character
	this.column = null; // beginning of the line at which it occurs, 0..n-1
	this._text = null; // text of the token.
	return this;
}

Token.INVALID_TYPE = 0;

// During lookahead operations, this "token" signifies we hit rule end ATN state
// and did not follow it despite needing to.
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

// All tokens go to the parser (unless skip() is called in that rule)
// on a particular "channel". The parser tunes to a particular channel
// so that whitespace etc... can go to the parser on a "hidden" channel.

Token.DEFAULT_CHANNEL = 0;

// Anything on different channel than DEFAULT_CHANNEL is not parsed
// by parser.

Token.HIDDEN_CHANNEL = 1;

// Explicitly set the text for this token. If {code text} is not
// {@code null}, then {@link //getText} will return this value rather than
// extracting the text from the input.
//
// @param text The explicit text of the token, or {@code null} if the text
// should be obtained from the input along with the start and stop indexes
// of the token.

Object.defineProperty(Token.prototype, "text", {
	get : function() {
		return this._text;
	},
	set : function(text) {
		this._text = text;
	}
});

Token.prototype.getTokenSource = function() {
	return this.source[0];
};

Token.prototype.getInputStream = function() {
	return this.source[1];
};

function CommonToken(source, type, channel, start, stop) {
	Token.call(this);
	this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
	this.type = type !== undefined ? type : null;
	this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
	this.start = start !== undefined ? start : -1;
	this.stop = stop !== undefined ? stop : -1;
	this.tokenIndex = -1;
	if (this.source[0] !== null) {
		this.line = source[0].line;
		this.column = source[0].column;
	} else {
		this.column = -1;
	}
	return this;
}

CommonToken.prototype = Object.create(Token.prototype);
CommonToken.prototype.constructor = CommonToken;

// An empty {@link Pair} which is used as the default value of
// {@link //source} for tokens that do not have a source.
CommonToken.EMPTY_SOURCE = [ null, null ];

// Constructs a new {@link CommonToken} as a copy of another {@link Token}.
//
// <p>
// If {@code oldToken} is also a {@link CommonToken} instance, the newly
// constructed token will share a reference to the {@link //text} field and
// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
// be assigned the result of calling {@link //getText}, and {@link //source}
// will be constructed from the result of {@link Token//getTokenSource} and
// {@link Token//getInputStream}.</p>
//
// @param oldToken The token to copy.
//
CommonToken.prototype.clone = function() {
	var t = new CommonToken(this.source, this.type, this.channel, this.start,
			this.stop);
	t.tokenIndex = this.tokenIndex;
	t.line = this.line;
	t.column = this.column;
	t.text = this.text;
	return t;
};

Object.defineProperty(CommonToken.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		}
		var input = this.getInputStream();
		if (input === null) {
			return null;
		}
		var n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	},
	set : function(text) {
		this._text = text;
	}
});

CommonToken.prototype.toString = function() {
	var txt = this.text;
	if (txt !== null) {
		txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
	} else {
		txt = "<no text>";
	}
	return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
			txt + "',<" + this.type + ">" +
			(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
			this.line + ":" + this.column + "]";
};

exports.Token = Token;
exports.CommonToken = CommonToken;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ExpressionBase = (function () {
    function ExpressionBase() {
        this._expressions = {};
    }
    Object.defineProperty(ExpressionBase.prototype, "expressions", {
        get: function () {
            return this._expressions;
        },
        enumerable: true,
        configurable: true
    });
    ExpressionBase.prototype.set = function (name, expression) {
        this._expressions[name] = {
            expression: expression
        };
    };
    ExpressionBase.prototype.get = function (name) {
        var expressionEntry = this._expressions[name];
        if (null == expressionEntry)
            return null;
        return expressionEntry.expression;
    };
    ExpressionBase.prototype.cloneExpressionsFrom = function (src) {
        var expressions = {};
        for (var name_1 in src.expressions) {
            var expression = src.expressions[name_1].expression.clone();
            expressions[name_1] = {
                expression: expression
            };
        }
        this._expressions = expressions;
    };
    return ExpressionBase;
}());
exports.ExpressionBase = ExpressionBase;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.4';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19), __webpack_require__(53)(module)))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/*jslint smarttabs:true */

var Token = __webpack_require__(4).Token;

/* stop is not included! */
function Interval(start, stop) {
	this.start = start;
	this.stop = stop;
	return this;
}

Interval.prototype.contains = function(item) {
	return item >= this.start && item < this.stop;
};

Interval.prototype.toString = function() {
	if(this.start===this.stop-1) {
		return this.start.toString();
	} else {
		return this.start.toString() + ".." + (this.stop-1).toString();
	}
};


Object.defineProperty(Interval.prototype, "length", {
	get : function() {
		return this.stop - this.start;
	}
});

function IntervalSet() {
	this.intervals = null;
	this.readOnly = false;
}

IntervalSet.prototype.first = function(v) {
	if (this.intervals === null || this.intervals.length===0) {
		return Token.INVALID_TYPE;
	} else {
		return this.intervals[0].start;
	}
};

IntervalSet.prototype.addOne = function(v) {
	this.addInterval(new Interval(v, v + 1));
};

IntervalSet.prototype.addRange = function(l, h) {
	this.addInterval(new Interval(l, h + 1));
};

IntervalSet.prototype.addInterval = function(v) {
	if (this.intervals === null) {
		this.intervals = [];
		this.intervals.push(v);
	} else {
		// find insert pos
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// distinct range -> insert
			if (v.stop < i.start) {
				this.intervals.splice(k, 0, v);
				return;
			}
			// contiguous range -> adjust
			else if (v.stop === i.start) {
				this.intervals[k].start = v.start;
				return;
			}
			// overlapping range -> adjust and reduce
			else if (v.start <= i.stop) {
				this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
				this.reduce(k);
				return;
			}
		}
		// greater than any existing
		this.intervals.push(v);
	}
};

IntervalSet.prototype.addSet = function(other) {
	if (other.intervals !== null) {
		for (var k = 0; k < other.intervals.length; k++) {
			var i = other.intervals[k];
			this.addInterval(new Interval(i.start, i.stop));
		}
	}
	return this;
};

IntervalSet.prototype.reduce = function(k) {
	// only need to reduce if k is not the last
	if (k < this.intervalslength - 1) {
		var l = this.intervals[k];
		var r = this.intervals[k + 1];
		// if r contained in l
		if (l.stop >= r.stop) {
			this.intervals.pop(k + 1);
			this.reduce(k);
		} else if (l.stop >= r.start) {
			this.intervals[k] = new Interval(l.start, r.stop);
			this.intervals.pop(k + 1);
		}
	}
};

IntervalSet.prototype.complement = function(start, stop) {
    var result = new IntervalSet();
    result.addInterval(new Interval(start,stop+1));
    for(var i=0; i<this.intervals.length; i++) {
        result.removeRange(this.intervals[i]);
    }
    return result;
};

IntervalSet.prototype.contains = function(item) {
	if (this.intervals === null) {
		return false;
	} else {
		for (var k = 0; k < this.intervals.length; k++) {
			if(this.intervals[k].contains(item)) {
				return true;
			}
		}
		return false;
	}
};

Object.defineProperty(IntervalSet.prototype, "length", {
	get : function() {
		var len = 0;
		this.intervals.map(function(i) {len += i.length;});
		return len;
	}
});

IntervalSet.prototype.removeRange = function(v) {
    if(v.start===v.stop-1) {
        this.removeOne(v.start);
    } else if (this.intervals!==null) {
        var k = 0;
        for(var n=0; n<this.intervals.length; n++) {
            var i = this.intervals[k];
            // intervals are ordered
            if (v.stop<=i.start) {
                return;
            }
            // check for including range, split it
            else if(v.start>i.start && v.stop<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
                var x = new Interval(v.stop, i.stop);
                this.intervals.splice(k, 0, x);
                return;
            }
            // check for included range, remove it
            else if(v.start<=i.start && v.stop>=i.stop) {
                this.intervals.splice(k, 1);
                k = k - 1; // need another pass
            }
            // check for lower boundary
            else if(v.start<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
            }
            // check for upper boundary
            else if(v.stop<i.stop) {
                this.intervals[k] = new Interval(v.stop, i.stop);
            }
            k += 1;
        }
    }
};

IntervalSet.prototype.removeOne = function(v) {
	if (this.intervals !== null) {
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// intervals is ordered
			if (v < i.start) {
				return;
			}
			// check for single value range
			else if (v === i.start && v === i.stop - 1) {
				this.intervals.splice(k, 1);
				return;
			}
			// check for lower boundary
			else if (v === i.start) {
				this.intervals[k] = new Interval(i.start + 1, i.stop);
				return;
			}
			// check for upper boundary
			else if (v === i.stop - 1) {
				this.intervals[k] = new Interval(i.start, i.stop - 1);
				return;
			}
			// split existing range
			else if (v < i.stop - 1) {
				var x = new Interval(i.start, v);
				i.start = v + 1;
				this.intervals.splice(k, 0, x);
				return;
			}
		}
	}
};

IntervalSet.prototype.toString = function(literalNames, symbolicNames, elemsAreChar) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	elemsAreChar = elemsAreChar || false;
	if (this.intervals === null) {
		return "{}";
	} else if(literalNames!==null || symbolicNames!==null) {
		return this.toTokenString(literalNames, symbolicNames);
	} else if(elemsAreChar) {
		return this.toCharString();
	} else {
		return this.toIndexString();
	}
};

IntervalSet.prototype.toCharString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push("'" + String.fromCharCode(v.start) + "'");
			}
		} else {
			names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop-1) + "'");
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toIndexString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push(v.start.toString());
			}
		} else {
			names.push(v.start.toString() + ".." + (v.stop-1).toString());
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		for (var j = v.start; j < v.stop; j++) {
			names.push(this.elementName(literalNames, symbolicNames, j));
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) {
	if (a === Token.EOF) {
		return "<EOF>";
	} else if (a === Token.EPSILON) {
		return "<EPSILON>";
	} else {
		return literalNames[a] || symbolicNames[a];
	}
};

exports.Interval = Interval;
exports.IntervalSet = IntervalSet;


/***/ }),
/* 8 */,
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(6);
var SectionBase = (function () {
    function SectionBase(typeId) {
        this._codeBlocks = [];
        this._comments = [];
        this._id = lodash_1.uniqueId(typeId + "$");
    }
    Object.defineProperty(SectionBase.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SectionBase.prototype, "codeBlocks", {
        get: function () {
            return this._codeBlocks;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SectionBase.prototype, "comments", {
        get: function () {
            return this._comments;
        },
        enumerable: true,
        configurable: true
    });
    SectionBase.prototype.applyAcslTypesToCodeBlocks = function (typeDictionary) {
        this._codeBlocks.forEach(function (cb) { return cb.applyAcslTypes(typeDictionary); });
    };
    return SectionBase;
}());
exports.SectionBase = SectionBase;


/***/ }),
/* 10 */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// The following images show the relation of states and
// {@link ATNState//transitions} for various grammar constructs.
//
// <ul>
//
// <li>Solid edges marked with an &//0949; indicate a required
// {@link EpsilonTransition}.</li>
//
// <li>Dashed edges indicate locations where any transition derived from
// {@link Transition} might appear.</li>
//
// <li>Dashed nodes are place holders for either a sequence of linked
// {@link BasicState} states or the inclusion of a block representing a nested
// construct in one of the forms below.</li>
//
// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
// any number of alternatives (one or more). Nodes without the {@code ...} only
// support the exact number of alternatives shown in the diagram.</li>
//
// </ul>
//
// <h2>Basic Blocks</h2>
//
// <h3>Rule</h3>
//
// <embed src="images/Rule.svg" type="image/svg+xml"/>
//
// <h3>Block of 1 or more alternatives</h3>
//
// <embed src="images/Block.svg" type="image/svg+xml"/>
//
// <h2>Greedy Loops</h2>
//
// <h3>Greedy Closure: {@code (...)*}</h3>
//
// <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Positive Closure: {@code (...)+}</h3>
//
// <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Optional: {@code (...)?}</h3>
//
// <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
//
// <h2>Non-Greedy Loops</h2>
//
// <h3>Non-Greedy Closure: {@code (...)*?}</h3>
//
// <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
//
// <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Optional: {@code (...)??}</h3>
//
// <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
//

var INITIAL_NUM_TRANSITIONS = 4;

function ATNState() {
    // Which ATN are we in?
    this.atn = null;
    this.stateNumber = ATNState.INVALID_STATE_NUMBER;
    this.stateType = null;
    this.ruleIndex = 0; // at runtime, we don't have Rule objects
    this.epsilonOnlyTransitions = false;
    // Track the transitions emanating from this ATN state.
    this.transitions = [];
    // Used to cache lookahead during parsing, not used during construction
    this.nextTokenWithinRule = null;
    return this;
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;

ATNState.prototype.toString = function() {
	return this.stateNumber;
};

ATNState.prototype.equals = function(other) {
    if (other instanceof ATNState) {
        return this.stateNumber===other.stateNumber;
    } else {
        return false;
    }
};

ATNState.prototype.isNonGreedyExitState = function() {
    return false;
};


ATNState.prototype.addTransition = function(trans, index) {
	if(index===undefined) {
		index = -1;
	}
    if (this.transitions.length===0) {
        this.epsilonOnlyTransitions = trans.isEpsilon;
    } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
        this.epsilonOnlyTransitions = false;
    }
    if (index===-1) {
        this.transitions.push(trans);
    } else {
        this.transitions.splice(index, 1, trans);
    }
};

function BasicState() {
	ATNState.call(this);
    this.stateType = ATNState.BASIC;
    return this;
}

BasicState.prototype = Object.create(ATNState.prototype);
BasicState.prototype.constructor = BasicState;


function DecisionState() {
	ATNState.call(this);
    this.decision = -1;
    this.nonGreedy = false;
    return this;
}

DecisionState.prototype = Object.create(ATNState.prototype);
DecisionState.prototype.constructor = DecisionState;


//  The start of a regular {@code (...)} block.
function BlockStartState() {
	DecisionState.call(this);
	this.endState = null;
	return this;
}

BlockStartState.prototype = Object.create(DecisionState.prototype);
BlockStartState.prototype.constructor = BlockStartState;


function BasicBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.BLOCK_START;
	return this;
}

BasicBlockStartState.prototype = Object.create(BlockStartState.prototype);
BasicBlockStartState.prototype.constructor = BasicBlockStartState;


// Terminal node of a simple {@code (a|b|c)} block.
function BlockEndState() {
	ATNState.call(this);
	this.stateType = ATNState.BLOCK_END;
    this.startState = null;
    return this;
}

BlockEndState.prototype = Object.create(ATNState.prototype);
BlockEndState.prototype.constructor = BlockEndState;


// The last node in the ATN for a rule, unless that rule is the start symbol.
//  In that case, there is one transition to EOF. Later, we might encode
//  references to all calls to this rule to compute FOLLOW sets for
//  error handling.
//
function RuleStopState() {
	ATNState.call(this);
    this.stateType = ATNState.RULE_STOP;
    return this;
}

RuleStopState.prototype = Object.create(ATNState.prototype);
RuleStopState.prototype.constructor = RuleStopState;

function RuleStartState() {
	ATNState.call(this);
	this.stateType = ATNState.RULE_START;
	this.stopState = null;
	this.isPrecedenceRule = false;
	return this;
}

RuleStartState.prototype = Object.create(ATNState.prototype);
RuleStartState.prototype.constructor = RuleStartState;

// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
//  one to the loop back to start of the block and one to exit.
//
function PlusLoopbackState() {
	DecisionState.call(this);
	this.stateType = ATNState.PLUS_LOOP_BACK;
	return this;
}

PlusLoopbackState.prototype = Object.create(DecisionState.prototype);
PlusLoopbackState.prototype.constructor = PlusLoopbackState;


// Start of {@code (A|B|...)+} loop. Technically a decision state, but
//  we don't use for code generation; somebody might need it, so I'm defining
//  it for completeness. In reality, the {@link PlusLoopbackState} node is the
//  real decision-making note for {@code A+}.
//
function PlusBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.PLUS_BLOCK_START;
    this.loopBackState = null;
    return this;
}

PlusBlockStartState.prototype = Object.create(BlockStartState.prototype);
PlusBlockStartState.prototype.constructor = PlusBlockStartState;

// The block that begins a closure loop.
function StarBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.STAR_BLOCK_START;
	return this;
}

StarBlockStartState.prototype = Object.create(BlockStartState.prototype);
StarBlockStartState.prototype.constructor = StarBlockStartState;


function StarLoopbackState() {
	ATNState.call(this);
	this.stateType = ATNState.STAR_LOOP_BACK;
	return this;
}

StarLoopbackState.prototype = Object.create(ATNState.prototype);
StarLoopbackState.prototype.constructor = StarLoopbackState;


function StarLoopEntryState() {
	DecisionState.call(this);
	this.stateType = ATNState.STAR_LOOP_ENTRY;
    this.loopBackState = null;
    // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
    this.isPrecedenceDecision = null;
    return this;
}

StarLoopEntryState.prototype = Object.create(DecisionState.prototype);
StarLoopEntryState.prototype.constructor = StarLoopEntryState;


// Mark the end of a * or + loop.
function LoopEndState() {
	ATNState.call(this);
	this.stateType = ATNState.LOOP_END;
	this.loopBackState = null;
	return this;
}

LoopEndState.prototype = Object.create(ATNState.prototype);
LoopEndState.prototype.constructor = LoopEndState;


// The Tokens rule start state linking to each lexer rule start state */
function TokensStartState() {
	DecisionState.call(this);
	this.stateType = ATNState.TOKEN_START;
	return this;
}

TokensStartState.prototype = Object.create(DecisionState.prototype);
TokensStartState.prototype.constructor = TokensStartState;

exports.ATNState = ATNState;
exports.BasicState = BasicState;
exports.DecisionState = DecisionState;
exports.BlockStartState = BlockStartState;
exports.BlockEndState = BlockEndState;
exports.LoopEndState = LoopEndState;
exports.RuleStartState = RuleStartState;
exports.RuleStopState = RuleStopState;
exports.TokensStartState = TokensStartState;
exports.PlusLoopbackState = PlusLoopbackState;
exports.StarLoopbackState = StarLoopbackState;
exports.StarLoopEntryState = StarLoopEntryState;
exports.PlusBlockStartState = PlusBlockStartState;
exports.StarBlockStartState = StarBlockStartState;
exports.BasicBlockStartState = BasicBlockStartState;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
//  3 kinds of errors: prediction errors, failed predicate errors, and
//  mismatched input errors. In each case, the parser knows where it is
//  in the input, where it is in the ATN, the rule invocation stack,
//  and what kind of problem occurred.

var PredicateTransition = __webpack_require__(16).PredicateTransition;

function RecognitionException(params) {
	Error.call(this);
	if (!!Error.captureStackTrace) {
        Error.captureStackTrace(this, RecognitionException);
	} else {
		var stack = new Error().stack;
	}
	this.message = params.message;
    this.recognizer = params.recognizer;
    this.input = params.input;
    this.ctx = params.ctx;
    // The current {@link Token} when an error occurred. Since not all streams
    // support accessing symbols by index, we have to track the {@link Token}
    // instance itself.
    this.offendingToken = null;
    // Get the ATN state number the parser was in at the time the error
    // occurred. For {@link NoViableAltException} and
    // {@link LexerNoViableAltException} exceptions, this is the
    // {@link DecisionState} number. For others, it is the state whose outgoing
    // edge we couldn't match.
    this.offendingState = -1;
    if (this.recognizer!==null) {
        this.offendingState = this.recognizer.state;
    }
    return this;
}

RecognitionException.prototype = Object.create(Error.prototype);
RecognitionException.prototype.constructor = RecognitionException;

// <p>If the state number is not known, this method returns -1.</p>

//
// Gets the set of input symbols which could potentially follow the
// previously matched symbol at the time this exception was thrown.
//
// <p>If the set of expected tokens is not known and could not be computed,
// this method returns {@code null}.</p>
//
// @return The set of token types that could potentially follow the current
// state in the ATN, or {@code null} if the information is not available.
// /
RecognitionException.prototype.getExpectedTokens = function() {
    if (this.recognizer!==null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
    } else {
        return null;
    }
};

RecognitionException.prototype.toString = function() {
    return this.message;
};

function LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {
	RecognitionException.call(this, {message:"", recognizer:lexer, input:input, ctx:null});
    this.startIndex = startIndex;
    this.deadEndConfigs = deadEndConfigs;
    return this;
}

LexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);
LexerNoViableAltException.prototype.constructor = LexerNoViableAltException;

LexerNoViableAltException.prototype.toString = function() {
    var symbol = "";
    if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText((this.startIndex,this.startIndex));
    }
    return "LexerNoViableAltException" + symbol;
};

// Indicates that the parser could not decide which of two or more paths
// to take based upon the remaining input. It tracks the starting token
// of the offending input and also knows where the parser was
// in the various paths when the error. Reported by reportNoViableAlternative()
//
function NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
	ctx = ctx || recognizer._ctx;
	offendingToken = offendingToken || recognizer.getCurrentToken();
	startToken = startToken || recognizer.getCurrentToken();
	input = input || recognizer.getInputStream();
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:input, ctx:ctx});
    // Which configurations did we try at input.index() that couldn't match
	// input.LT(1)?//
    this.deadEndConfigs = deadEndConfigs;
    // The token object at the start index; the input stream might
    // not be buffering tokens so get a reference to it. (At the
    // time the error occurred, of course the stream needs to keep a
    // buffer all of the tokens but later we might not have access to those.)
    this.startToken = startToken;
    this.offendingToken = offendingToken;
}

NoViableAltException.prototype = Object.create(RecognitionException.prototype);
NoViableAltException.prototype.constructor = NoViableAltException;

// This signifies any kind of mismatched input exceptions such as
// when the current input does not match the expected token.
//
function InputMismatchException(recognizer) {
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:recognizer.getInputStream(), ctx:recognizer._ctx});
    this.offendingToken = recognizer.getCurrentToken();
}

InputMismatchException.prototype = Object.create(RecognitionException.prototype);
InputMismatchException.prototype.constructor = InputMismatchException;

// A semantic predicate failed during validation. Validation of predicates
// occurs when normally parsing the alternative just like matching a token.
// Disambiguating predicate evaluation occurs when we test a predicate during
// prediction.

function FailedPredicateException(recognizer, predicate, message) {
	RecognitionException.call(this, {message:this.formatMessage(predicate,message || null), recognizer:recognizer,
                         input:recognizer.getInputStream(), ctx:recognizer._ctx});
    var s = recognizer._interp.atn.states[recognizer.state];
    var trans = s.transitions[0];
    if (trans instanceof PredicateTransition) {
        this.ruleIndex = trans.ruleIndex;
        this.predicateIndex = trans.predIndex;
    } else {
        this.ruleIndex = 0;
        this.predicateIndex = 0;
    }
    this.predicate = predicate;
    this.offendingToken = recognizer.getCurrentToken();
    return this;
}

FailedPredicateException.prototype = Object.create(RecognitionException.prototype);
FailedPredicateException.prototype.constructor = FailedPredicateException;

FailedPredicateException.prototype.formatMessage = function(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
};

function ParseCancellationException() {
	Error.call(this);
	Error.captureStackTrace(this, ParseCancellationException);
	return this;
}

ParseCancellationException.prototype = Object.create(Error.prototype);
ParseCancellationException.prototype.constructor = ParseCancellationException;

exports.RecognitionException = RecognitionException;
exports.NoViableAltException = NoViableAltException;
exports.LexerNoViableAltException = LexerNoViableAltException;
exports.InputMismatchException = InputMismatchException;
exports.FailedPredicateException = FailedPredicateException;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// The basic notion of a tree has a parent, a payload, and a list of children.
//  It is the most abstract interface for all the trees used by ANTLR.
///

var Token = __webpack_require__(4).Token;
var Interval = __webpack_require__(7).Interval;
var INVALID_INTERVAL = new Interval(-1, -2);
var Utils = __webpack_require__(2);


function Tree() {
	return this;
}

function SyntaxTree() {
	Tree.call(this);
	return this;
}

SyntaxTree.prototype = Object.create(Tree.prototype);
SyntaxTree.prototype.constructor = SyntaxTree;

function ParseTree() {
	SyntaxTree.call(this);
	return this;
}

ParseTree.prototype = Object.create(SyntaxTree.prototype);
ParseTree.prototype.constructor = ParseTree;

function RuleNode() {
	ParseTree.call(this);
	return this;
}

RuleNode.prototype = Object.create(ParseTree.prototype);
RuleNode.prototype.constructor = RuleNode;

function TerminalNode() {
	ParseTree.call(this);
	return this;
}

TerminalNode.prototype = Object.create(ParseTree.prototype);
TerminalNode.prototype.constructor = TerminalNode;

function ErrorNode() {
	TerminalNode.call(this);
	return this;
}

ErrorNode.prototype = Object.create(TerminalNode.prototype);
ErrorNode.prototype.constructor = ErrorNode;

function ParseTreeVisitor() {
	return this;
}

ParseTreeVisitor.prototype.visit = function(ctx) {
 	if (Array.isArray(ctx)) {
		return ctx.map(function(child) {
            return ctx.accept(this);
        }, this);
	} else {
		return ctx.accept(this);
	}
};

ParseTreeVisitor.prototype.visitChildren = function(ctx) {
  return this.visit(ctx.children);
}

ParseTreeVisitor.prototype.visitTerminal = function(node) {
};

ParseTreeVisitor.prototype.visitErrorNode = function(node) {
};


function ParseTreeListener() {
	return this;
}

ParseTreeListener.prototype.visitTerminal = function(node) {
};

ParseTreeListener.prototype.visitErrorNode = function(node) {
};

ParseTreeListener.prototype.enterEveryRule = function(node) {
};

ParseTreeListener.prototype.exitEveryRule = function(node) {
};

function TerminalNodeImpl(symbol) {
	TerminalNode.call(this);
	this.parentCtx = null;
	this.symbol = symbol;
	return this;
}

TerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);
TerminalNodeImpl.prototype.constructor = TerminalNodeImpl;

TerminalNodeImpl.prototype.getChild = function(i) {
	return null;
};

TerminalNodeImpl.prototype.getSymbol = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getParent = function() {
	return this.parentCtx;
};

TerminalNodeImpl.prototype.getPayload = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getSourceInterval = function() {
	if (this.symbol === null) {
		return INVALID_INTERVAL;
	}
	var tokenIndex = this.symbol.tokenIndex;
	return new Interval(tokenIndex, tokenIndex);
};

TerminalNodeImpl.prototype.getChildCount = function() {
	return 0;
};

TerminalNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitTerminal(this);
};

TerminalNodeImpl.prototype.getText = function() {
	return this.symbol.text;
};

TerminalNodeImpl.prototype.toString = function() {
	if (this.symbol.type === Token.EOF) {
		return "<EOF>";
	} else {
		return this.symbol.text;
	}
};

// Represents a token that was consumed during resynchronization
// rather than during a valid match operation. For example,
// we will create this kind of a node during single token insertion
// and deletion as well as during "consume until error recovery set"
// upon no viable alternative exceptions.

function ErrorNodeImpl(token) {
	TerminalNodeImpl.call(this, token);
	return this;
}

ErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);
ErrorNodeImpl.prototype.constructor = ErrorNodeImpl;

ErrorNodeImpl.prototype.isErrorNode = function() {
	return true;
};

ErrorNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitErrorNode(this);
};

function ParseTreeWalker() {
	return this;
}

ParseTreeWalker.prototype.walk = function(listener, t) {
	var errorNode = t instanceof ErrorNode ||
			(t.isErrorNode !== undefined && t.isErrorNode());
	if (errorNode) {
		listener.visitErrorNode(t);
	} else if (t instanceof TerminalNode) {
		listener.visitTerminal(t);
	} else {
		this.enterRule(listener, t);
		for (var i = 0; i < t.getChildCount(); i++) {
			var child = t.getChild(i);
			this.walk(listener, child);
		}
		this.exitRule(listener, t);
	}
};
//
// The discovery of a rule node, involves sending two events: the generic
// {@link ParseTreeListener//enterEveryRule} and a
// {@link RuleContext}-specific event. First we trigger the generic and then
// the rule specific. We to them in reverse order upon finishing the node.
//
ParseTreeWalker.prototype.enterRule = function(listener, r) {
	var ctx = r.getRuleContext();
	listener.enterEveryRule(ctx);
	ctx.enterRule(listener);
};

ParseTreeWalker.prototype.exitRule = function(listener, r) {
	var ctx = r.getRuleContext();
	ctx.exitRule(listener);
	listener.exitEveryRule(ctx);
};

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

exports.RuleNode = RuleNode;
exports.ErrorNode = ErrorNode;
exports.TerminalNode = TerminalNode;
exports.ErrorNodeImpl = ErrorNodeImpl;
exports.TerminalNodeImpl = TerminalNodeImpl;
exports.ParseTreeListener = ParseTreeListener;
exports.ParseTreeVisitor = ParseTreeVisitor;
exports.ParseTreeWalker = ParseTreeWalker;
exports.INVALID_INTERVAL = INVALID_INTERVAL;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var RuleContext = __webpack_require__(33).RuleContext;
var Hash = __webpack_require__(2).Hash;

function PredictionContext(cachedHashCode) {
	this.cachedHashCode = cachedHashCode;
}

// Represents {@code $} in local context prediction, which means wildcard.
// {@code//+x =//}.
// /
PredictionContext.EMPTY = null;

// Represents {@code $} in an array in full context mode, when {@code $}
// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
// {@code $} = {@link //EMPTY_RETURN_STATE}.
// /
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;

// Stores the computed hash code of this {@link PredictionContext}. The hash
// code is computed in parts to match the following reference algorithm.
//
// <pre>
// private int referenceHashCode() {
// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
// //INITIAL_HASH});
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
// getParent}(i));
// }
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
// //getReturnState getReturnState}(i));
// }
//
// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
// //size()});
// return hash;
// }
// </pre>
// /

// This means only the {@link //EMPTY} context is in set.
PredictionContext.prototype.isEmpty = function() {
	return this === PredictionContext.EMPTY;
};

PredictionContext.prototype.hasEmptyPath = function() {
	return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
};

PredictionContext.prototype.hashCode = function() {
	return this.cachedHashCode;
};


PredictionContext.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};
/*
function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}
*/

// Used to cache {@link PredictionContext} objects. Its used for the shared
// context cash associated with contexts in DFA states. This cache
// can be used for both lexers and parsers.

function PredictionContextCache() {
	this.cache = {};
	return this;
}

// Add a context to the cache and return it. If the context already exists,
// return that one instead and do not add a new context to the cache.
// Protect shared cache from unsafe thread access.
//
PredictionContextCache.prototype.add = function(ctx) {
	if (ctx === PredictionContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	var existing = this.cache[ctx] || null;
	if (existing !== null) {
		return existing;
	}
	this.cache[ctx] = ctx;
	return ctx;
};

PredictionContextCache.prototype.get = function(ctx) {
	return this.cache[ctx] || null;
};

Object.defineProperty(PredictionContextCache.prototype, "length", {
	get : function() {
		return this.cache.length;
	}
});

function SingletonPredictionContext(parent, returnState) {
	var hashCode = 0;
	if(parent !== null) {
		var hash = new Hash();
		hash.update(parent, returnState);
        hashCode = hash.finish();
	}
	PredictionContext.call(this, hashCode);
	this.parentCtx = parent;
	this.returnState = returnState;
}

SingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);
SingletonPredictionContext.prototype.contructor = SingletonPredictionContext;

SingletonPredictionContext.create = function(parent, returnState) {
	if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
		// someone can pass in the bits of an array ctx that mean $
		return PredictionContext.EMPTY;
	} else {
		return new SingletonPredictionContext(parent, returnState);
	}
};

Object.defineProperty(SingletonPredictionContext.prototype, "length", {
	get : function() {
		return 1;
	}
});

SingletonPredictionContext.prototype.getParent = function(index) {
	return this.parentCtx;
};

SingletonPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

SingletonPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof SingletonPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		if(this.returnState !== other.returnState)
            return false;
        else if(this.parentCtx==null)
            return other.parentCtx==null
		else
            return this.parentCtx.equals(other.parentCtx);
	}
};

SingletonPredictionContext.prototype.toString = function() {
	var up = this.parentCtx === null ? "" : this.parentCtx.toString();
	if (up.length === 0) {
		if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
			return "$";
		} else {
			return "" + this.returnState;
		}
	} else {
		return "" + this.returnState + " " + up;
	}
};

function EmptyPredictionContext() {
	SingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);
	return this;
}

EmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);
EmptyPredictionContext.prototype.constructor = EmptyPredictionContext;

EmptyPredictionContext.prototype.isEmpty = function() {
	return true;
};

EmptyPredictionContext.prototype.getParent = function(index) {
	return null;
};

EmptyPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

EmptyPredictionContext.prototype.equals = function(other) {
	return this === other;
};

EmptyPredictionContext.prototype.toString = function() {
	return "$";
};

PredictionContext.EMPTY = new EmptyPredictionContext();

function ArrayPredictionContext(parents, returnStates) {
	// Parent can be null only if full ctx mode and we make an array
	// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
	// null parent and
	// returnState == {@link //EMPTY_RETURN_STATE}.
	var h = new Hash();
	h.update(parents, returnStates);
	var hashCode = h.finish();
	PredictionContext.call(this, hashCode);
	this.parents = parents;
	this.returnStates = returnStates;
	return this;
}

ArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);
ArrayPredictionContext.prototype.constructor = ArrayPredictionContext;

ArrayPredictionContext.prototype.isEmpty = function() {
	// since EMPTY_RETURN_STATE can only appear in the last position, we
	// don't need to verify that size==1
	return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
};

Object.defineProperty(ArrayPredictionContext.prototype, "length", {
	get : function() {
		return this.returnStates.length;
	}
});

ArrayPredictionContext.prototype.getParent = function(index) {
	return this.parents[index];
};

ArrayPredictionContext.prototype.getReturnState = function(index) {
	return this.returnStates[index];
};

ArrayPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ArrayPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		return this.returnStates === other.returnStates &&
				this.parents === other.parents;
	}
};

ArrayPredictionContext.prototype.toString = function() {
	if (this.isEmpty()) {
		return "[]";
	} else {
		var s = "[";
		for (var i = 0; i < this.returnStates.length; i++) {
			if (i > 0) {
				s = s + ", ";
			}
			if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
				s = s + "$";
				continue;
			}
			s = s + this.returnStates[i];
			if (this.parents[i] !== null) {
				s = s + " " + this.parents[i];
			} else {
				s = s + "null";
			}
		}
		return s + "]";
	}
};

// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
// Return {@link //EMPTY} if {@code outerContext} is empty or null.
// /
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	var state = atn.states[outerContext.invokingState];
	var transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
/*
function calculateListsHashString(parents, returnStates) {
	var s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}
*/
function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

//
// Merge two {@link SingletonPredictionContext} instances.
//
// <p>Stack tops equal, parents merge is same; return left graph.<br>
// <embed src="images/SingletonMerge_SameRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Same stack top, parents differ; merge parents giving array node, then
// remainders of those graphs. A new root node is created to point to the
// merged parents.<br>
// <embed src="images/SingletonMerge_SameRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to same parent. Make array node for the
// root where both element in the root point to the same (original)
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to different parents. Make array node for
// the root where each element points to the corresponding original
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// @param mergeCache
// /
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	var rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		var spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		var singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			var payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			var parents = [ singleParent, singleParent ];
			var apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		var payloads = [ a.returnState, b.returnState ];
		var parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		var a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

//
// Handle case where at least one of {@code a} or {@code b} is
// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
// to represent {@link //EMPTY}.
//
// <h2>Local-Context Merges</h2>
//
// <p>These local-context merge operations are used when {@code rootIsWildcard}
// is true.</p>
//
// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
// <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
// {@code //EMPTY}; return left graph.<br>
// <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
//
// <p>Special case of last merge if local context.<br>
// <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
//
// <h2>Full-Context Merges</h2>
//
// <p>These full-context merge operations are used when {@code rootIsWildcard}
// is false.</p>
//
// <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
//
// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
// null parent).<br>
// <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// /
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			var payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			var payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

//
// Merge two {@link ArrayPredictionContext} instances.
//
// <p>Different tops, different parents.<br>
// <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, same parents.<br>
// <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, different parents.<br>
// <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, all shared parents.<br>
// <embed src="images/ArrayMerge_ShareTopSharePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Equal tops, merge parents and reduce top to
// {@link SingletonPredictionContext}.<br>
// <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
// /
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	var i = 0; // walks a
	var j = 0; // walks b
	var k = 0; // walks target M array

	var mergedReturnStates = [];
	var mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		var a_parent = a.parents[i];
		var b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			var payload = a.returnStates[i];
			// $+$ = $
			var bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			var ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				var mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedParents[k] = mergedParent;
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (var p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (var p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			var a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	var M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

//
// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
// ones.
// /
function combineCommonParents(parents) {
	var uniqueParents = {};

	for (var p = 0; p < parents.length; p++) {
		var parent = parents[p];
		if (!(parent in uniqueParents)) {
			uniqueParents[parent] = parent;
		}
	}
	for (var q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents[parents[q]];
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	var existing = visited[context] || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited[context] = existing;
		return existing;
	}
	var changed = false;
	var parents = [];
	for (var i = 0; i < parents.length; i++) {
		var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (var j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited[context] = context;
		return context;
	}
	var updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited[updated] = updated;
	visited[context] = updated;

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = {};
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited[context] !== null) {
			return nodes;
		}
		visited[context] = context;
		nodes.push(context);
		for (var i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

exports.merge = merge;
exports.PredictionContext = PredictionContext;
exports.PredictionContextCache = PredictionContextCache;
exports.SingletonPredictionContext = SingletonPredictionContext;
exports.predictionContextFromRuleContext = predictionContextFromRuleContext;
exports.getCachedPredictionContext = getCachedPredictionContext;


/***/ }),
/* 14 */,
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var LL1Analyzer = __webpack_require__(156).LL1Analyzer;
var IntervalSet = __webpack_require__(7).IntervalSet;

function ATN(grammarType , maxTokenType) {

    // Used for runtime deserialization of ATNs from strings///
    // The type of the ATN.
    this.grammarType = grammarType;
    // The maximum value for any symbol recognized by a transition in the ATN.
    this.maxTokenType = maxTokenType;
    this.states = [];
    // Each subrule/rule is a decision point and we must track them so we
    //  can go back later and build DFA predictors for them.  This includes
    //  all the rules, subrules, optional blocks, ()+, ()* etc...
    this.decisionToState = [];
    // Maps from rule index to starting state number.
    this.ruleToStartState = [];
    // Maps from rule index to stop state number.
    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    // For lexer ATNs, this maps the rule index to the resulting token type.
    // For parser ATNs, this maps the rule index to the generated bypass token
    // type if the
    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
    // deserialization option was specified; otherwise, this is {@code null}.
    this.ruleToTokenType = null;
    // For lexer ATNs, this is an array of {@link LexerAction} objects which may
    // be referenced by action transitions in the ATN.
    this.lexerActions = null;
    this.modeToStartState = [];

    return this;
}

// Compute the set of valid tokens that can occur starting in state {@code s}.
//  If {@code ctx} is null, the set of tokens will not include what can follow
//  the rule surrounding {@code s}. In other words, the set will be
//  restricted to tokens reachable staying within {@code s}'s rule.
ATN.prototype.nextTokensInContext = function(s, ctx) {
    var anal = new LL1Analyzer(this);
    return anal.LOOK(s, null, ctx);
};

// Compute the set of valid tokens that can occur starting in {@code s} and
// staying in same rule. {@link Token//EPSILON} is in set if we reach end of
// rule.
ATN.prototype.nextTokensNoContext = function(s) {
    if (s.nextTokenWithinRule !== null ) {
        return s.nextTokenWithinRule;
    }
    s.nextTokenWithinRule = this.nextTokensInContext(s, null);
    s.nextTokenWithinRule.readOnly = true;
    return s.nextTokenWithinRule;
};

ATN.prototype.nextTokens = function(s, ctx) {
    if ( ctx===undefined ) {
        return this.nextTokensNoContext(s);
    } else {
        return this.nextTokensInContext(s, ctx);
    }
};

ATN.prototype.addState = function( state) {
    if ( state !== null ) {
        state.atn = this;
        state.stateNumber = this.states.length;
    }
    this.states.push(state);
};

ATN.prototype.removeState = function( state) {
    this.states[state.stateNumber] = null; // just free mem, don't shift states in list
};

ATN.prototype.defineDecisionState = function( s) {
    this.decisionToState.push(s);
    s.decision = this.decisionToState.length-1;
    return s.decision;
};

ATN.prototype.getDecisionState = function( decision) {
    if (this.decisionToState.length===0) {
        return null;
    } else {
        return this.decisionToState[decision];
    }
};

// Computes the set of input symbols which could follow ATN state number
// {@code stateNumber} in the specified full {@code context}. This method
// considers the complete parser context, but does not evaluate semantic
// predicates (i.e. all predicates encountered during the calculation are
// assumed true). If a path in the ATN exists from the starting state to the
// {@link RuleStopState} of the outermost context without matching any
// symbols, {@link Token//EOF} is added to the returned set.
//
// <p>If {@code context} is {@code null}, it is treated as
// {@link ParserRuleContext//EMPTY}.</p>
//
// @param stateNumber the ATN state number
// @param context the full parse context
// @return The set of potentially valid input symbols which could follow the
// specified state in the specified context.
// @throws IllegalArgumentException if the ATN does not contain a state with
// number {@code stateNumber}
var Token = __webpack_require__(4).Token;

ATN.prototype.getExpectedTokens = function( stateNumber, ctx ) {
    if ( stateNumber < 0 || stateNumber >= this.states.length ) {
        throw("Invalid state number.");
    }
    var s = this.states[stateNumber];
    var following = this.nextTokens(s);
    if (!following.contains(Token.EPSILON)) {
        return following;
    }
    var expected = new IntervalSet();
    expected.addSet(following);
    expected.removeOne(Token.EPSILON);
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
        var invokingState = this.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON)) {
        expected.addOne(Token.EOF);
    }
    return expected;
};

ATN.INVALID_ALT_NUMBER = 0;

exports.ATN = ATN;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//  An ATN transition between any two ATN states.  Subclasses define
//  atom, set, epsilon, action, predicate, rule transitions.
//
//  <p>This is a one way link.  It emanates from a state (usually via a list of
//  transitions) and has a target state.</p>
//
//  <p>Since we never have to change the ATN transitions once we construct it,
//  we can fix these transitions as specific classes. The DFA transitions
//  on the other hand need to update the labels as it adds transitions to
//  the states. We'll use the term Edge for the DFA to distinguish them from
//  ATN transitions.</p>

var Token = __webpack_require__(4).Token;
var Interval = __webpack_require__(7).Interval;
var IntervalSet = __webpack_require__(7).IntervalSet;
var Predicate = __webpack_require__(23).Predicate;
var PrecedencePredicate = __webpack_require__(23).PrecedencePredicate;

function Transition (target) {
    // The target of this transition.
    if (target===undefined || target===null) {
        throw "target cannot be null.";
    }
    this.target = target;
    // Are we epsilon, action, sempred?
    this.isEpsilon = false;
    this.label = null;
    return this;
}
    // constants for serialization
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
Transition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?
Transition.ATOM = 5;
Transition.ACTION = 6;
Transition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges
function AtomTransition(target, label) {
	Transition.call(this, target);
	this.label_ = label; // The token type or character value; or, signifies special label.
    this.label = this.makeLabel();
    this.serializationType = Transition.ATOM;
    return this;
}

AtomTransition.prototype = Object.create(Transition.prototype);
AtomTransition.prototype.constructor = AtomTransition;

AtomTransition.prototype.makeLabel = function() {
	var s = new IntervalSet();
    s.addOne(this.label_);
    return s;
};

AtomTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
    return this.label_ === symbol;
};

AtomTransition.prototype.toString = function() {
	return this.label_;
};

function RuleTransition(ruleStart, ruleIndex, precedence, followState) {
	Transition.call(this, ruleStart);
    this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref
    this.precedence = precedence;
    this.followState = followState; // what node to begin computations following ref to rule
    this.serializationType = Transition.RULE;
    this.isEpsilon = true;
    return this;
}

RuleTransition.prototype = Object.create(Transition.prototype);
RuleTransition.prototype.constructor = RuleTransition;

RuleTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};


function EpsilonTransition(target, outermostPrecedenceReturn) {
	Transition.call(this, target);
    this.serializationType = Transition.EPSILON;
    this.isEpsilon = true;
    this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    return this;
}

EpsilonTransition.prototype = Object.create(Transition.prototype);
EpsilonTransition.prototype.constructor = EpsilonTransition;

EpsilonTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

EpsilonTransition.prototype.toString = function() {
	return "epsilon";
};

function RangeTransition(target, start, stop) {
	Transition.call(this, target);
	this.serializationType = Transition.RANGE;
    this.start = start;
    this.stop = stop;
    this.label = this.makeLabel();
    return this;
}

RangeTransition.prototype = Object.create(Transition.prototype);
RangeTransition.prototype.constructor = RangeTransition;

RangeTransition.prototype.makeLabel = function() {
    var s = new IntervalSet();
    s.addRange(this.start, this.stop);
    return s;
};

RangeTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= this.start && symbol <= this.stop;
};

RangeTransition.prototype.toString = function() {
	return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
};

function AbstractPredicateTransition(target) {
	Transition.call(this, target);
	return this;
}

AbstractPredicateTransition.prototype = Object.create(Transition.prototype);
AbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;

function PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PREDICATE;
    this.ruleIndex = ruleIndex;
    this.predIndex = predIndex;
    this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

PredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PredicateTransition.prototype.constructor = PredicateTransition;

PredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PredicateTransition.prototype.getPredicate = function() {
	return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

PredicateTransition.prototype.toString = function() {
	return "pred_" + this.ruleIndex + ":" + this.predIndex;
};

function ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {
	Transition.call(this, target);
    this.serializationType = Transition.ACTION;
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
    this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

ActionTransition.prototype = Object.create(Transition.prototype);
ActionTransition.prototype.constructor = ActionTransition;


ActionTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

ActionTransition.prototype.toString = function() {
	return "action_" + this.ruleIndex + ":" + this.actionIndex;
};


// A transition containing a set of values.
function SetTransition(target, set) {
	Transition.call(this, target);
	this.serializationType = Transition.SET;
    if (set !==undefined && set !==null) {
        this.label = set;
    } else {
        this.label = new IntervalSet();
        this.label.addOne(Token.INVALID_TYPE);
    }
    return this;
}

SetTransition.prototype = Object.create(Transition.prototype);
SetTransition.prototype.constructor = SetTransition;

SetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return this.label.contains(symbol);
};


SetTransition.prototype.toString = function() {
	return this.label.toString();
};

function NotSetTransition(target, set) {
	SetTransition.call(this, target, set);
	this.serializationType = Transition.NOT_SET;
	return this;
}

NotSetTransition.prototype = Object.create(SetTransition.prototype);
NotSetTransition.prototype.constructor = NotSetTransition;

NotSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
			!SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);
};

NotSetTransition.prototype.toString = function() {
	return '~' + SetTransition.prototype.toString.call(this);
};

function WildcardTransition(target) {
	Transition.call(this, target);
	this.serializationType = Transition.WILDCARD;
	return this;
}

WildcardTransition.prototype = Object.create(Transition.prototype);
WildcardTransition.prototype.constructor = WildcardTransition;


WildcardTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
};

WildcardTransition.prototype.toString = function() {
	return ".";
};

function PrecedencePredicateTransition(target, precedence) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PRECEDENCE;
    this.precedence = precedence;
    this.isEpsilon = true;
    return this;
}

PrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;

PrecedencePredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PrecedencePredicateTransition.prototype.getPredicate = function() {
	return new PrecedencePredicate(this.precedence);
};

PrecedencePredicateTransition.prototype.toString = function() {
	return this.precedence + " >= _p";
};

exports.Transition = Transition;
exports.AtomTransition = AtomTransition;
exports.SetTransition = SetTransition;
exports.NotSetTransition = NotSetTransition;
exports.RuleTransition = RuleTransition;
exports.ActionTransition = ActionTransition;
exports.EpsilonTransition = EpsilonTransition;
exports.RangeTransition = RangeTransition;
exports.WildcardTransition = WildcardTransition;
exports.PredicateTransition = PredicateTransition;
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
exports.AbstractPredicateTransition = AbstractPredicateTransition;

/***/ }),
/* 17 */,
/* 18 */,
/* 19 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//
// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
// info about the set, with support for combining similar configurations using a
// graph-structured stack.
///

var ATN = __webpack_require__(15).ATN;
var Utils = __webpack_require__(2);
var Hash = Utils.Hash;
var Set = Utils.Set;
var SemanticContext = __webpack_require__(23).SemanticContext;
var merge = __webpack_require__(13).merge;

function hashATNConfig(c) {
	return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	} else if ( a===null || b===null ) {
		return false;
	} else
       return a.equalsForConfigSet(b);
 }


function ATNConfigSet(fullCtx) {
	//
	// The reason that we need this is because we don't want the hash map to use
	// the standard hash code and equals. We need all configurations with the
	// same
	// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
	// doubles
	// the number of objects associated with ATNConfigs. The other solution is
	// to
	// use a hash table that lets us specify the equals/hashcode operation.
	// All configs but hashed by (s, i, _, pi) not including context. Wiped out
	// when we go readonly as this set becomes a DFA state.
	this.configLookup = new Set(hashATNConfig, equalATNConfigs);
	// Indicates that this configuration set is part of a full context
	// LL prediction. It will be used to determine how to merge $. With SLL
	// it's a wildcard whereas it is not for LL context merge.
	this.fullCtx = fullCtx === undefined ? true : fullCtx;
	// Indicates that the set of configurations is read-only. Do not
	// allow any code to manipulate the set; DFA states will point at
	// the sets and they must not change. This does not protect the other
	// fields; in particular, conflictingAlts is set after
	// we've made this readonly.
	this.readOnly = false;
	// Track the elements as they are added to the set; supports get(i)///
	this.configs = [];

	// TODO: these fields make me pretty uncomfortable but nice to pack up info
	// together, saves recomputation
	// TODO: can we track conflicts as they are added to save scanning configs
	// later?
	this.uniqueAlt = 0;
	this.conflictingAlts = null;

	// Used in parser and lexer. In lexer, it indicates we hit a pred
	// while computing a closure operation. Don't make a DFA state from this.
	this.hasSemanticContext = false;
	this.dipsIntoOuterContext = false;

	this.cachedHashCode = -1;

	return this;
}

// Adding a new config means merging contexts with existing configs for
// {@code (s, i, pi, _)}, where {@code s} is the
// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
// {@code pi} is the {@link ATNConfig//semanticContext}. We use
// {@code (s,i,pi)} as key.
//
// <p>This method updates {@link //dipsIntoOuterContext} and
// {@link //hasSemanticContext} when necessary.</p>
// /
ATNConfigSet.prototype.add = function(config, mergeCache) {
	if (mergeCache === undefined) {
		mergeCache = null;
	}
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (config.semanticContext !== SemanticContext.NONE) {
		this.hasSemanticContext = true;
	}
	if (config.reachesIntoOuterContext > 0) {
		this.dipsIntoOuterContext = true;
	}
	var existing = this.configLookup.add(config);
	if (existing === config) {
		this.cachedHashCode = -1;
		this.configs.push(config); // track order here
		return true;
	}
	// a previous (s,i,pi,_), merge with it and save result
	var rootIsWildcard = !this.fullCtx;
	var merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
	// no need to check for existing.context, config.context in cache
	// since only way to create new graphs is "call rule" and here. We
	// cache at both places.
	existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
	// make sure to preserve the precedence filter suppression during the merge
	if (config.precedenceFilterSuppressed) {
		existing.precedenceFilterSuppressed = true;
	}
	existing.context = merged; // replace context; no need to alt mapping
	return true;
};

ATNConfigSet.prototype.getStates = function() {
	var states = new Set();
	for (var i = 0; i < this.configs.length; i++) {
		states.add(this.configs[i].state);
	}
	return states;
};

ATNConfigSet.prototype.getPredicates = function() {
	var preds = [];
	for (var i = 0; i < this.configs.length; i++) {
		var c = this.configs[i].semanticContext;
		if (c !== SemanticContext.NONE) {
			preds.push(c.semanticContext);
		}
	}
	return preds;
};

Object.defineProperty(ATNConfigSet.prototype, "items", {
	get : function() {
		return this.configs;
	}
});

ATNConfigSet.prototype.optimizeConfigs = function(interpreter) {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (this.configLookup.length === 0) {
		return;
	}
	for (var i = 0; i < this.configs.length; i++) {
		var config = this.configs[i];
		config.context = interpreter.getCachedContext(config.context);
	}
};

ATNConfigSet.prototype.addAll = function(coll) {
	for (var i = 0; i < coll.length; i++) {
		this.add(coll[i]);
	}
	return false;
};

ATNConfigSet.prototype.equals = function(other) {
	return this === other ||
		(other instanceof ATNConfigSet &&
		Utils.equalArrays(this.configs, other.configs) &&
		this.fullCtx === other.fullCtx &&
		this.uniqueAlt === other.uniqueAlt &&
		this.conflictingAlts === other.conflictingAlts &&
		this.hasSemanticContext === other.hasSemanticContext &&
		this.dipsIntoOuterContext === other.dipsIntoOuterContext);
};

ATNConfigSet.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfigSet.prototype.updateHashCode = function(hash) {
	if (this.readOnly) {
		if (this.cachedHashCode === -1) {
            var hash = new Hash();
            hash.update(this.configs);
			this.cachedHashCode = hash.finish();
		}
        hash.update(this.cachedHashCode);
	} else {
        hash.update(this.configs);
	}
};


Object.defineProperty(ATNConfigSet.prototype, "length", {
	get : function() {
		return this.configs.length;
	}
});

ATNConfigSet.prototype.isEmpty = function() {
	return this.configs.length === 0;
};

ATNConfigSet.prototype.contains = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.contains(item);
};

ATNConfigSet.prototype.containsFast = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.containsFast(item);
};

ATNConfigSet.prototype.clear = function() {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	this.configs = [];
	this.cachedHashCode = -1;
	this.configLookup = new Set();
};

ATNConfigSet.prototype.setReadonly = function(readOnly) {
	this.readOnly = readOnly;
	if (readOnly) {
		this.configLookup = null; // can't mod, no need for lookup cache
	}
};

ATNConfigSet.prototype.toString = function() {
	return Utils.arrayToString(this.configs) +
		(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
		(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
		(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
		(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
};

function OrderedATNConfigSet() {
	ATNConfigSet.call(this);
	this.configLookup = new Set();
	return this;
}

OrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);
OrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;

exports.ATNConfigSet = ATNConfigSet;
exports.OrderedATNConfigSet = OrderedATNConfigSet;


/***/ }),
/* 21 */,
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
exports.unitIndent = "  ";
function generateCommentBlock(comments, placement, comment, indent) {
    if (!comments)
        return "";
    var placed = comments.filter(function (c) { return c.placement == placement; });
    var lines = placed.map(function (c) { return indent + "# " + c.text; });
    var block = lines.join("\n");
    return block;
}
exports.generateCommentBlock = generateCommentBlock;
function codeBlockToCode(codeBlock, indent, markRVisParameters) {
    if (objectmodel_1.isStatement(codeBlock))
        return statementToCode(codeBlock, indent, markRVisParameters);
    if (objectmodel_1.isIfSection(codeBlock))
        return ifSectionToCode(codeBlock, indent, markRVisParameters);
    if (objectmodel_1.isProceduralSection(codeBlock))
        return proceduralSectionToCode(codeBlock, indent, markRVisParameters);
    if (objectmodel_1.isTableStatement(codeBlock))
        return statementToCode(codeBlock, indent, false);
    if (objectmodel_1.isArrayStatement(codeBlock))
        return statementToCode(codeBlock, indent, false);
    if (objectmodel_1.isDoContinueSection(codeBlock))
        return doContinueSectionToCode(codeBlock, indent, markRVisParameters);
    throw new Error("codeBlockToCode -- unsupported: " + typeof codeBlock);
}
exports.codeBlockToCode = codeBlockToCode;
function doContinueSectionToCode(doContinueSection, indent, markRVisParameters) {
    var lines = [];
    var index = doContinueSection.index.toCode("R", 0);
    var line = indent +
        index + "__seq <- seq.int(" +
        doContinueSection.initial.toCode("R", 0) + ", " +
        doContinueSection.terminal.toCode("R", 0) + ", " +
        doContinueSection.increment.toCode("R", 0) + ")";
    lines.push(line);
    lines.push("");
    line = indent + "for(" + index + " in " + index + "__seq) {";
    lines.push(line);
    doContinueSection.codeBlocks.forEach(function (cb) { return lines.push.apply(lines, codeBlockToCode(cb, indent + exports.unitIndent, markRVisParameters)); });
    line = indent + "}";
    lines.push(line);
    return lines;
}
function proceduralSectionToCode(proceduralSection, indent, markRVisParameters) {
    var lines = [];
    var preSectionComments = proceduralSection.comments.filter(function (c) { return c.placement == enum_1.CommentPlacement.PreSection; });
    preSectionComments.forEach(function (c) { return lines.push(indent + "# " + c.text); });
    proceduralSection.codeBlocks.forEach(function (cb) { return lines.push.apply(lines, codeBlockToCode(cb, indent, markRVisParameters)); });
    return lines;
}
function ifSectionToCode(ifSection, indent, markRVisParameters) {
    var lines = [];
    var preSectionComments = ifSection.comments.filter(function (c) { return c.placement == enum_1.CommentPlacement.PreSection; });
    preSectionComments.forEach(function (c) { return lines.push(indent + "# " + c.text); });
    for (var i = 0; i < ifSection.conditionalSections.length; ++i) {
        var conditionalSection = ifSection.conditionalSections[i];
        var line = i > 0 ? lines.pop() + " else " : indent;
        if (!!conditionalSection.condition)
            line = line + "if (" + conditionalSection.condition.toCode("R", 0) + ") ";
        line = line + "{";
        lines.push(line);
        conditionalSection.codeBlocks.forEach(function (cb) { return lines.push.apply(lines, codeBlockToCode(cb, indent + exports.unitIndent, markRVisParameters)); });
        lines.push(indent + "}");
    }
    return lines;
}
function statementToCode(statement, indent, markRVisParameters) {
    var lines = [];
    var contentComments = statement.getContentComments();
    contentComments.forEach(function (c) { return lines.push(indent + "# " + c.text); });
    var lineComments = statement.getLineComments();
    var lineComment = 0 < lineComments.length ? lineComments[0].text : null;
    var endLineComments = statement.getEndLineComments();
    var endLineComment = 0 < endLineComments.length ? endLineComments[0].text : "";
    var rvisParamMarker = markRVisParameters ? "@p" : "";
    if (0 < endLineComment.length) {
        endLineComment = "#" + rvisParamMarker + " " + endLineComment;
        rvisParamMarker = "";
    }
    if (null != lineComment) {
        lineComment = indent + "#" + rvisParamMarker + " " + lineComment;
        if (0 < lines.length)
            lines.push("");
        lines.push(lineComment);
        rvisParamMarker = "";
    }
    if (0 < rvisParamMarker.length) {
        endLineComment = "#" + "@p";
        rvisParamMarker = "";
    }
    var code = indent + statement.toCode("R") + " " + endLineComment;
    lines.push(code);
    return lines;
}


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A tree structure used to record the semantic context in which
//  an ATN configuration is valid.  It's either a single predicate,
//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
//
//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
//  {@link SemanticContext} within the scope of this outer class.</p>
//

var Set = __webpack_require__(2).Set;
var Hash = __webpack_require__(2).Hash;

function SemanticContext() {
	return this;
}

SemanticContext.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};

// For context independent predicates, we evaluate them without a local
// context (i.e., null context). That way, we can evaluate them without
// having to create proper rule-specific context during prediction (as
// opposed to the parser, which creates them naturally). In a practical
// sense, this avoids a cast exception from RuleContext to myruleContext.
//
// <p>For context dependent predicates, we must pass in a local context so that
// references such as $arg evaluate properly as _localctx.arg. We only
// capture context dependent predicates in the context in which we begin
// prediction, so we passed in the outer context here in case of context
// dependent predicate evaluation.</p>
//
SemanticContext.prototype.evaluate = function(parser, outerContext) {
};

//
// Evaluate the precedence predicates for the context and reduce the result.
//
// @param parser The parser instance.
// @param outerContext The current parser context object.
// @return The simplified semantic context after precedence predicates are
// evaluated, which will be one of the following values.
// <ul>
// <li>{@link //NONE}: if the predicate simplifies to {@code true} after
// precedence predicates are evaluated.</li>
// <li>{@code null}: if the predicate simplifies to {@code false} after
// precedence predicates are evaluated.</li>
// <li>{@code this}: if the semantic context is not changed as a result of
// precedence predicate evaluation.</li>
// <li>A non-{@code null} {@link SemanticContext}: the new simplified
// semantic context after precedence predicates are evaluated.</li>
// </ul>
//
SemanticContext.prototype.evalPrecedence = function(parser, outerContext) {
	return this;
};

SemanticContext.andContext = function(a, b) {
	if (a === null || a === SemanticContext.NONE) {
		return b;
	}
	if (b === null || b === SemanticContext.NONE) {
		return a;
	}
	var result = new AND(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

SemanticContext.orContext = function(a, b) {
	if (a === null) {
		return b;
	}
	if (b === null) {
		return a;
	}
	if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
		return SemanticContext.NONE;
	}
	var result = new OR(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

function Predicate(ruleIndex, predIndex, isCtxDependent) {
	SemanticContext.call(this);
	this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
	this.predIndex = predIndex === undefined ? -1 : predIndex;
	this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	return this;
}

Predicate.prototype = Object.create(SemanticContext.prototype);
Predicate.prototype.constructor = Predicate;

//The default {@link SemanticContext}, which is semantically equivalent to
//a predicate of the form {@code {true}?}.
//
SemanticContext.NONE = new Predicate();


Predicate.prototype.evaluate = function(parser, outerContext) {
	var localctx = this.isCtxDependent ? outerContext : null;
	return parser.sempred(localctx, this.ruleIndex, this.predIndex);
};

Predicate.prototype.updateHashCode = function(hash) {
	hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

Predicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof Predicate)) {
		return false;
	} else {
		return this.ruleIndex === other.ruleIndex &&
				this.predIndex === other.predIndex &&
				this.isCtxDependent === other.isCtxDependent;
	}
};

Predicate.prototype.toString = function() {
	return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
};

function PrecedencePredicate(precedence) {
	SemanticContext.call(this);
	this.precedence = precedence === undefined ? 0 : precedence;
}

PrecedencePredicate.prototype = Object.create(SemanticContext.prototype);
PrecedencePredicate.prototype.constructor = PrecedencePredicate;

PrecedencePredicate.prototype.evaluate = function(parser, outerContext) {
	return parser.precpred(outerContext, this.precedence);
};

PrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) {
	if (parser.precpred(outerContext, this.precedence)) {
		return SemanticContext.NONE;
	} else {
		return null;
	}
};

PrecedencePredicate.prototype.compareTo = function(other) {
	return this.precedence - other.precedence;
};

PrecedencePredicate.prototype.updateHashCode = function(hash) {
    hash.update(31);
};

PrecedencePredicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof PrecedencePredicate)) {
		return false;
	} else {
		return this.precedence === other.precedence;
	}
};

PrecedencePredicate.prototype.toString = function() {
	return "{"+this.precedence+">=prec}?";
};



PrecedencePredicate.filterPrecedencePredicates = function(set) {
	var result = [];
	set.values().map( function(context) {
		if (context instanceof PrecedencePredicate) {
			result.push(context);
		}
	});
	return result;
};


// A semantic context which is true whenever none of the contained contexts
// is false.
//
function AND(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof AND) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof AND) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}
	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the lowest precedence
		var reduced = null;
		precedencePredicates.map( function(p) {
			if(reduced===null || p.precedence<reduced.precedence) {
				reduced = p;
			}
		});
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

AND.prototype = Object.create(SemanticContext.prototype);
AND.prototype.constructor = AND;

AND.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof AND)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

AND.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "AND");
};
//
// {@inheritDoc}
//
// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
AND.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (!this.opnds[i].evaluate(parser, outerContext)) {
			return false;
		}
	}
	return true;
};

AND.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === null) {
			// The AND context is false if any element is false
			return null;
		} else if (evaluated !== SemanticContext.NONE) {
			// Reduce the result by skipping true elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were true, so the AND context is true
		return SemanticContext.NONE;
	}
	var result = null;
	operands.map(function(o) {
		result = result === null ? o : SemanticContext.andContext(result, o);
	});
	return result;
};

AND.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "&& " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

//
// A semantic context which is true whenever at least one of the contained
// contexts is true.
//
function OR(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof OR) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof OR) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}

	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the highest precedence
		var s = precedencePredicates.sort(function(a, b) {
			return a.compareTo(b);
		});
		var reduced = s[s.length-1];
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

OR.prototype = Object.create(SemanticContext.prototype);
OR.prototype.constructor = OR;

OR.prototype.constructor = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof OR)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

OR.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "OR");
};

// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
OR.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (this.opnds[i].evaluate(parser, outerContext)) {
			return true;
		}
	}
	return false;
};

OR.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === SemanticContext.NONE) {
			// The OR context is true if any element is true
			return SemanticContext.NONE;
		} else if (evaluated !== null) {
			// Reduce the result by skipping false elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were false, so the OR context is false
		return null;
	}
	var result = null;
	operands.map(function(o) {
		return result === null ? o : SemanticContext.orContext(result, o);
	});
	return result;
};

OR.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "|| " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

exports.SemanticContext = SemanticContext;
exports.PrecedencePredicate = PrecedencePredicate;
exports.Predicate = Predicate;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var ATNConfigSet = __webpack_require__(20).ATNConfigSet;
var Utils = __webpack_require__(2);
var Hash = Utils.Hash;
var Set = Utils.Set;

// Map a predicate to a predicted alternative.///

function PredPrediction(pred, alt) {
	this.alt = alt;
	this.pred = pred;
	return this;
}

PredPrediction.prototype.toString = function() {
	return "(" + this.pred + ", " + this.alt + ")";
};

// A DFA state represents a set of possible ATN configurations.
// As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
// to keep track of all possible states the ATN can be in after
// reading each input symbol. That is to say, after reading
// input a1a2..an, the DFA is in a state that represents the
// subset T of the states of the ATN that are reachable from the
// ATN's start state along some path labeled a1a2..an."
// In conventional NFA&rarr;DFA conversion, therefore, the subset T
// would be a bitset representing the set of states the
// ATN could be in. We need to track the alt predicted by each
// state as well, however. More importantly, we need to maintain
// a stack of states, tracking the closure operations as they
// jump from rule to rule, emulating rule invocations (method calls).
// I have to add a stack to simulate the proper lookahead sequences for
// the underlying LL grammar from which the ATN was derived.
//
// <p>I use a set of ATNConfig objects not simple states. An ATNConfig
// is both a state (ala normal conversion) and a RuleContext describing
// the chain of rules (if any) followed to arrive at that state.</p>
//
// <p>A DFA state may have multiple references to a particular state,
// but with different ATN contexts (with same or different alts)
// meaning that state was reached via a different set of rule invocations.</p>
// /

function DFAState(stateNumber, configs) {
	if (stateNumber === null) {
		stateNumber = -1;
	}
	if (configs === null) {
		configs = new ATNConfigSet();
	}
	this.stateNumber = stateNumber;
	this.configs = configs;
	// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
	// {@link Token//EOF} maps to {@code edges[0]}.
	this.edges = null;
	this.isAcceptState = false;
	// if accept state, what ttype do we match or alt do we predict?
	// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link
	// //predicates}{@code !=null} or
	// {@link //requiresFullContext}.
	this.prediction = 0;
	this.lexerActionExecutor = null;
	// Indicates that this state was created during SLL prediction that
	// discovered a conflict between the configurations in the state. Future
	// {@link ParserATNSimulator//execATN} invocations immediately jumped doing
	// full context prediction if this field is true.
	this.requiresFullContext = false;
	// During SLL parsing, this is a list of predicates associated with the
	// ATN configurations of the DFA state. When we have predicates,
	// {@link //requiresFullContext} is {@code false} since full context
	// prediction evaluates predicates
	// on-the-fly. If this is not null, then {@link //prediction} is
	// {@link ATN//INVALID_ALT_NUMBER}.
	//
	// <p>We only use these for non-{@link //requiresFullContext} but
	// conflicting states. That
	// means we know from the context (it's $ or we don't dip into outer
	// context) that it's an ambiguity not a conflict.</p>
	//
	// <p>This list is computed by {@link
	// ParserATNSimulator//predicateDFAState}.</p>
	this.predicates = null;
	return this;
}

// Get the set of all alts mentioned by all ATN configurations in this
// DFA state.
DFAState.prototype.getAltSet = function() {
	var alts = new Set();
	if (this.configs !== null) {
		for (var i = 0; i < this.configs.length; i++) {
			var c = this.configs[i];
			alts.add(c.alt);
		}
	}
	if (alts.length === 0) {
		return null;
	} else {
		return alts;
	}
};

// Two {@link DFAState} instances are equal if their ATN configuration sets
// are the same. This method is used to see if a state already exists.
//
// <p>Because the number of alternatives and number of ATN configurations are
// finite, there is a finite number of DFA states that can be processed.
// This is necessary to show that the algorithm terminates.</p>
//
// <p>Cannot test the DFA state numbers here because in
// {@link ParserATNSimulator//addDFAState} we need to know if any other state
// exists that has this exact set of ATN configurations. The
// {@link //stateNumber} is irrelevant.</p>
DFAState.prototype.equals = function(other) {
	// compare set of ATN configurations in this set with other
	return this === other ||
			(other instanceof DFAState &&
				this.configs.equals(other.configs));
};

DFAState.prototype.toString = function() {
	var s = "" + this.stateNumber + ":" + this.configs;
	if(this.isAcceptState) {
        s = s + "=>";
        if (this.predicates !== null)
            s = s + this.predicates;
        else
            s = s + this.prediction;
    }
	return s;
};

DFAState.prototype.hashCode = function() {
	var hash = new Hash();
	hash.update(this.configs);
	if(this.isAcceptState) {
        if (this.predicates !== null)
            hash.update(this.predicates);
        else
            hash.update(this.prediction);
    }
    return hash.finish();
};

exports.DFAState = DFAState;
exports.PredPrediction = PredPrediction;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
exports.atn = __webpack_require__(162);
exports.dfa = __webpack_require__(164);
exports.tree = __webpack_require__(167);
exports.error = __webpack_require__(166);
exports.Token = __webpack_require__(4).Token;
exports.CommonToken = __webpack_require__(4).CommonToken;
exports.InputStream = __webpack_require__(76).InputStream;
exports.FileStream = __webpack_require__(155).FileStream;
exports.CommonTokenStream = __webpack_require__(154).CommonTokenStream;
exports.Lexer = __webpack_require__(32).Lexer;
exports.Parser = __webpack_require__(157).Parser;
var pc = __webpack_require__(13);
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = __webpack_require__(44).ParserRuleContext;
exports.Interval = __webpack_require__(7).Interval;
exports.Utils = __webpack_require__(2);


/***/ }),
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var expressionbase_1 = __webpack_require__(5);
var IdExpression = (function (_super) {
    __extends(IdExpression, _super);
    function IdExpression(id) {
        var _this = _super.call(this) || this;
        _this._id = id;
        return _this;
    }
    IdExpression.prototype.toCode = function (lang, prec) {
        return this._id;
    };
    Object.defineProperty(IdExpression.prototype, "symbols", {
        get: function () {
            return [this];
        },
        enumerable: true,
        configurable: true
    });
    IdExpression.prototype.applyAcslTypes = function (typeDictionary) {
    };
    IdExpression.prototype.reviseId = function (definition) {
        if (definition.toLowerCase() == this._id.toLowerCase() && definition != this._id) {
            var original = this._id;
            this._id = definition;
            return original;
        }
        return null;
    };
    IdExpression.prototype.clone = function () {
        var expression = new IdExpression(this._id);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return IdExpression;
}(expressionbase_1.ExpressionBase));
exports.default = IdExpression;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A lexer is recognizer that draws input symbols from a character stream.
//  lexer grammars result in a subclass of this object. A Lexer object
//  uses simplified match() and error recovery mechanisms in the interest of speed.

var Token = __webpack_require__(4).Token;
var Recognizer = __webpack_require__(77).Recognizer;
var CommonTokenFactory = __webpack_require__(153).CommonTokenFactory;
var RecognitionException  = __webpack_require__(11).RecognitionException;
var LexerNoViableAltException = __webpack_require__(11).LexerNoViableAltException;

function TokenSource() {
	return this;
}

function Lexer(input) {
	Recognizer.call(this);
	this._input = input;
	this._factory = CommonTokenFactory.DEFAULT;
	this._tokenFactorySourcePair = [ this, input ];

	this._interp = null; // child classes must populate this

	// The goal of all lexer rules/methods is to create a token object.
	// this is an instance variable as multiple rules may collaborate to
	// create a single token. nextToken will return this object after
	// matching lexer rule(s). If you subclass to allow multiple token
	// emissions, then set this to the last token to be matched or
	// something nonnull so that the auto token emit mechanism will not
	// emit another token.
	this._token = null;

	// What character index in the stream did the current token start at?
	// Needed, for example, to get the text for current token. Set at
	// the start of nextToken.
	this._tokenStartCharIndex = -1;

	// The line on which the first character of the token resides///
	this._tokenStartLine = -1;

	// The character position of first character within the line///
	this._tokenStartColumn = -1;

	// Once we see EOF on char stream, next token will be EOF.
	// If you have DONE : EOF ; then you see DONE EOF.
	this._hitEOF = false;

	// The channel number for the current token///
	this._channel = Token.DEFAULT_CHANNEL;

	// The token type for the current token///
	this._type = Token.INVALID_TYPE;

	this._modeStack = [];
	this._mode = Lexer.DEFAULT_MODE;

	// You can set the text for the current token to override what is in
	// the input char buffer. Use setText() or can set this instance var.
	// /
	this._text = null;

	return this;
}

Lexer.prototype = Object.create(Recognizer.prototype);
Lexer.prototype.constructor = Lexer;

Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = '\u0000';
Lexer.MAX_CHAR_VALUE = '\uFFFE';

Lexer.prototype.reset = function() {
	// wack Lexer state variables
	if (this._input !== null) {
		this._input.seek(0); // rewind the input
	}
	this._token = null;
	this._type = Token.INVALID_TYPE;
	this._channel = Token.DEFAULT_CHANNEL;
	this._tokenStartCharIndex = -1;
	this._tokenStartColumn = -1;
	this._tokenStartLine = -1;
	this._text = null;

	this._hitEOF = false;
	this._mode = Lexer.DEFAULT_MODE;
	this._modeStack = [];

	this._interp.reset();
};

// Return a token from this source; i.e., match a token on the char stream.
Lexer.prototype.nextToken = function() {
	if (this._input === null) {
		throw "nextToken requires a non-null input stream.";
	}

	// Mark start location in char stream so unbuffered streams are
	// guaranteed at least have text of current token
	var tokenStartMarker = this._input.mark();
	try {
		while (true) {
			if (this._hitEOF) {
				this.emitEOF();
				return this._token;
			}
			this._token = null;
			this._channel = Token.DEFAULT_CHANNEL;
			this._tokenStartCharIndex = this._input.index;
			this._tokenStartColumn = this._interp.column;
			this._tokenStartLine = this._interp.line;
			this._text = null;
			var continueOuter = false;
			while (true) {
				this._type = Token.INVALID_TYPE;
				var ttype = Lexer.SKIP;
				try {
					ttype = this._interp.match(this._input, this._mode);
				} catch (e) {
				    if(e instanceof RecognitionException) {
                        this.notifyListeners(e); // report error
                        this.recover(e);
                    } else {
                        console.log(e.stack);
                        throw e;
                    }
				}
				if (this._input.LA(1) === Token.EOF) {
					this._hitEOF = true;
				}
				if (this._type === Token.INVALID_TYPE) {
					this._type = ttype;
				}
				if (this._type === Lexer.SKIP) {
					continueOuter = true;
					break;
				}
				if (this._type !== Lexer.MORE) {
					break;
				}
			}
			if (continueOuter) {
				continue;
			}
			if (this._token === null) {
				this.emit();
			}
			return this._token;
		}
	} finally {
		// make sure we release marker after match or
		// unbuffered char stream will keep buffering
		this._input.release(tokenStartMarker);
	}
};

// Instruct the lexer to skip creating a token for current lexer rule
// and look for another token. nextToken() knows to keep looking when
// a lexer rule finishes with token set to SKIP_TOKEN. Recall that
// if token==null at end of any token rule, it creates one for you
// and emits it.
// /
Lexer.prototype.skip = function() {
	this._type = Lexer.SKIP;
};

Lexer.prototype.more = function() {
	this._type = Lexer.MORE;
};

Lexer.prototype.mode = function(m) {
	this._mode = m;
};

Lexer.prototype.pushMode = function(m) {
	if (this._interp.debug) {
		console.log("pushMode " + m);
	}
	this._modeStack.push(this._mode);
	this.mode(m);
};

Lexer.prototype.popMode = function() {
	if (this._modeStack.length === 0) {
		throw "Empty Stack";
	}
	if (this._interp.debug) {
		console.log("popMode back to " + this._modeStack.slice(0, -1));
	}
	this.mode(this._modeStack.pop());
	return this._mode;
};

// Set the char stream and reset the lexer
Object.defineProperty(Lexer.prototype, "inputStream", {
	get : function() {
		return this._input;
	},
	set : function(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}
});

Object.defineProperty(Lexer.prototype, "sourceName", {
	get : function sourceName() {
		return this._input.sourceName;
	}
});

// By default does not support multiple emits per nextToken invocation
// for efficiency reasons. Subclass and override this method, nextToken,
// and getToken (to push tokens into a list and pull from that list
// rather than a single variable as this implementation does).
// /
Lexer.prototype.emitToken = function(token) {
	this._token = token;
};

// The standard method called to automatically emit a token at the
// outermost lexical rule. The token object should point into the
// char buffer start..stop. If there is a text override in 'text',
// use that to set the token's text. Override this method to emit
// custom Token objects or provide a new factory.
// /
Lexer.prototype.emit = function() {
	var t = this._factory.create(this._tokenFactorySourcePair, this._type,
			this._text, this._channel, this._tokenStartCharIndex, this
					.getCharIndex() - 1, this._tokenStartLine,
			this._tokenStartColumn);
	this.emitToken(t);
	return t;
};

Lexer.prototype.emitEOF = function() {
	var cpos = this.column;
	var lpos = this.line;
	var eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
			null, Token.DEFAULT_CHANNEL, this._input.index,
			this._input.index - 1, lpos, cpos);
	this.emitToken(eof);
	return eof;
};

Object.defineProperty(Lexer.prototype, "type", {
	get : function() {
		return this.type;
	},
	set : function(type) {
		this._type = type;
	}
});

Object.defineProperty(Lexer.prototype, "line", {
	get : function() {
		return this._interp.line;
	},
	set : function(line) {
		this._interp.line = line;
	}
});

Object.defineProperty(Lexer.prototype, "column", {
	get : function() {
		return this._interp.column;
	},
	set : function(column) {
		this._interp.column = column;
	}
});


// What is the index of the current character of lookahead?///
Lexer.prototype.getCharIndex = function() {
	return this._input.index;
};

// Return the text matched so far for the current token or any text override.
//Set the complete text of this token; it wipes any previous changes to the text.
Object.defineProperty(Lexer.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	},
	set : function(text) {
		this._text = text;
	}
});
// Return a list of all Token objects in input char stream.
// Forces load of all tokens. Does not include EOF token.
// /
Lexer.prototype.getAllTokens = function() {
	var tokens = [];
	var t = this.nextToken();
	while (t.type !== Token.EOF) {
		tokens.push(t);
		t = this.nextToken();
	}
	return tokens;
};

Lexer.prototype.notifyListeners = function(e) {
	var start = this._tokenStartCharIndex;
	var stop = this._input.index;
	var text = this._input.getText(start, stop);
	var msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, null, this._tokenStartLine,
			this._tokenStartColumn, msg, e);
};

Lexer.prototype.getErrorDisplay = function(s) {
	var d = [];
	for (var i = 0; i < s.length; i++) {
		d.push(s[i]);
	}
	return d.join('');
};

Lexer.prototype.getErrorDisplayForChar = function(c) {
	if (c.charCodeAt(0) === Token.EOF) {
		return "<EOF>";
	} else if (c === '\n') {
		return "\\n";
	} else if (c === '\t') {
		return "\\t";
	} else if (c === '\r') {
		return "\\r";
	} else {
		return c;
	}
};

Lexer.prototype.getCharErrorDisplay = function(c) {
	return "'" + this.getErrorDisplayForChar(c) + "'";
};

// Lexers can normally match any char in it's vocabulary after matching
// a token, so do the easy thing and just kill a character and hope
// it all works out. You can instead use the rule invocation stack
// to do sophisticated error recovery if you are in a fragment rule.
// /
Lexer.prototype.recover = function(re) {
	if (this._input.LA(1) !== Token.EOF) {
		if (re instanceof LexerNoViableAltException) {
			// skip a char and try again
			this._interp.consume(this._input);
		} else {
			// TODO: Do we lose character or line position information?
			this._input.consume();
		}
	}
};

exports.Lexer = Lexer;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//  A rule context is a record of a single rule invocation. It knows
//  which context invoked it, if any. If there is no parent context, then
//  naturally the invoking state is not valid.  The parent link
//  provides a chain upwards from the current rule invocation to the root
//  of the invocation tree, forming a stack. We actually carry no
//  information about the rule associated with this context (except
//  when parsing). We keep only the state number of the invoking state from
//  the ATN submachine that invoked this. Contrast this with the s
//  pointer inside ParserRuleContext that tracks the current state
//  being "executed" for the current rule.
//
//  The parent contexts are useful for computing lookahead sets and
//  getting error information.
//
//  These objects are used during parsing and prediction.
//  For the special case of parsers, we use the subclass
//  ParserRuleContext.
//
//  @see ParserRuleContext
///

var RuleNode = __webpack_require__(12).RuleNode;
var INVALID_INTERVAL = __webpack_require__(12).INVALID_INTERVAL;
var INVALID_ALT_NUMBER = __webpack_require__(15).INVALID_ALT_NUMBER;

function RuleContext(parent, invokingState) {
	RuleNode.call(this);
	// What context invoked this rule?
	this.parentCtx = parent || null;
	// What state invoked the rule associated with this context?
	// The "return address" is the followState of invokingState
	// If parent is null, this should be -1.
	this.invokingState = invokingState || -1;
	return this;
}

RuleContext.prototype = Object.create(RuleNode.prototype);
RuleContext.prototype.constructor = RuleContext;

RuleContext.prototype.depth = function() {
	var n = 0;
	var p = this;
	while (p !== null) {
		p = p.parentCtx;
		n += 1;
	}
	return n;
};

// A context is empty if there is no invoking state; meaning nobody call
// current context.
RuleContext.prototype.isEmpty = function() {
	return this.invokingState === -1;
};

// satisfy the ParseTree / SyntaxTree interface

RuleContext.prototype.getSourceInterval = function() {
	return INVALID_INTERVAL;
};

RuleContext.prototype.getRuleContext = function() {
	return this;
};

RuleContext.prototype.getPayload = function() {
	return this;
};

// Return the combined text of all child nodes. This method only considers
// tokens which have been added to the parse tree.
// <p>
// Since tokens on hidden channels (e.g. whitespace or comments) are not
// added to the parse trees, they will not appear in the output of this
// method.
// /
RuleContext.prototype.getText = function() {
	if (this.getChildCount() === 0) {
		return "";
	} else {
		return this.children.map(function(child) {
			return child.getText();
		}).join("");
	}
};

// For rule associated with this parse tree internal node, return
// the outer alternative number used to match the input. Default
// implementation does not compute nor store this alt num. Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
// to set it.
RuleContext.prototype.getAltNumber = function() { return INVALID_ALT_NUMBER; }

// Set the outer alternative number for this context node. Default
// implementation does nothing to avoid backing field overhead for
// trees that don't need it.  Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
RuleContext.prototype.setAltNumber = function(altNumber) { }

RuleContext.prototype.getChild = function(i) {
	return null;
};

RuleContext.prototype.getChildCount = function() {
	return 0;
};

RuleContext.prototype.accept = function(visitor) {
	return visitor.visitChildren(this);
};

//need to manage circular dependencies, so export now
exports.RuleContext = RuleContext;
var Trees = __webpack_require__(84).Trees;


// Print out a whole tree, not just a node, in LISP format
// (root child1 .. childN). Print just a node if this is a leaf.
//

RuleContext.prototype.toStringTree = function(ruleNames, recog) {
	return Trees.toStringTree(this, ruleNames, recog);
};

RuleContext.prototype.toString = function(ruleNames, stop) {
	ruleNames = ruleNames || null;
	stop = stop || null;
	var p = this;
	var s = "[";
	while (p !== null && p !== stop) {
		if (ruleNames === null) {
			if (!p.isEmpty()) {
				s += p.invokingState;
			}
		} else {
			var ri = p.ruleIndex;
			var ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
					: "" + ri;
			s += ruleName;
		}
		if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
			s += " ";
		}
		p = p.parentCtx;
	}
	s += "]";
	return s;
};



/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A tuple: (ATN state, predicted alt, syntactic, semantic context).
//  The syntactic context is a graph-structured stack node whose
//  path(s) to the root is the rule invocation(s)
//  chain used to arrive at the state.  The semantic context is
//  the tree of semantic predicates encountered before reaching
//  an ATN state.
///

var DecisionState = __webpack_require__(10).DecisionState;
var SemanticContext = __webpack_require__(23).SemanticContext;
var Hash = __webpack_require__(2).Hash;


function checkParams(params, isCfg) {
	if(params===null) {
		var result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		var props = {};
		props.state = params.state || null;
		props.alt = (params.alt === undefined) ? null : params.alt;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

function ATNConfig(params, config) {
	this.checkContext(params, config);
	params = checkParams(params);
	config = checkParams(config, true);
    // The ATN state associated with this configuration///
    this.state = params.state!==null ? params.state : config.state;
    // What alt (or lexer rule) is predicted by this configuration///
    this.alt = params.alt!==null ? params.alt : config.alt;
    // The stack of invoking states leading to the rule/states associated
    //  with this config.  We track only those contexts pushed during
    //  execution of the ATN simulator.
    this.context = params.context!==null ? params.context : config.context;
    this.semanticContext = params.semanticContext!==null ? params.semanticContext :
        (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
    // We cannot execute predicates dependent upon local context unless
    // we know for sure we are in the correct context. Because there is
    // no way to do this efficiently, we simply cannot evaluate
    // dependent predicates unless we are in the rule that initially
    // invokes the ATN simulator.
    //
    // closure() tracks the depth of how far we dip into the
    // outer context: depth &gt; 0.  Note that it may not be totally
    // accurate depth since I don't ever decrement. TODO: make it a boolean then
    this.reachesIntoOuterContext = config.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    return this;
}

ATNConfig.prototype.checkContext = function(params, config) {
	if((params.context===null || params.context===undefined) &&
			(config===null || config.context===null || config.context===undefined)) {
		this.context = null;
	}
};


ATNConfig.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
};

// An ATN configuration is equal to another if both have
//  the same state, they predict the same alternative, and
//  syntactic/semantic contexts are the same.

ATNConfig.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            (this.context===null ? other.context===null : this.context.equals(other.context)) &&
            this.semanticContext.equals(other.semanticContext) &&
            this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
    }
};


ATNConfig.prototype.hashCodeForConfigSet = function() {
    var hash = new Hash();
    hash.update(this.state.stateNumber, this.alt, this.semanticContext);
    return hash.finish();
};


ATNConfig.prototype.equalsForConfigSet = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            this.semanticContext.equals(other.semanticContext);
    }
};


ATNConfig.prototype.toString = function() {
    return "(" + this.state + "," + this.alt +
        (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
        (this.semanticContext !== SemanticContext.NONE ?
                ("," + this.semanticContext.toString())
                : "") +
        (this.reachesIntoOuterContext>0 ?
                (",up=" + this.reachesIntoOuterContext)
                : "") + ")";
};


function LexerATNConfig(params, config) {
	ATNConfig.call(this, params, config);

    // This is the backing field for {@link //getLexerActionExecutor}.
	var lexerActionExecutor = params.lexerActionExecutor || null;
    this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
    this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
    return this;
}

LexerATNConfig.prototype = Object.create(ATNConfig.prototype);
LexerATNConfig.prototype.constructor = LexerATNConfig;

LexerATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
};

LexerATNConfig.prototype.equals = function(other) {
    return this === other ||
            (other instanceof LexerATNConfig &&
            this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&
            (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&
            ATNConfig.prototype.equals.call(this, other));
};

LexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;

LexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;


LexerATNConfig.prototype.checkNonGreedyDecision = function(source, target) {
    return source.passedThroughNonGreedyDecision ||
        (target instanceof DecisionState) && target.nonGreedy;
};

exports.ATNConfig = ATNConfig;
exports.LexerATNConfig = LexerATNConfig;

/***/ }),
/* 35 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// A DFA walker that knows how to dump them to serialized strings.#/


function DFASerializer(dfa, literalNames, symbolicNames) {
	this.dfa = dfa;
	this.literalNames = literalNames || [];
	this.symbolicNames = symbolicNames || [];
	return this;
}

DFASerializer.prototype.toString = function() {
   if(this.dfa.s0 === null) {
       return null;
   }
   var buf = "";
   var states = this.dfa.sortedStates();
   for(var i=0;i<states.length;i++) {
       var s = states[i];
       if(s.edges!==null) {
            var n = s.edges.length;
            for(var j=0;j<n;j++) {
                var t = s.edges[j] || null;
                if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                    buf = buf.concat(this.getStateString(s));
                    buf = buf.concat("-");
                    buf = buf.concat(this.getEdgeLabel(j));
                    buf = buf.concat("->");
                    buf = buf.concat(this.getStateString(t));
                    buf = buf.concat('\n');
                }
            }
       }
   }
   return buf.length===0 ? null : buf;
};

DFASerializer.prototype.getEdgeLabel = function(i) {
    if (i===0) {
        return "EOF";
    } else if(this.literalNames !==null || this.symbolicNames!==null) {
        return this.literalNames[i-1] || this.symbolicNames[i-1];
    } else {
        return String.fromCharCode(i-1);
    }
};

DFASerializer.prototype.getStateString = function(s) {
    var baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
    if(s.isAcceptState) {
        if (s.predicates !== null) {
            return baseStateStr + "=>" + s.predicates.toString();
        } else {
            return baseStateStr + "=>" + s.prediction.toString();
        }
    } else {
        return baseStateStr;
    }
};

function LexerDFASerializer(dfa) {
	DFASerializer.call(this, dfa, null);
	return this;
}

LexerDFASerializer.prototype = Object.create(DFASerializer.prototype);
LexerDFASerializer.prototype.constructor = LexerDFASerializer;

LexerDFASerializer.prototype.getEdgeLabel = function(i) {
	return "'" + String.fromCharCode(i) + "'";
};

exports.DFASerializer = DFASerializer;
exports.LexerDFASerializer = LexerDFASerializer;



/***/ }),
/* 36 */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// Provides an empty default implementation of {@link ANTLRErrorListener}. The
// default implementation of each method does nothing, but can be overridden as
// necessary.

function ErrorListener() {
	return this;
}

ErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
};

ErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
};

ErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
};

ErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
};

function ConsoleErrorListener() {
	ErrorListener.call(this);
	return this;
}

ConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);
ConsoleErrorListener.prototype.constructor = ConsoleErrorListener;

//
// Provides a default instance of {@link ConsoleErrorListener}.
//
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

//
// {@inheritDoc}
//
// <p>
// This implementation prints messages to {@link System//err} containing the
// values of {@code line}, {@code charPositionInLine}, and {@code msg} using
// the following format.</p>
//
// <pre>
// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
// </pre>
//
ConsoleErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    console.error("line " + line + ":" + column + " " + msg);
};

function ProxyErrorListener(delegates) {
	ErrorListener.call(this);
    if (delegates===null) {
        throw "delegates";
    }
    this.delegates = delegates;
	return this;
}

ProxyErrorListener.prototype = Object.create(ErrorListener.prototype);
ProxyErrorListener.prototype.constructor = ProxyErrorListener;

ProxyErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    this.delegates.map(function(d) { d.syntaxError(recognizer, offendingSymbol, line, column, msg, e); });
};

ProxyErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    this.delegates.map(function(d) { d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); });
};

ProxyErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	this.delegates.map(function(d) { d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); });
};

ProxyErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	this.delegates.map(function(d) { d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); });
};

exports.ErrorListener = ErrorListener;
exports.ConsoleErrorListener = ConsoleErrorListener;
exports.ProxyErrorListener = ProxyErrorListener;



/***/ }),
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.version = "0.4.0";


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var expressionbase_1 = __webpack_require__(5);
var FloatExpression = (function (_super) {
    __extends(FloatExpression, _super);
    function FloatExpression(float) {
        var _this = _super.call(this) || this;
        _this._float = float;
        return _this;
    }
    Object.defineProperty(FloatExpression.prototype, "float", {
        get: function () {
            return this._float;
        },
        enumerable: true,
        configurable: true
    });
    FloatExpression.prototype.toCode = function (lang, prec) {
        return this._float.toString();
    };
    Object.defineProperty(FloatExpression.prototype, "symbols", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    FloatExpression.prototype.applyAcslTypes = function (typeDictionary) {
    };
    FloatExpression.prototype.clone = function () {
        var expression = new FloatExpression(this._float);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return FloatExpression;
}(expressionbase_1.ExpressionBase));
exports.default = FloatExpression;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var FnExpression = (function (_super) {
    __extends(FnExpression, _super);
    function FnExpression(name, args) {
        var _this = _super.call(this) || this;
        _this.set("name", name);
        _this._nargs = args.length;
        for (var i = 0; i < _this._nargs; ++i) {
            _this.set("arg" + i, args[i]);
        }
        return _this;
    }
    Object.defineProperty(FnExpression.prototype, "name", {
        get: function () {
            return this.get("name");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FnExpression.prototype, "args", {
        get: function () {
            var _args = [];
            for (var i = 0; i < this._nargs; ++i) {
                _args.push(this.get("arg" + i));
            }
            return _args;
        },
        enumerable: true,
        configurable: true
    });
    FnExpression.prototype.toCode = function (lang, prec) {
        var fn = this.name.toCode("R", 0).toLowerCase();
        switch (fn) {
            case "int":
                fn = "as.integer";
                break;
        }
        var args = this.args.map(function (a) { return a.toCode("R", enum_1.Prec.Fn); });
        var code = fn + "(" + args.join(", ") + ")";
        return code;
    };
    Object.defineProperty(FnExpression.prototype, "symbols", {
        get: function () {
            var symbols = [];
            this.args.forEach(function (a) { return symbols.push.apply(symbols, a.symbols); });
            return symbols;
        },
        enumerable: true,
        configurable: true
    });
    FnExpression.prototype.applyAcslTypes = function (typeDictionary) {
        for (var i = 0; i < this._nargs; ++i) {
            var name_1 = "arg" + i;
            var replacement = objectmodel_1.applyAcslTypesToExpression(this.get(name_1), typeDictionary);
            if (!!replacement)
                this.set(name_1, replacement);
        }
    };
    FnExpression.prototype.clone = function () {
        var expression = new FnExpression(this.name.clone(), this.args.map(function (a) { return a.clone(); }));
        return expression;
    };
    return FnExpression;
}(expressionbase_1.ExpressionBase));
exports.default = FnExpression;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//* A rule invocation record for parsing.
//
//  Contains all of the information about the current rule not stored in the
//  RuleContext. It handles parse tree children list, Any ATN state
//  tracing, and the default values available for rule indications:
//  start, stop, rule index, current alt number, current
//  ATN state.
//
//  Subclasses made for each rule and grammar track the parameters,
//  return values, locals, and labels specific to that rule. These
//  are the objects that are returned from rules.
//
//  Note text is not an actual field of a rule return value; it is computed
//  from start and stop using the input stream's toString() method.  I
//  could add a ctor to this so that we can pass in and store the input
//  stream, but I'm not sure we want to do that.  It would seem to be undefined
//  to get the .text property anyway if the rule matches tokens from multiple
//  input streams.
//
//  I do not use getters for fields of objects that are used simply to
//  group values such as this aggregate.  The getters/setters are there to
//  satisfy the superclass interface.

var RuleContext = __webpack_require__(33).RuleContext;
var Tree = __webpack_require__(12);
var INVALID_INTERVAL = Tree.INVALID_INTERVAL;
var TerminalNode = Tree.TerminalNode;
var TerminalNodeImpl = Tree.TerminalNodeImpl;
var ErrorNodeImpl = Tree.ErrorNodeImpl;
var Interval = __webpack_require__(7).Interval;

function ParserRuleContext(parent, invokingStateNumber) {
	parent = parent || null;
	invokingStateNumber = invokingStateNumber || null;
	RuleContext.call(this, parent, invokingStateNumber);
	this.ruleIndex = -1;
    // * If we are debugging or building a parse tree for a visitor,
    // we need to track all of the tokens and rule invocations associated
    // with this rule's context. This is empty for parsing w/o tree constr.
    // operation because we don't the need to track the details about
    // how we parse this rule.
    // /
    this.children = null;
    this.start = null;
    this.stop = null;
    // The exception that forced this rule to return. If the rule successfully
    // completed, this is {@code null}.
    this.exception = null;
}

ParserRuleContext.prototype = Object.create(RuleContext.prototype);
ParserRuleContext.prototype.constructor = ParserRuleContext;

// * COPY a ctx (I'm deliberately not using copy constructor)///
ParserRuleContext.prototype.copyFrom = function(ctx) {
    // from RuleContext
    this.parentCtx = ctx.parentCtx;
    this.invokingState = ctx.invokingState;
    this.children = null;
    this.start = ctx.start;
    this.stop = ctx.stop;
    // copy any error nodes to alt label node
    if(ctx.children) {
        this.children = [];
        // reset parent pointer for any error nodes
    	ctx.children.map(function(child) {
    		if (child instanceof ErrorNodeImpl) {
                this.children.push(child);
                child.parentCtx = this;
            }
		}, this);
	}
};

// Double dispatch methods for listeners
ParserRuleContext.prototype.enterRule = function(listener) {
};

ParserRuleContext.prototype.exitRule = function(listener) {
};

// * Does not set parent link; other add methods do that///
ParserRuleContext.prototype.addChild = function(child) {
    if (this.children === null) {
        this.children = [];
    }
    this.children.push(child);
    return child;
};

// * Used by enterOuterAlt to toss out a RuleContext previously added as
// we entered a rule. If we have // label, we will need to remove
// generic ruleContext object.
// /
ParserRuleContext.prototype.removeLastChild = function() {
    if (this.children !== null) {
        this.children.pop();
    }
};

ParserRuleContext.prototype.addTokenNode = function(token) {
    var node = new TerminalNodeImpl(token);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.addErrorNode = function(badToken) {
    var node = new ErrorNodeImpl(badToken);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.getChild = function(i, type) {
	type = type || null;
	if (type === null) {
		return this.children.length>=i ? this.children[i] : null;
	} else {
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if(child instanceof type) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
		}
		return null;
    }
};


ParserRuleContext.prototype.getToken = function(ttype, i) {
	for(var j=0; j<this.children.length; j++) {
		var child = this.children[j];
		if (child instanceof TerminalNode) {
			if (child.symbol.type === ttype) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
        }
	}
    return null;
};

ParserRuleContext.prototype.getTokens = function(ttype ) {
    if (this.children=== null) {
        return [];
    } else {
		var tokens = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					tokens.push(child);
				}
			}
		}
		return tokens;
    }
};

ParserRuleContext.prototype.getTypedRuleContext = function(ctxType, i) {
    return this.getChild(i, ctxType);
};

ParserRuleContext.prototype.getTypedRuleContexts = function(ctxType) {
    if (this.children=== null) {
        return [];
    } else {
		var contexts = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof ctxType) {
				contexts.push(child);
			}
		}
		return contexts;
	}
};

ParserRuleContext.prototype.getChildCount = function() {
	if (this.children=== null) {
		return 0;
	} else {
		return this.children.length;
	}
};

ParserRuleContext.prototype.getSourceInterval = function() {
    if( this.start === null || this.stop === null) {
        return INVALID_INTERVAL;
    } else {
        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
    }
};

RuleContext.EMPTY = new ParserRuleContext();

function InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
	ParserRuleContext.call(parent, invokingStateNumber);
    this.ruleIndex = ruleIndex;
    return this;
}

InterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);
InterpreterRuleContext.prototype.constructor = InterpreterRuleContext;

exports.ParserRuleContext = ParserRuleContext;

/***/ }),
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var AddSubExpression = (function (_super) {
    __extends(AddSubExpression, _super);
    function AddSubExpression(operand1, op, operand2) {
        var _this = _super.call(this) || this;
        _this.set("operand1", operand1);
        _this._op = op;
        _this.set("operand2", operand2);
        return _this;
    }
    AddSubExpression.prototype.toCode = function (lang, prec) {
        var wrap = prec != enum_1.Prec.Sub && prec > enum_1.Prec.AddSub;
        var code = this.get("operand1").toCode(lang, enum_1.Prec.AddSub) + " " + this._op + " " + this.get("operand2").toCode(lang, enum_1.Prec.AddSub);
        return wrap ? "(" + code + ")" : code;
    };
    Object.defineProperty(AddSubExpression.prototype, "symbols", {
        get: function () {
            return this.get("operand1").symbols.concat(this.get("operand2").symbols);
        },
        enumerable: true,
        configurable: true
    });
    AddSubExpression.prototype.applyAcslTypes = function (typeDictionary) {
        var replacement = objectmodel_1.applyAcslTypesToExpression(this.get("operand1"), typeDictionary);
        if (!!replacement)
            this.set("operand1", replacement);
        replacement = objectmodel_1.applyAcslTypesToExpression(this.get("operand2"), typeDictionary);
        if (!!replacement)
            this.set("operand2", replacement);
    };
    AddSubExpression.prototype.clone = function () {
        var expression = new AddSubExpression(null, this._op, null);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return AddSubExpression;
}(expressionbase_1.ExpressionBase));
exports.default = AddSubExpression;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var ArrayExpression = (function (_super) {
    __extends(ArrayExpression, _super);
    function ArrayExpression(name, args) {
        var _this = _super.call(this) || this;
        _this._name = name;
        _this._nargs = args.length;
        for (var i = 0; i < _this._nargs; ++i) {
            _this.set("arg" + i, args[i]);
        }
        return _this;
    }
    ArrayExpression.prototype.toCode = function (lang, prec) {
        var args = this.args.map(function (a) { return a.toCode("R", enum_1.Prec.Fn); });
        var code = this._name.toCode("R", 0) + "[" + args.join(", ") + "]";
        return code;
    };
    Object.defineProperty(ArrayExpression.prototype, "symbols", {
        get: function () {
            var symbols = [];
            this.args.forEach(function (a) { return symbols.push.apply(symbols, a.symbols); });
            return symbols;
        },
        enumerable: true,
        configurable: true
    });
    ArrayExpression.prototype.applyAcslTypes = function (typeDictionary) {
        for (var i = 0; i < this._nargs; ++i) {
            var name_1 = "arg" + i;
            var replacement = objectmodel_1.applyAcslTypesToExpression(this.get(name_1), typeDictionary);
            if (!!replacement)
                this.set(name_1, replacement);
        }
    };
    Object.defineProperty(ArrayExpression.prototype, "args", {
        get: function () {
            var _args = [];
            for (var i = 0; i < this._nargs; ++i) {
                _args.push(this.get("arg" + i));
            }
            return _args;
        },
        enumerable: true,
        configurable: true
    });
    ArrayExpression.prototype.clone = function () {
        var expression = new ArrayExpression(this._name.clone(), this.args.map(function (a) { return a.clone(); }));
        return expression;
    };
    return ArrayExpression;
}(expressionbase_1.ExpressionBase));
exports.default = ArrayExpression;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var ArrayStatement = (function () {
    function ArrayStatement(name, acslType, dimensions) {
        this._comments = [];
        this._name = name;
        this._acslType = acslType;
        this._dimensions = dimensions;
    }
    Object.defineProperty(ArrayStatement.prototype, "codeBlocks", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    ArrayStatement.acslTypeToRType = function (acslType) {
        switch (acslType) {
            case enum_1.AcslType.Character:
                return "character";
            case enum_1.AcslType.Dimension:
            case enum_1.AcslType.DoublePrecision:
            case enum_1.AcslType.Real:
                return "double";
            case enum_1.AcslType.Integer:
                return "integer";
            case enum_1.AcslType.Logical:
                return "logical";
            default: throw new Error("Unhandled AcslType: " + acslType);
        }
    };
    ArrayStatement.prototype.toCode = function (lang) {
        var dimensions = this._dimensions.map(function (i) { return i.toCode("R", 0); });
        var rType = ArrayStatement.acslTypeToRType(this._acslType);
        var code;
        if (1 == dimensions.length) {
            code = this._name.toCode("R", 0) + " <- " + rType + "(" + dimensions + ")";
        }
        else {
            code = this._name.toCode("R", 0) + " <- array(" + rType + "(1), c(" + dimensions.join(",") + "))";
        }
        return code;
    };
    Object.defineProperty(ArrayStatement.prototype, "lvalue", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayStatement.prototype, "computation", {
        get: function () {
            throw new Error("Trying to access computation of array declaration");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayStatement.prototype, "isConstant", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayStatement.prototype, "comments", {
        get: function () {
            return this._comments;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayStatement.prototype, "symbolsRequired", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayStatement.prototype, "symbolsProvided", {
        get: function () {
            return [this._name];
        },
        enumerable: true,
        configurable: true
    });
    ArrayStatement.prototype.getContentComments = function () {
        return this.comments.filter(function (c) { return c.placement == enum_1.CommentPlacement.Content; });
    };
    ArrayStatement.prototype.getLineComments = function () {
        return this.comments.filter(function (c) { return c.placement == enum_1.CommentPlacement.Line; });
    };
    ArrayStatement.prototype.getEndLineComments = function () {
        return this.comments.filter(function (c) { return c.placement == enum_1.CommentPlacement.EndLine; });
    };
    ArrayStatement.prototype.applyAcslTypes = function (typeDictionary) {
        for (var i = 0; i < this._dimensions.length; ++i) {
            var replacement = objectmodel_1.applyAcslTypesToExpression(this._dimensions[i], typeDictionary);
            if (!!replacement)
                this._dimensions[i] = replacement;
        }
    };
    return ArrayStatement;
}());
exports.default = ArrayStatement;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var expressionbase_1 = __webpack_require__(5);
var BooleanExpression = (function (_super) {
    __extends(BooleanExpression, _super);
    function BooleanExpression(value) {
        var _this = _super.call(this) || this;
        _this._value = value;
        return _this;
    }
    BooleanExpression.prototype.toCode = function (lang, prec) {
        return this._value == "__true" ? "T" : "F";
    };
    Object.defineProperty(BooleanExpression.prototype, "symbols", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    BooleanExpression.prototype.applyAcslTypes = function (typeDictionary) {
    };
    BooleanExpression.prototype.clone = function () {
        var expression = new BooleanExpression(this._value);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return BooleanExpression;
}(expressionbase_1.ExpressionBase));
exports.default = BooleanExpression;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sectionbase_1 = __webpack_require__(9);
var DerivativeSection = (function (_super) {
    __extends(DerivativeSection, _super);
    function DerivativeSection() {
        var _this = _super.call(this, "derivative") || this;
        _this._integs = [];
        return _this;
    }
    DerivativeSection.prototype.toCode = function (lang) {
        throw new Error("Not implemented");
    };
    Object.defineProperty(DerivativeSection.prototype, "symbolsRequired", {
        get: function () {
            throw new Error("Not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DerivativeSection.prototype, "symbolsProvided", {
        get: function () {
            throw new Error("Not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DerivativeSection.prototype, "integs", {
        get: function () {
            return this._integs;
        },
        enumerable: true,
        configurable: true
    });
    DerivativeSection.prototype.applyAcslTypes = function (typeDictionary) {
        this.applyAcslTypesToCodeBlocks(typeDictionary);
        this._integs.forEach(function (i) { return i.applyAcslTypes(typeDictionary); });
    };
    return DerivativeSection;
}(sectionbase_1.SectionBase));
exports.default = DerivativeSection;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sectionbase_1 = __webpack_require__(9);
var objectmodel_1 = __webpack_require__(0);
var DoContinueSection = (function (_super) {
    __extends(DoContinueSection, _super);
    function DoContinueSection() {
        var _this = _super.call(this, "docontinue") || this;
        _this._schedules = [];
        return _this;
    }
    DoContinueSection.prototype.toCode = function (lang) {
        throw new Error("Not implemented");
    };
    Object.defineProperty(DoContinueSection.prototype, "symbolsRequired", {
        get: function () {
            var symbolsProvided = this.symbolsProvided;
            !!this._index && symbolsProvided.push(this._index);
            var required = objectmodel_1.getSymbolsRequired(symbolsProvided, this.codeBlocks);
            return required;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DoContinueSection.prototype, "symbolsProvided", {
        get: function () {
            var symbolsProvided = objectmodel_1.getSymbolsProvided(this.codeBlocks);
            return symbolsProvided;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DoContinueSection.prototype, "label", {
        get: function () {
            return this._label;
        },
        set: function (value) {
            this._label = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DoContinueSection.prototype, "index", {
        get: function () {
            return this._index;
        },
        set: function (value) {
            this._index = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DoContinueSection.prototype, "initial", {
        get: function () {
            return this._initial;
        },
        set: function (value) {
            this._initial = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DoContinueSection.prototype, "terminal", {
        get: function () {
            return this._terminal;
        },
        set: function (value) {
            this._terminal = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DoContinueSection.prototype, "increment", {
        get: function () {
            return this._increment;
        },
        set: function (value) {
            this._increment = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DoContinueSection.prototype, "schedules", {
        get: function () {
            return this._schedules;
        },
        enumerable: true,
        configurable: true
    });
    DoContinueSection.prototype.applyAcslTypes = function (typeDictionary) {
        this.applyAcslTypesToCodeBlocks(typeDictionary);
        !!this._label && this._label.applyAcslTypes(typeDictionary);
        !!this._index && this._index.applyAcslTypes(typeDictionary);
        !!this._initial && this._initial.applyAcslTypes(typeDictionary);
        !!this._terminal && this._terminal.applyAcslTypes(typeDictionary);
        !!this._increment && this._increment.applyAcslTypes(typeDictionary);
        this._schedules.forEach(function (s) { return s.applyAcslTypes(typeDictionary); });
    };
    return DoContinueSection;
}(sectionbase_1.SectionBase));
exports.default = DoContinueSection;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var derivativesection_1 = __webpack_require__(58);
var sectionbase_1 = __webpack_require__(9);
var DynamicSection = (function (_super) {
    __extends(DynamicSection, _super);
    function DynamicSection() {
        var _this = _super.call(this, "dynamic") || this;
        _this._discreteSections = [];
        _this._derivativeSection = new derivativesection_1.default();
        return _this;
    }
    DynamicSection.prototype.toCode = function (lang) {
        throw new Error("Not implemented");
    };
    Object.defineProperty(DynamicSection.prototype, "symbolsRequired", {
        get: function () {
            throw new Error("Not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSection.prototype, "symbolsProvided", {
        get: function () {
            throw new Error("Not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSection.prototype, "discreteSections", {
        get: function () {
            return this._discreteSections;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSection.prototype, "algorithm", {
        get: function () {
            return this._algorithm;
        },
        set: function (value) {
            this._algorithm = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSection.prototype, "maxterval", {
        get: function () {
            return this._maxterval;
        },
        set: function (value) {
            this._maxterval = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSection.prototype, "minterval", {
        get: function () {
            return this._minterval;
        },
        set: function (value) {
            this._minterval = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSection.prototype, "cinterval", {
        get: function () {
            return this._cinterval;
        },
        set: function (value) {
            this._cinterval = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSection.prototype, "nsteps", {
        get: function () {
            return this._nsteps;
        },
        set: function (value) {
            this._nsteps = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSection.prototype, "derivativeSection", {
        get: function () {
            return this._derivativeSection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSection.prototype, "termt", {
        get: function () {
            return this._termt;
        },
        set: function (value) {
            this._termt = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSection.prototype, "tStop", {
        get: function () {
            return this._tStop;
        },
        set: function (value) {
            this._tStop = value;
        },
        enumerable: true,
        configurable: true
    });
    DynamicSection.prototype.applyAcslTypes = function (typeDictionary) {
        this.applyAcslTypesToCodeBlocks(typeDictionary);
        this._discreteSections.forEach(function (ds) { return ds.applyAcslTypes(typeDictionary); });
        !!this._algorithm && this._algorithm.applyAcslTypes(typeDictionary);
        !!this._maxterval && this._maxterval.applyAcslTypes(typeDictionary);
        !!this._minterval && this._minterval.applyAcslTypes(typeDictionary);
        !!this._cinterval && this._cinterval.applyAcslTypes(typeDictionary);
        !!this._nsteps && this._nsteps.applyAcslTypes(typeDictionary);
        this._derivativeSection.applyAcslTypes(typeDictionary);
        !!this._termt && this._termt.applyAcslTypes(typeDictionary);
    };
    return DynamicSection;
}(sectionbase_1.SectionBase));
exports.default = DynamicSection;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sectionbase_1 = __webpack_require__(9);
var IfSection = (function (_super) {
    __extends(IfSection, _super);
    function IfSection() {
        var _this = _super.call(this, "if") || this;
        _this._conditionalSections = [];
        return _this;
    }
    IfSection.prototype.toCode = function (lang) {
        throw new Error("Not implemented");
    };
    Object.defineProperty(IfSection.prototype, "symbolsRequired", {
        get: function () {
            var symbolsRequired = [];
            this.conditionalSections.forEach(function (cs) { return symbolsRequired.push.apply(symbolsRequired, cs.symbolsRequired); });
            return symbolsRequired;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IfSection.prototype, "symbolsProvided", {
        get: function () {
            var symbolsProvided = [];
            this.conditionalSections.forEach(function (cs) { return symbolsProvided.push.apply(symbolsProvided, cs.symbolsProvided); });
            return symbolsProvided;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IfSection.prototype, "conditionalSections", {
        get: function () {
            return this._conditionalSections;
        },
        enumerable: true,
        configurable: true
    });
    IfSection.prototype.applyAcslTypes = function (typeDictionary) {
        this.applyAcslTypesToCodeBlocks(typeDictionary);
        this._conditionalSections.forEach(function (cs) { return cs.applyAcslTypes(typeDictionary); });
    };
    return IfSection;
}(sectionbase_1.SectionBase));
exports.default = IfSection;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var rInfixes = {
    __and: "&&",
    __eq: "==",
    __ge: ">=",
    __gt: ">",
    __le: "<=",
    __lt: "<",
    __ne: "!=",
    __or: "||",
    __at: "=="
};
var InfixExpression = (function (_super) {
    __extends(InfixExpression, _super);
    function InfixExpression(operand1, infix, operand2) {
        var _this = _super.call(this) || this;
        _this.set("operand1", operand1);
        _this._infix = infix;
        _this.set("operand2", operand2);
        return _this;
    }
    InfixExpression.prototype.toCode = function (lang, prec) {
        var wrap = prec != enum_1.Prec.Sub && prec > enum_1.Prec.Infix;
        var code;
        if (this._infix == "__xor") {
            code = "bitwXor(" + this.get("operand1").toCode(lang, enum_1.Prec.Infix) + ", " + this.get("operand2").toCode(lang, enum_1.Prec.Infix) + ")";
        }
        else {
            code = this.get("operand1").toCode(lang, enum_1.Prec.Infix) + " " + (rInfixes[this._infix] || this._infix) + " " + this.get("operand2").toCode(lang, enum_1.Prec.Infix);
        }
        return wrap ? "(" + code + ")" : code;
    };
    Object.defineProperty(InfixExpression.prototype, "symbols", {
        get: function () {
            return this.get("operand1").symbols.concat(this.get("operand2").symbols);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InfixExpression.prototype, "lhs", {
        get: function () {
            return this.get("operand1");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InfixExpression.prototype, "infix", {
        get: function () {
            return this._infix;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InfixExpression.prototype, "rhs", {
        get: function () {
            return this.get("operand2");
        },
        enumerable: true,
        configurable: true
    });
    InfixExpression.prototype.applyAcslTypes = function (typeDictionary) {
        var replacement = objectmodel_1.applyAcslTypesToExpression(this.get("operand1"), typeDictionary);
        if (!!replacement)
            this.set("operand1", replacement);
        replacement = objectmodel_1.applyAcslTypesToExpression(this.get("operand2"), typeDictionary);
        if (!!replacement)
            this.set("operand2", replacement);
    };
    InfixExpression.prototype.clone = function () {
        var expression = new InfixExpression(null, this._infix, null);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return InfixExpression;
}(expressionbase_1.ExpressionBase));
exports.default = InfixExpression;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sectionbase_1 = __webpack_require__(9);
var objectmodel_1 = __webpack_require__(0);
var InitialSection = (function (_super) {
    __extends(InitialSection, _super);
    function InitialSection() {
        var _this = _super.call(this, "initial") || this;
        _this._schedules = [];
        return _this;
    }
    InitialSection.prototype.toCode = function (lang) {
        throw new Error("Not implemented");
    };
    Object.defineProperty(InitialSection.prototype, "symbolsRequired", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InitialSection.prototype, "symbolsProvided", {
        get: function () {
            var codeBlocks = this.codeBlocks;
            var statements = codeBlocks.filter(function (cb) { return objectmodel_1.isStatement(cb); });
            var symbols = [];
            statements.forEach(function (s) { return symbols.push.apply(symbols, s.symbolsProvided); });
            return symbols;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InitialSection.prototype, "schedules", {
        get: function () {
            return this._schedules;
        },
        enumerable: true,
        configurable: true
    });
    InitialSection.prototype.applyAcslTypes = function (typeDictionary) {
        this.applyAcslTypesToCodeBlocks(typeDictionary);
        this._schedules.forEach(function (s) { return s.applyAcslTypes(typeDictionary); });
    };
    return InitialSection;
}(sectionbase_1.SectionBase));
exports.default = InitialSection;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var MulDivExpression = (function (_super) {
    __extends(MulDivExpression, _super);
    function MulDivExpression(operand1, op, operand2) {
        var _this = _super.call(this) || this;
        _this.set("operand1", operand1);
        _this._op = op;
        _this.set("operand2", operand2);
        return _this;
    }
    MulDivExpression.prototype.toCode = function (lang, prec) {
        var wrap = prec != enum_1.Prec.Sub && prec > enum_1.Prec.MulDiv;
        var code = this.get("operand1").toCode(lang, enum_1.Prec.MulDiv) + " " + this._op + " " + this.get("operand2").toCode(lang, enum_1.Prec.MulDiv);
        return wrap ? "(" + code + ")" : code;
    };
    Object.defineProperty(MulDivExpression.prototype, "symbols", {
        get: function () {
            return this.get("operand1").symbols.concat(this.get("operand2").symbols);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MulDivExpression.prototype, "lhs", {
        get: function () {
            return this.get("operand1");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MulDivExpression.prototype, "op", {
        get: function () {
            return this._op;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MulDivExpression.prototype, "rhs", {
        get: function () {
            return this.get("operand2");
        },
        enumerable: true,
        configurable: true
    });
    MulDivExpression.prototype.applyAcslTypes = function (typeDictionary) {
        var replacement = objectmodel_1.applyAcslTypesToExpression(this.get("operand1"), typeDictionary);
        if (!!replacement)
            this.set("operand1", replacement);
        replacement = objectmodel_1.applyAcslTypesToExpression(this.get("operand2"), typeDictionary);
        if (!!replacement)
            this.set("operand2", replacement);
    };
    MulDivExpression.prototype.clone = function () {
        var expression = new MulDivExpression(null, this._op, null);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return MulDivExpression;
}(expressionbase_1.ExpressionBase));
exports.default = MulDivExpression;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sectionbase_1 = __webpack_require__(9);
var ProceduralSection = (function (_super) {
    __extends(ProceduralSection, _super);
    function ProceduralSection() {
        var _this = _super.call(this, "procedural") || this;
        _this._outputs = [];
        _this._inputs = [];
        return _this;
    }
    ProceduralSection.prototype.toCode = function (lang) {
        throw new Error("Not implemented");
    };
    Object.defineProperty(ProceduralSection.prototype, "symbolsRequired", {
        get: function () {
            return this._inputs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProceduralSection.prototype, "symbolsProvided", {
        get: function () {
            return this._outputs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProceduralSection.prototype, "outputs", {
        get: function () {
            return this._outputs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProceduralSection.prototype, "inputs", {
        get: function () {
            return this._inputs;
        },
        enumerable: true,
        configurable: true
    });
    ProceduralSection.prototype.applyAcslTypes = function (typeDictionary) {
        this.applyAcslTypesToCodeBlocks(typeDictionary);
    };
    return ProceduralSection;
}(sectionbase_1.SectionBase));
exports.default = ProceduralSection;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var PulseExpression = (function (_super) {
    __extends(PulseExpression, _super);
    function PulseExpression(tz, p, w) {
        var _this = _super.call(this) || this;
        _this.set("tz", tz);
        _this.set("p", p);
        _this.set("w", w);
        return _this;
    }
    PulseExpression.prototype.toCode = function (lang, prec) {
        return "pulse(t, " + this.get("tz").toCode("R", enum_1.Prec.Pulse) + ", " + this.get("p").toCode("R", enum_1.Prec.Pulse) + ", " + this.get("w").toCode("R", enum_1.Prec.Pulse) + ")";
    };
    Object.defineProperty(PulseExpression.prototype, "symbols", {
        get: function () {
            return this.get("tz").symbols.concat(this.get("p").symbols, this.get("w").symbols);
        },
        enumerable: true,
        configurable: true
    });
    PulseExpression.prototype.applyAcslTypes = function (typeDictionary) {
        var replacement = objectmodel_1.applyAcslTypesToExpression(this.get("tz"), typeDictionary);
        if (!!replacement)
            this.set("tz", replacement);
        replacement = objectmodel_1.applyAcslTypesToExpression(this.get("p"), typeDictionary);
        if (!!replacement)
            this.set("p", replacement);
        replacement = objectmodel_1.applyAcslTypesToExpression(this.get("w"), typeDictionary);
        if (!!replacement)
            this.set("w", replacement);
    };
    PulseExpression.prototype.clone = function () {
        var expression = new PulseExpression(null, null, null);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return PulseExpression;
}(expressionbase_1.ExpressionBase));
exports.default = PulseExpression;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var floatexpression_1 = __webpack_require__(42);
var booleanexpression_1 = __webpack_require__(57);
var idexpression_1 = __webpack_require__(31);
var objectmodel_1 = __webpack_require__(0);
var Statement = (function () {
    function Statement(lvalue, computation) {
        this._isConstant = false;
        this._comments = [];
        this._lvalue = lvalue;
        this._computation = computation;
    }
    Object.defineProperty(Statement.prototype, "codeBlocks", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Statement.prototype.toCode = function (lang) {
        var computation = this._computation.toCode(lang, enum_1.Prec.Assign);
        if (!!this._acslType) {
            if (this._computation instanceof floatexpression_1.default || this._computation instanceof booleanexpression_1.default || this._computation instanceof idexpression_1.default) {
                switch (this._acslType) {
                    case enum_1.AcslType.Character:
                        computation = "as.character(" + computation + ")";
                        break;
                    case enum_1.AcslType.DoublePrecision:
                    case enum_1.AcslType.Real:
                        computation = "as.double(" + computation + ")";
                        break;
                    case enum_1.AcslType.Integer:
                        computation = "as.integer(" + computation + ")";
                        break;
                    case enum_1.AcslType.Logical:
                        computation = "as.logical(" + computation + ")";
                        break;
                }
            }
        }
        return !!this._lvalue ?
            this._lvalue.toCode(lang, enum_1.Prec.Assign) + " <- " + computation :
            computation;
    };
    Object.defineProperty(Statement.prototype, "lvalue", {
        get: function () {
            return this._lvalue;
        },
        set: function (value) {
            this._lvalue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Statement.prototype, "computation", {
        get: function () {
            return this._computation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Statement.prototype, "isConstant", {
        get: function () {
            return this._isConstant;
        },
        set: function (value) {
            this._isConstant = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Statement.prototype, "acslType", {
        get: function () {
            return this._acslType;
        },
        set: function (value) {
            this._acslType = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Statement.prototype, "comments", {
        get: function () {
            return this._comments;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Statement.prototype, "symbolsRequired", {
        get: function () {
            return this._computation.symbols;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Statement.prototype, "symbolsProvided", {
        get: function () {
            return !!this._lvalue ? [this._lvalue] : [];
        },
        enumerable: true,
        configurable: true
    });
    Statement.prototype.getContentComments = function () {
        return this.comments.filter(function (c) { return c.placement == enum_1.CommentPlacement.Content; });
    };
    Statement.prototype.getLineComments = function () {
        return this.comments.filter(function (c) { return c.placement == enum_1.CommentPlacement.Line; });
    };
    Statement.prototype.getEndLineComments = function () {
        return this.comments.filter(function (c) { return c.placement == enum_1.CommentPlacement.EndLine; });
    };
    Statement.prototype.applyAcslTypes = function (typeDictionary) {
        var replacement = objectmodel_1.applyAcslTypesToExpression(this._computation, typeDictionary);
        if (!!replacement)
            this._computation = replacement;
        this._computation.applyAcslTypes(typeDictionary);
        if (!!this._lvalue) {
            var name_1 = this.lvalue.toCode("R", 0);
            if (typeDictionary.has(name_1)) {
                this.acslType = typeDictionary.get(name_1);
            }
        }
    };
    return Statement;
}());
exports.default = Statement;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var StepExpression = (function (_super) {
    __extends(StepExpression, _super);
    function StepExpression(tz) {
        var _this = _super.call(this) || this;
        _this.set("tz", tz);
        return _this;
    }
    StepExpression.prototype.toCode = function (lang, prec) {
        return "tzstep(t, " + this.get("tz").toCode("R", enum_1.Prec.Step) + ")";
    };
    Object.defineProperty(StepExpression.prototype, "symbols", {
        get: function () {
            return this.get("tz").symbols;
        },
        enumerable: true,
        configurable: true
    });
    StepExpression.prototype.applyAcslTypes = function (typeDictionary) {
        var replacement = objectmodel_1.applyAcslTypesToExpression(this.get("tz"), typeDictionary);
        if (!!replacement)
            this.set("tz", replacement);
    };
    StepExpression.prototype.clone = function () {
        var expression = new StepExpression(null);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return StepExpression;
}(expressionbase_1.ExpressionBase));
exports.default = StepExpression;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var SubExpression = (function (_super) {
    __extends(SubExpression, _super);
    function SubExpression(expression) {
        var _this = _super.call(this) || this;
        _this.set("expression", expression);
        return _this;
    }
    SubExpression.prototype.toCode = function (lang, prec) {
        return "(" + this.get("expression").toCode("R", enum_1.Prec.Sub) + ")";
    };
    Object.defineProperty(SubExpression.prototype, "symbols", {
        get: function () {
            return this.get("expression").symbols;
        },
        enumerable: true,
        configurable: true
    });
    SubExpression.prototype.applyAcslTypes = function (typeDictionary) {
        var replacement = objectmodel_1.applyAcslTypesToExpression(this.get("expression"), typeDictionary);
        if (!!replacement)
            this.set("expression", replacement);
    };
    SubExpression.prototype.clone = function () {
        var expression = new SubExpression(null);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return SubExpression;
}(expressionbase_1.ExpressionBase));
exports.default = SubExpression;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var TableStatement = (function () {
    function TableStatement(name, independent, dependent) {
        this._comments = [];
        this._name = name;
        this._independent = independent;
        this._dependent = dependent;
    }
    Object.defineProperty(TableStatement.prototype, "codeBlocks", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    TableStatement.prototype.toCode = function (lang) {
        var independents = this._independent.map(function (i) { return i.toCode("R", 0); });
        var independent = independents.join(", ");
        var dependents = this._dependent.map(function (i) { return i.toCode("R", 0); });
        var dependent = dependents.join(", ");
        var code = this._name.toCode(lang, 0) + " <- approxfun(c(" + independent + "), c(" + dependent + "))";
        return code;
    };
    Object.defineProperty(TableStatement.prototype, "lvalue", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableStatement.prototype, "computation", {
        get: function () {
            throw new Error("Trying to access computation of table declaration");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableStatement.prototype, "isConstant", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableStatement.prototype, "comments", {
        get: function () {
            return this._comments;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableStatement.prototype, "symbolsRequired", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableStatement.prototype, "symbolsProvided", {
        get: function () {
            return [this._name];
        },
        enumerable: true,
        configurable: true
    });
    TableStatement.prototype.getContentComments = function () {
        return this.comments.filter(function (c) { return c.placement == enum_1.CommentPlacement.Content; });
    };
    TableStatement.prototype.getLineComments = function () {
        return this.comments.filter(function (c) { return c.placement == enum_1.CommentPlacement.Line; });
    };
    TableStatement.prototype.getEndLineComments = function () {
        return this.comments.filter(function (c) { return c.placement == enum_1.CommentPlacement.EndLine; });
    };
    TableStatement.prototype.applyAcslTypes = function (typeDictionary) {
    };
    return TableStatement;
}());
exports.default = TableStatement;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sectionbase_1 = __webpack_require__(9);
var TerminalSection = (function (_super) {
    __extends(TerminalSection, _super);
    function TerminalSection() {
        return _super.call(this, "terminal") || this;
    }
    TerminalSection.prototype.toCode = function (lang) {
        throw new Error("Not implemented");
    };
    Object.defineProperty(TerminalSection.prototype, "symbolsRequired", {
        get: function () {
            throw new Error("Not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerminalSection.prototype, "symbolsProvided", {
        get: function () {
            throw new Error("Not implemented");
        },
        enumerable: true,
        configurable: true
    });
    TerminalSection.prototype.applyAcslTypes = function (typeDictionary) {
        this.applyAcslTypesToCodeBlocks(typeDictionary);
    };
    return TerminalSection;
}(sectionbase_1.SectionBase));
exports.default = TerminalSection;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var idexpression_1 = __webpack_require__(31);
var expressionbase_1 = __webpack_require__(5);
var tExpression = new idexpression_1.default("t");
var TExpression = (function (_super) {
    __extends(TExpression, _super);
    function TExpression() {
        return _super.call(this) || this;
    }
    TExpression.prototype.toCode = function (lang, prec) {
        return tExpression.toCode(lang, prec);
    };
    Object.defineProperty(TExpression.prototype, "symbols", {
        get: function () {
            return [this];
        },
        enumerable: true,
        configurable: true
    });
    TExpression.prototype.applyAcslTypes = function (typeDictionary) {
    };
    TExpression.prototype.clone = function () {
        var expression = new TExpression();
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return TExpression;
}(expressionbase_1.ExpressionBase));
exports.default = TExpression;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

// Generated from Acsl.g4 by ANTLR 4.6
// jshint ignore: start
var antlr4 = __webpack_require__(25);

// This class defines a complete listener for a parse tree produced by AcslParser.
function AcslListener() {
	antlr4.tree.ParseTreeListener.call(this);
	//return this;
}

AcslListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
AcslListener.prototype.constructor = AcslListener;

// Enter a parse tree produced by AcslParser#HeadedProgramWithComments.
AcslListener.prototype.enterHeadedProgramWithComments = function(ctx) {
};

// Exit a parse tree produced by AcslParser#HeadedProgramWithComments.
AcslListener.prototype.exitHeadedProgramWithComments = function(ctx) {
};


// Enter a parse tree produced by AcslParser#HeadedProgramWithoutComments.
AcslListener.prototype.enterHeadedProgramWithoutComments = function(ctx) {
};

// Exit a parse tree produced by AcslParser#HeadedProgramWithoutComments.
AcslListener.prototype.exitHeadedProgramWithoutComments = function(ctx) {
};


// Enter a parse tree produced by AcslParser#ProgramWithComments.
AcslListener.prototype.enterProgramWithComments = function(ctx) {
};

// Exit a parse tree produced by AcslParser#ProgramWithComments.
AcslListener.prototype.exitProgramWithComments = function(ctx) {
};


// Enter a parse tree produced by AcslParser#ProgramWithoutComments.
AcslListener.prototype.enterProgramWithoutComments = function(ctx) {
};

// Exit a parse tree produced by AcslParser#ProgramWithoutComments.
AcslListener.prototype.exitProgramWithoutComments = function(ctx) {
};


// Enter a parse tree produced by AcslParser#program.
AcslListener.prototype.enterProgram = function(ctx) {
};

// Exit a parse tree produced by AcslParser#program.
AcslListener.prototype.exitProgram = function(ctx) {
};


// Enter a parse tree produced by AcslParser#statement.
AcslListener.prototype.enterStatement = function(ctx) {
};

// Exit a parse tree produced by AcslParser#statement.
AcslListener.prototype.exitStatement = function(ctx) {
};


// Enter a parse tree produced by AcslParser#DiscreteWithComment.
AcslListener.prototype.enterDiscreteWithComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#DiscreteWithComment.
AcslListener.prototype.exitDiscreteWithComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#DiscreteWithoutCommment.
AcslListener.prototype.enterDiscreteWithoutCommment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#DiscreteWithoutCommment.
AcslListener.prototype.exitDiscreteWithoutCommment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#interval.
AcslListener.prototype.enterInterval = function(ctx) {
};

// Exit a parse tree produced by AcslParser#interval.
AcslListener.prototype.exitInterval = function(ctx) {
};


// Enter a parse tree produced by AcslParser#InitialWithComment.
AcslListener.prototype.enterInitialWithComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#InitialWithComment.
AcslListener.prototype.exitInitialWithComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#InitialWithoutComment.
AcslListener.prototype.enterInitialWithoutComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#InitialWithoutComment.
AcslListener.prototype.exitInitialWithoutComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#TerminalWithComment.
AcslListener.prototype.enterTerminalWithComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#TerminalWithComment.
AcslListener.prototype.exitTerminalWithComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#TerminalWithoutComment.
AcslListener.prototype.enterTerminalWithoutComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#TerminalWithoutComment.
AcslListener.prototype.exitTerminalWithoutComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#constant.
AcslListener.prototype.enterConstant = function(ctx) {
};

// Exit a parse tree produced by AcslParser#constant.
AcslListener.prototype.exitConstant = function(ctx) {
};


// Enter a parse tree produced by AcslParser#schedule.
AcslListener.prototype.enterSchedule = function(ctx) {
};

// Exit a parse tree produced by AcslParser#schedule.
AcslListener.prototype.exitSchedule = function(ctx) {
};


// Enter a parse tree produced by AcslParser#DynamicWithComment.
AcslListener.prototype.enterDynamicWithComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#DynamicWithComment.
AcslListener.prototype.exitDynamicWithComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#DynamicWithoutComment.
AcslListener.prototype.enterDynamicWithoutComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#DynamicWithoutComment.
AcslListener.prototype.exitDynamicWithoutComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#algorithm.
AcslListener.prototype.enterAlgorithm = function(ctx) {
};

// Exit a parse tree produced by AcslParser#algorithm.
AcslListener.prototype.exitAlgorithm = function(ctx) {
};


// Enter a parse tree produced by AcslParser#maxterval.
AcslListener.prototype.enterMaxterval = function(ctx) {
};

// Exit a parse tree produced by AcslParser#maxterval.
AcslListener.prototype.exitMaxterval = function(ctx) {
};


// Enter a parse tree produced by AcslParser#minterval.
AcslListener.prototype.enterMinterval = function(ctx) {
};

// Exit a parse tree produced by AcslParser#minterval.
AcslListener.prototype.exitMinterval = function(ctx) {
};


// Enter a parse tree produced by AcslParser#cinterval.
AcslListener.prototype.enterCinterval = function(ctx) {
};

// Exit a parse tree produced by AcslParser#cinterval.
AcslListener.prototype.exitCinterval = function(ctx) {
};


// Enter a parse tree produced by AcslParser#nsteps.
AcslListener.prototype.enterNsteps = function(ctx) {
};

// Exit a parse tree produced by AcslParser#nsteps.
AcslListener.prototype.exitNsteps = function(ctx) {
};


// Enter a parse tree produced by AcslParser#DerivativeWithComment.
AcslListener.prototype.enterDerivativeWithComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#DerivativeWithComment.
AcslListener.prototype.exitDerivativeWithComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#DerivativeWithoutComment.
AcslListener.prototype.enterDerivativeWithoutComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#DerivativeWithoutComment.
AcslListener.prototype.exitDerivativeWithoutComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#IfBlock.
AcslListener.prototype.enterIfBlock = function(ctx) {
};

// Exit a parse tree produced by AcslParser#IfBlock.
AcslListener.prototype.exitIfBlock = function(ctx) {
};


// Enter a parse tree produced by AcslParser#ElseIfEndBlockEnd.
AcslListener.prototype.enterElseIfEndBlockEnd = function(ctx) {
};

// Exit a parse tree produced by AcslParser#ElseIfEndBlockEnd.
AcslListener.prototype.exitElseIfEndBlockEnd = function(ctx) {
};


// Enter a parse tree produced by AcslParser#ElseIfEndBlockElseIf.
AcslListener.prototype.enterElseIfEndBlockElseIf = function(ctx) {
};

// Exit a parse tree produced by AcslParser#ElseIfEndBlockElseIf.
AcslListener.prototype.exitElseIfEndBlockElseIf = function(ctx) {
};


// Enter a parse tree produced by AcslParser#ElseIfEndBlockElse.
AcslListener.prototype.enterElseIfEndBlockElse = function(ctx) {
};

// Exit a parse tree produced by AcslParser#ElseIfEndBlockElse.
AcslListener.prototype.exitElseIfEndBlockElse = function(ctx) {
};


// Enter a parse tree produced by AcslParser#ThenBlock.
AcslListener.prototype.enterThenBlock = function(ctx) {
};

// Exit a parse tree produced by AcslParser#ThenBlock.
AcslListener.prototype.exitThenBlock = function(ctx) {
};


// Enter a parse tree produced by AcslParser#IfLogical.
AcslListener.prototype.enterIfLogical = function(ctx) {
};

// Exit a parse tree produced by AcslParser#IfLogical.
AcslListener.prototype.exitIfLogical = function(ctx) {
};


// Enter a parse tree produced by AcslParser#table.
AcslListener.prototype.enterTable = function(ctx) {
};

// Exit a parse tree produced by AcslParser#table.
AcslListener.prototype.exitTable = function(ctx) {
};


// Enter a parse tree produced by AcslParser#parameter.
AcslListener.prototype.enterParameter = function(ctx) {
};

// Exit a parse tree produced by AcslParser#parameter.
AcslListener.prototype.exitParameter = function(ctx) {
};


// Enter a parse tree produced by AcslParser#DoContinueIncr.
AcslListener.prototype.enterDoContinueIncr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#DoContinueIncr.
AcslListener.prototype.exitDoContinueIncr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#DoContinue.
AcslListener.prototype.enterDoContinue = function(ctx) {
};

// Exit a parse tree produced by AcslParser#DoContinue.
AcslListener.prototype.exitDoContinue = function(ctx) {
};


// Enter a parse tree produced by AcslParser#GoTo.
AcslListener.prototype.enterGoTo = function(ctx) {
};

// Exit a parse tree produced by AcslParser#GoTo.
AcslListener.prototype.exitGoTo = function(ctx) {
};


// Enter a parse tree produced by AcslParser#LabelStatement.
AcslListener.prototype.enterLabelStatement = function(ctx) {
};

// Exit a parse tree produced by AcslParser#LabelStatement.
AcslListener.prototype.exitLabelStatement = function(ctx) {
};


// Enter a parse tree produced by AcslParser#LabelContinue.
AcslListener.prototype.enterLabelContinue = function(ctx) {
};

// Exit a parse tree produced by AcslParser#LabelContinue.
AcslListener.prototype.exitLabelContinue = function(ctx) {
};


// Enter a parse tree produced by AcslParser#call.
AcslListener.prototype.enterCall = function(ctx) {
};

// Exit a parse tree produced by AcslParser#call.
AcslListener.prototype.exitCall = function(ctx) {
};


// Enter a parse tree produced by AcslParser#variable.
AcslListener.prototype.enterVariable = function(ctx) {
};

// Exit a parse tree produced by AcslParser#variable.
AcslListener.prototype.exitVariable = function(ctx) {
};


// Enter a parse tree produced by AcslParser#DimensionType.
AcslListener.prototype.enterDimensionType = function(ctx) {
};

// Exit a parse tree produced by AcslParser#DimensionType.
AcslListener.prototype.exitDimensionType = function(ctx) {
};


// Enter a parse tree produced by AcslParser#RealType.
AcslListener.prototype.enterRealType = function(ctx) {
};

// Exit a parse tree produced by AcslParser#RealType.
AcslListener.prototype.exitRealType = function(ctx) {
};


// Enter a parse tree produced by AcslParser#DoublePrecisionType.
AcslListener.prototype.enterDoublePrecisionType = function(ctx) {
};

// Exit a parse tree produced by AcslParser#DoublePrecisionType.
AcslListener.prototype.exitDoublePrecisionType = function(ctx) {
};


// Enter a parse tree produced by AcslParser#IntegerType.
AcslListener.prototype.enterIntegerType = function(ctx) {
};

// Exit a parse tree produced by AcslParser#IntegerType.
AcslListener.prototype.exitIntegerType = function(ctx) {
};


// Enter a parse tree produced by AcslParser#LogicalType.
AcslListener.prototype.enterLogicalType = function(ctx) {
};

// Exit a parse tree produced by AcslParser#LogicalType.
AcslListener.prototype.exitLogicalType = function(ctx) {
};


// Enter a parse tree produced by AcslParser#CharacterType.
AcslListener.prototype.enterCharacterType = function(ctx) {
};

// Exit a parse tree produced by AcslParser#CharacterType.
AcslListener.prototype.exitCharacterType = function(ctx) {
};


// Enter a parse tree produced by AcslParser#ProceduralWithComment.
AcslListener.prototype.enterProceduralWithComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#ProceduralWithComment.
AcslListener.prototype.exitProceduralWithComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#ProceduralWithoutComment.
AcslListener.prototype.enterProceduralWithoutComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#ProceduralWithoutComment.
AcslListener.prototype.exitProceduralWithoutComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#AssignExprOrAssignWithComment.
AcslListener.prototype.enterAssignExprOrAssignWithComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#AssignExprOrAssignWithComment.
AcslListener.prototype.exitAssignExprOrAssignWithComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#AssignExprOrAssign.
AcslListener.prototype.enterAssignExprOrAssign = function(ctx) {
};

// Exit a parse tree produced by AcslParser#AssignExprOrAssign.
AcslListener.prototype.exitAssignExprOrAssign = function(ctx) {
};


// Enter a parse tree produced by AcslParser#ListExprOrAssignWithComment.
AcslListener.prototype.enterListExprOrAssignWithComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#ListExprOrAssignWithComment.
AcslListener.prototype.exitListExprOrAssignWithComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#ListExprOrAssign.
AcslListener.prototype.enterListExprOrAssign = function(ctx) {
};

// Exit a parse tree produced by AcslParser#ListExprOrAssign.
AcslListener.prototype.exitListExprOrAssign = function(ctx) {
};


// Enter a parse tree produced by AcslParser#MultipleExprOrAssignWithComment.
AcslListener.prototype.enterMultipleExprOrAssignWithComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#MultipleExprOrAssignWithComment.
AcslListener.prototype.exitMultipleExprOrAssignWithComment = function(ctx) {
};


// Enter a parse tree produced by AcslParser#MultipleExprOrAssign.
AcslListener.prototype.enterMultipleExprOrAssign = function(ctx) {
};

// Exit a parse tree produced by AcslParser#MultipleExprOrAssign.
AcslListener.prototype.exitMultipleExprOrAssign = function(ctx) {
};


// Enter a parse tree produced by AcslParser#ExprExprOrAssign.
AcslListener.prototype.enterExprExprOrAssign = function(ctx) {
};

// Exit a parse tree produced by AcslParser#ExprExprOrAssign.
AcslListener.prototype.exitExprExprOrAssign = function(ctx) {
};


// Enter a parse tree produced by AcslParser#BoolExpr.
AcslListener.prototype.enterBoolExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#BoolExpr.
AcslListener.prototype.exitBoolExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#FloatExpr.
AcslListener.prototype.enterFloatExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#FloatExpr.
AcslListener.prototype.exitFloatExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#IdExpr.
AcslListener.prototype.enterIdExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#IdExpr.
AcslListener.prototype.exitIdExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#SubExpr.
AcslListener.prototype.enterSubExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#SubExpr.
AcslListener.prototype.exitSubExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#ExpExpr.
AcslListener.prototype.enterExpExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#ExpExpr.
AcslListener.prototype.exitExpExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#InfixExpr.
AcslListener.prototype.enterInfixExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#InfixExpr.
AcslListener.prototype.exitInfixExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#UnaryExpr.
AcslListener.prototype.enterUnaryExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#UnaryExpr.
AcslListener.prototype.exitUnaryExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#MulDivExpr.
AcslListener.prototype.enterMulDivExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#MulDivExpr.
AcslListener.prototype.exitMulDivExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#StrExpr.
AcslListener.prototype.enterStrExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#StrExpr.
AcslListener.prototype.exitStrExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#NotExpr.
AcslListener.prototype.enterNotExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#NotExpr.
AcslListener.prototype.exitNotExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#IntExpr.
AcslListener.prototype.enterIntExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#IntExpr.
AcslListener.prototype.exitIntExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#AddSubExpr.
AcslListener.prototype.enterAddSubExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#AddSubExpr.
AcslListener.prototype.exitAddSubExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#FnExpr.
AcslListener.prototype.enterFnExpr = function(ctx) {
};

// Exit a parse tree produced by AcslParser#FnExpr.
AcslListener.prototype.exitFnExpr = function(ctx) {
};


// Enter a parse tree produced by AcslParser#comment.
AcslListener.prototype.enterComment = function(ctx) {
};

// Exit a parse tree produced by AcslParser#comment.
AcslListener.prototype.exitComment = function(ctx) {
};



module.exports.AcslListener = AcslListener;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

// Generated from Acsl.g4 by ANTLR 4.6
// jshint ignore: start
var antlr4 = __webpack_require__(25);

// This class defines a complete generic visitor for a parse tree produced by AcslParser.

function AcslVisitor() {
	antlr4.tree.ParseTreeVisitor.call(this);
	//return this;
}

AcslVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);
AcslVisitor.prototype.constructor = AcslVisitor;

// Visit a parse tree produced by AcslParser#HeadedProgramWithComments.
AcslVisitor.prototype.visitHeadedProgramWithComments = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#HeadedProgramWithoutComments.
AcslVisitor.prototype.visitHeadedProgramWithoutComments = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#ProgramWithComments.
AcslVisitor.prototype.visitProgramWithComments = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#ProgramWithoutComments.
AcslVisitor.prototype.visitProgramWithoutComments = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#program.
AcslVisitor.prototype.visitProgram = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#statement.
AcslVisitor.prototype.visitStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#DiscreteWithComment.
AcslVisitor.prototype.visitDiscreteWithComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#DiscreteWithoutCommment.
AcslVisitor.prototype.visitDiscreteWithoutCommment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#interval.
AcslVisitor.prototype.visitInterval = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#InitialWithComment.
AcslVisitor.prototype.visitInitialWithComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#InitialWithoutComment.
AcslVisitor.prototype.visitInitialWithoutComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#TerminalWithComment.
AcslVisitor.prototype.visitTerminalWithComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#TerminalWithoutComment.
AcslVisitor.prototype.visitTerminalWithoutComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#constant.
AcslVisitor.prototype.visitConstant = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#schedule.
AcslVisitor.prototype.visitSchedule = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#DynamicWithComment.
AcslVisitor.prototype.visitDynamicWithComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#DynamicWithoutComment.
AcslVisitor.prototype.visitDynamicWithoutComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#algorithm.
AcslVisitor.prototype.visitAlgorithm = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#maxterval.
AcslVisitor.prototype.visitMaxterval = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#minterval.
AcslVisitor.prototype.visitMinterval = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#cinterval.
AcslVisitor.prototype.visitCinterval = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#nsteps.
AcslVisitor.prototype.visitNsteps = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#DerivativeWithComment.
AcslVisitor.prototype.visitDerivativeWithComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#DerivativeWithoutComment.
AcslVisitor.prototype.visitDerivativeWithoutComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#IfBlock.
AcslVisitor.prototype.visitIfBlock = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#ElseIfEndBlockEnd.
AcslVisitor.prototype.visitElseIfEndBlockEnd = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#ElseIfEndBlockElseIf.
AcslVisitor.prototype.visitElseIfEndBlockElseIf = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#ElseIfEndBlockElse.
AcslVisitor.prototype.visitElseIfEndBlockElse = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#ThenBlock.
AcslVisitor.prototype.visitThenBlock = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#IfLogical.
AcslVisitor.prototype.visitIfLogical = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#table.
AcslVisitor.prototype.visitTable = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#parameter.
AcslVisitor.prototype.visitParameter = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#DoContinueIncr.
AcslVisitor.prototype.visitDoContinueIncr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#DoContinue.
AcslVisitor.prototype.visitDoContinue = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#GoTo.
AcslVisitor.prototype.visitGoTo = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#LabelStatement.
AcslVisitor.prototype.visitLabelStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#LabelContinue.
AcslVisitor.prototype.visitLabelContinue = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#call.
AcslVisitor.prototype.visitCall = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#variable.
AcslVisitor.prototype.visitVariable = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#DimensionType.
AcslVisitor.prototype.visitDimensionType = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#RealType.
AcslVisitor.prototype.visitRealType = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#DoublePrecisionType.
AcslVisitor.prototype.visitDoublePrecisionType = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#IntegerType.
AcslVisitor.prototype.visitIntegerType = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#LogicalType.
AcslVisitor.prototype.visitLogicalType = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#CharacterType.
AcslVisitor.prototype.visitCharacterType = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#ProceduralWithComment.
AcslVisitor.prototype.visitProceduralWithComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#ProceduralWithoutComment.
AcslVisitor.prototype.visitProceduralWithoutComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#AssignExprOrAssignWithComment.
AcslVisitor.prototype.visitAssignExprOrAssignWithComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#AssignExprOrAssign.
AcslVisitor.prototype.visitAssignExprOrAssign = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#ListExprOrAssignWithComment.
AcslVisitor.prototype.visitListExprOrAssignWithComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#ListExprOrAssign.
AcslVisitor.prototype.visitListExprOrAssign = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#MultipleExprOrAssignWithComment.
AcslVisitor.prototype.visitMultipleExprOrAssignWithComment = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#MultipleExprOrAssign.
AcslVisitor.prototype.visitMultipleExprOrAssign = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#ExprExprOrAssign.
AcslVisitor.prototype.visitExprExprOrAssign = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#BoolExpr.
AcslVisitor.prototype.visitBoolExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#FloatExpr.
AcslVisitor.prototype.visitFloatExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#IdExpr.
AcslVisitor.prototype.visitIdExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#SubExpr.
AcslVisitor.prototype.visitSubExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#ExpExpr.
AcslVisitor.prototype.visitExpExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#InfixExpr.
AcslVisitor.prototype.visitInfixExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#UnaryExpr.
AcslVisitor.prototype.visitUnaryExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#MulDivExpr.
AcslVisitor.prototype.visitMulDivExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#StrExpr.
AcslVisitor.prototype.visitStrExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#NotExpr.
AcslVisitor.prototype.visitNotExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#IntExpr.
AcslVisitor.prototype.visitIntExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#AddSubExpr.
AcslVisitor.prototype.visitAddSubExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#FnExpr.
AcslVisitor.prototype.visitFnExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by AcslParser#comment.
AcslVisitor.prototype.visitComment = function(ctx) {
  return this.visitChildren(ctx);
};



module.exports.AcslVisitor = AcslVisitor;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

exports.AcslLexer = __webpack_require__(150).AcslLexer;
exports.AcslListener = __webpack_require__(73).AcslListener;
exports.AcslParser = __webpack_require__(151).AcslParser;
exports.AcslVisitor = __webpack_require__(74).AcslVisitor;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(4).Token;

// Vacuum all input from a string and then treat it like a buffer.

function _loadString(stream) {
	stream._index = 0;
	stream.data = [];
	for (var i = 0; i < stream.strdata.length; i++) {
		stream.data.push(stream.strdata.charCodeAt(i));
	}
	stream._size = stream.data.length;
}

function InputStream(data) {
	this.name = "<empty>";
	this.strdata = data;
	_loadString(this);
	return this;
}

Object.defineProperty(InputStream.prototype, "index", {
	get : function() {
		return this._index;
	}
});

Object.defineProperty(InputStream.prototype, "size", {
	get : function() {
		return this._size;
	}
});

// Reset the stream so that it's in the same state it was
// when the object was created *except* the data array is not
// touched.
//
InputStream.prototype.reset = function() {
	this._index = 0;
};

InputStream.prototype.consume = function() {
	if (this._index >= this._size) {
		// assert this.LA(1) == Token.EOF
		throw ("cannot consume EOF");
	}
	this._index += 1;
};

InputStream.prototype.LA = function(offset) {
	if (offset === 0) {
		return 0; // undefined
	}
	if (offset < 0) {
		offset += 1; // e.g., translate LA(-1) to use offset=0
	}
	var pos = this._index + offset - 1;
	if (pos < 0 || pos >= this._size) { // invalid
		return Token.EOF;
	}
	return this.data[pos];
};

InputStream.prototype.LT = function(offset) {
	return this.LA(offset);
};

// mark/release do nothing; we have entire buffer
InputStream.prototype.mark = function() {
	return -1;
};

InputStream.prototype.release = function(marker) {
};

// consume() ahead until p==_index; can't just set p=_index as we must
// update line and column. If we seek backwards, just set p
//
InputStream.prototype.seek = function(_index) {
	if (_index <= this._index) {
		this._index = _index; // just jump; don't update stream state (line,
								// ...)
		return;
	}
	// seek forward
	this._index = Math.min(_index, this._size);
};

InputStream.prototype.getText = function(start, stop) {
	if (stop >= this._size) {
		stop = this._size - 1;
	}
	if (start >= this._size) {
		return "";
	} else {
		return this.strdata.slice(start, stop + 1);
	}
};

InputStream.prototype.toString = function() {
	return this.strdata;
};

exports.InputStream = InputStream;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(4).Token;
var ConsoleErrorListener = __webpack_require__(36).ConsoleErrorListener;
var ProxyErrorListener = __webpack_require__(36).ProxyErrorListener;

function Recognizer() {
    this._listeners = [ ConsoleErrorListener.INSTANCE ];
    this._interp = null;
    this._stateNumber = -1;
    return this;
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};


Recognizer.prototype.checkVersion = function(toolVersion) {
    var runtimeVersion = "4.6";
    if (runtimeVersion!==toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
    }
};

Recognizer.prototype.addErrorListener = function(listener) {
    this._listeners.push(listener);
};

Recognizer.prototype.removeErrorListeners = function() {
    this._listeners = [];
};

Recognizer.prototype.getTokenTypeMap = function() {
    var tokenNames = this.getTokenNames();
    if (tokenNames===null) {
        throw("The current recognizer does not provide a list of token names.");
    }
    var result = this.tokenTypeMapCache[tokenNames];
    if(result===undefined) {
        result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
        result.EOF = Token.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
    }
    return result;
};

// Get a map from rule names to rule indexes.
//
// <p>Used for XPath and tree pattern compilation.</p>
//
Recognizer.prototype.getRuleIndexMap = function() {
    var ruleNames = this.ruleNames;
    if (ruleNames===null) {
        throw("The current recognizer does not provide a list of rule names.");
    }
    var result = this.ruleIndexMapCache[ruleNames];
    if(result===undefined) {
        result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
        this.ruleIndexMapCache[ruleNames] = result;
    }
    return result;
};

Recognizer.prototype.getTokenType = function(tokenName) {
    var ttype = this.getTokenTypeMap()[tokenName];
    if (ttype !==undefined) {
        return ttype;
    } else {
        return Token.INVALID_TYPE;
    }
};


// What is the error header, normally line/character position information?//
Recognizer.prototype.getErrorHeader = function(e) {
    var line = e.getOffendingToken().line;
    var column = e.getOffendingToken().column;
    return "line " + line + ":" + column;
};


// How should a token be displayed in an error message? The default
//  is to display just the text, but during development you might
//  want to have a lot of information spit out.  Override in that case
//  to use t.toString() (which, for CommonToken, dumps everything about
//  the token). This is better than forcing you to override a method in
//  your token objects because you don't have to go modify your lexer
//  so that it creates a new Java type.
//
// @deprecated This method is not called by the ANTLR 4 Runtime. Specific
// implementations of {@link ANTLRErrorStrategy} may provide a similar
// feature when necessary. For example, see
// {@link DefaultErrorStrategy//getTokenErrorDisplay}.
//
Recognizer.prototype.getTokenErrorDisplay = function(t) {
    if (t===null) {
        return "<no token>";
    }
    var s = t.text;
    if (s===null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
    return "'" + s + "'";
};

Recognizer.prototype.getErrorListenerDispatch = function() {
    return new ProxyErrorListener(this._listeners);
};

// subclass needs to override these if there are sempreds or actions
// that the ATN interp needs to execute
Recognizer.prototype.sempred = function(localctx, ruleIndex, actionIndex) {
    return true;
};

Recognizer.prototype.precpred = function(localctx , precedence) {
    return true;
};

//Indicate that the recognizer has changed internal state that is
//consistent with the ATN state passed in.  This way we always know
//where we are in the ATN as the parser goes along. The rule
//context objects form a stack that lets us see the stack of
//invoking rules. Combine this and we have complete ATN
//configuration information.

Object.defineProperty(Recognizer.prototype, "state", {
	get : function() {
		return this._stateNumber;
	},
	set : function(state) {
		this._stateNumber = state;
	}
});


exports.Recognizer = Recognizer;


/***/ }),
/* 78 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function ATNDeserializationOptions(copyFrom) {
	if(copyFrom===undefined) {
		copyFrom = null;
	}
	this.readOnly = false;
    this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
    this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;

    return this;
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

exports.ATNDeserializationOptions = ATNDeserializationOptions;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = __webpack_require__(4).Token;
var ATN = __webpack_require__(15).ATN;
var ATNType = __webpack_require__(158).ATNType;
var ATNStates = __webpack_require__(10);
var ATNState = ATNStates.ATNState;
var BasicState = ATNStates.BasicState;
var DecisionState = ATNStates.DecisionState;
var BlockStartState = ATNStates.BlockStartState;
var BlockEndState = ATNStates.BlockEndState;
var LoopEndState = ATNStates.LoopEndState;
var RuleStartState = ATNStates.RuleStartState;
var RuleStopState = ATNStates.RuleStopState;
var TokensStartState = ATNStates.TokensStartState;
var PlusLoopbackState = ATNStates.PlusLoopbackState;
var StarLoopbackState = ATNStates.StarLoopbackState;
var StarLoopEntryState = ATNStates.StarLoopEntryState;
var PlusBlockStartState = ATNStates.PlusBlockStartState;
var StarBlockStartState = ATNStates.StarBlockStartState;
var BasicBlockStartState = ATNStates.BasicBlockStartState;
var Transitions = __webpack_require__(16);
var Transition = Transitions.Transition;
var AtomTransition = Transitions.AtomTransition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var RangeTransition = Transitions.RangeTransition;
var ActionTransition = Transitions.ActionTransition;
var EpsilonTransition = Transitions.EpsilonTransition;
var WildcardTransition = Transitions.WildcardTransition;
var PredicateTransition = Transitions.PredicateTransition;
var PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;
var IntervalSet = __webpack_require__(7).IntervalSet;
var Interval = __webpack_require__(7).Interval;
var ATNDeserializationOptions = __webpack_require__(78).ATNDeserializationOptions;
var LexerActions = __webpack_require__(81);
var LexerActionType = LexerActions.LexerActionType;
var LexerSkipAction = LexerActions.LexerSkipAction;
var LexerChannelAction = LexerActions.LexerChannelAction;
var LexerCustomAction = LexerActions.LexerCustomAction;
var LexerMoreAction = LexerActions.LexerMoreAction;
var LexerTypeAction = LexerActions.LexerTypeAction;
var LexerPushModeAction = LexerActions.LexerPushModeAction;
var LexerPopModeAction = LexerActions.LexerPopModeAction;
var LexerModeAction = LexerActions.LexerModeAction;
// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
var BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
var SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID ];

var SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
var SERIALIZED_UUID = BASE_SERIALIZED_UUID;

function initArray( length, value) {
	var tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

function ATNDeserializer (options) {

    if ( options=== undefined || options === null ) {
        options = ATNDeserializationOptions.defaultOptions;
    }
    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;

    return this;
}

// Determines if a particular serialized representation of an ATN supports
// a particular feature, identified by the {@link UUID} used for serializing
// the ATN at the time the feature was first introduced.
//
// @param feature The {@link UUID} marking the first time the feature was
// supported in the serialized ATN.
// @param actualUuid The {@link UUID} of the actual serialized ATN which is
// currently being deserialized.
// @return {@code true} if the {@code actualUuid} value represents a
// serialized ATN at or after the feature identified by {@code feature} was
// introduced; otherwise, {@code false}.

ATNDeserializer.prototype.isFeatureSupported = function(feature, actualUuid) {
    var idx1 = SUPPORTED_UUIDS.index(feature);
    if (idx1<0) {
        return false;
    }
    var idx2 = SUPPORTED_UUIDS.index(actualUuid);
    return idx2 >= idx1;
};

ATNDeserializer.prototype.deserialize = function(data) {
    this.reset(data);
    this.checkVersion();
    this.checkUUID();
    var atn = this.readATN();
    this.readStates(atn);
    this.readRules(atn);
    this.readModes(atn);
    var sets = this.readSets(atn);
    this.readEdges(atn, sets);
    this.readDecisions(atn);
    this.readLexerActions(atn);
    this.markPrecedenceDecisions(atn);
    this.verifyATN(atn);
    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
        this.generateRuleBypassTransitions(atn);
        // re-verify after modification
        this.verifyATN(atn);
    }
    return atn;
};

ATNDeserializer.prototype.reset = function(data) {
	var adjust = function(c) {
        var v = c.charCodeAt(0);
        return v>1  ? v-2 : -1;
	};
    var temp = data.split("").map(adjust);
    // don't adjust the first value since that's the version number
    temp[0] = data.charCodeAt(0);
    this.data = temp;
    this.pos = 0;
};

ATNDeserializer.prototype.checkVersion = function() {
    var version = this.readInt();
    if ( version !== SERIALIZED_VERSION ) {
        throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
    }
};

ATNDeserializer.prototype.checkUUID = function() {
    var uuid = this.readUUID();
    if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
        throw ("Could not deserialize ATN with UUID: " + uuid +
                        " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
    }
    this.uuid = uuid;
};

ATNDeserializer.prototype.readATN = function() {
    var grammarType = this.readInt();
    var maxTokenType = this.readInt();
    return new ATN(grammarType, maxTokenType);
};

ATNDeserializer.prototype.readStates = function(atn) {
	var j, pair, stateNumber;
    var loopBackStateNumbers = [];
    var endStateNumbers = [];
    var nstates = this.readInt();
    for(var i=0; i<nstates; i++) {
        var stype = this.readInt();
        // ignore bad type of states
        if (stype===ATNState.INVALID_TYPE) {
            atn.addState(null);
            continue;
        }
        var ruleIndex = this.readInt();
        if (ruleIndex === 0xFFFF) {
            ruleIndex = -1;
        }
        var s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNState.LOOP_END) { // special case
            var loopBackStateNumber = this.readInt();
            loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if(s instanceof BlockStartState) {
            var endStateNumber = this.readInt();
            endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
    }
    // delay the assignment of loop back and end states until we know all the
	// state instances have been initialized
    for (j=0; j<loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
    }

    for (j=0; j<endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
    }

    var numNonGreedyStates = this.readInt();
    for (j=0; j<numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
    }

    var numPrecedenceStates = this.readInt();
    for (j=0; j<numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
    }
};

ATNDeserializer.prototype.readRules = function(atn) {
    var i;
    var nrules = this.readInt();
    if (atn.grammarType === ATNType.LEXER ) {
        atn.ruleToTokenType = initArray(nrules, 0);
    }
    atn.ruleToStartState = initArray(nrules, 0);
    for (i=0; i<nrules; i++) {
        var s = this.readInt();
        var startState = atn.states[s];
        atn.ruleToStartState[i] = startState;
        if ( atn.grammarType === ATNType.LEXER ) {
            var tokenType = this.readInt();
            if (tokenType === 0xFFFF) {
                tokenType = Token.EOF;
            }
            atn.ruleToTokenType[i] = tokenType;
        }
    }
    atn.ruleToStopState = initArray(nrules, 0);
    for (i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (!(state instanceof RuleStopState)) {
            continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
    }
};

ATNDeserializer.prototype.readModes = function(atn) {
    var nmodes = this.readInt();
    for (var i=0; i<nmodes; i++) {
        var s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
    }
};

ATNDeserializer.prototype.readSets = function(atn) {
    var sets = [];
    var m = this.readInt();
    for (var i=0; i<m; i++) {
        var iset = new IntervalSet();
        sets.push(iset);
        var n = this.readInt();
        var containsEof = this.readInt();
        if (containsEof!==0) {
            iset.addOne(-1);
        }
        for (var j=0; j<n; j++) {
            var i1 = this.readInt();
            var i2 = this.readInt();
            iset.addRange(i1, i2);
        }
    }
    return sets;
};

ATNDeserializer.prototype.readEdges = function(atn, sets) {
	var i, j, state, trans, target;
    var nedges = this.readInt();
    for (i=0; i<nedges; i++) {
        var src = this.readInt();
        var trg = this.readInt();
        var ttype = this.readInt();
        var arg1 = this.readInt();
        var arg2 = this.readInt();
        var arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        var srcState = atn.states[src];
        srcState.addTransition(trans);
    }
    // edges for rule stop states can be derived, so they aren't serialized
    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for (j=0; j<state.transitions.length; j++) {
            var t = state.transitions[j];
            if (!(t instanceof RuleTransition)) {
                continue;
            }
			var outermostPrecedenceReturn = -1;
			if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
				if (t.precedence === 0) {
					outermostPrecedenceReturn = t.target.ruleIndex;
				}
			}

			trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
    }

    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        if (state instanceof BlockStartState) {
            // we need to know the end state to set its start state
            if (state.endState === null) {
                throw ("IllegalState");
            }
            // block end states can only be associated to a single block start
			// state
            if ( state.endState.startState !== null) {
                throw ("IllegalState");
            }
            state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof PlusBlockStartState) {
                    target.loopBackState = state;
                }
            }
        } else if (state instanceof StarLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof StarLoopEntryState) {
                    target.loopBackState = state;
                }
            }
        }
    }
};

ATNDeserializer.prototype.readDecisions = function(atn) {
    var ndecisions = this.readInt();
    for (var i=0; i<ndecisions; i++) {
        var s = this.readInt();
        var decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
    }
};

ATNDeserializer.prototype.readLexerActions = function(atn) {
    if (atn.grammarType === ATNType.LEXER) {
        var count = this.readInt();
        atn.lexerActions = initArray(count, null);
        for (var i=0; i<count; i++) {
            var actionType = this.readInt();
            var data1 = this.readInt();
            if (data1 === 0xFFFF) {
                data1 = -1;
            }
            var data2 = this.readInt();
            if (data2 === 0xFFFF) {
                data2 = -1;
            }
            var lexerAction = this.lexerActionFactory(actionType, data1, data2);
            atn.lexerActions[i] = lexerAction;
        }
    }
};

ATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) {
	var i;
    var count = atn.ruleToStartState.length;
    for(i=0; i<count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
    }
    for(i=0; i<count; i++) {
        this.generateRuleBypassTransition(atn, i);
    }
};

ATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) {
	var i, state;
    var bypassStart = new BasicBlockStartState();
    bypassStart.ruleIndex = idx;
    atn.addState(bypassStart);

    var bypassStop = new BlockEndState();
    bypassStop.ruleIndex = idx;
    atn.addState(bypassStop);

    bypassStart.endState = bypassStop;
    atn.defineDecisionState(bypassStart);

    bypassStop.startState = bypassStart;

    var excludeTransition = null;
    var endState = null;

    if (atn.ruleToStartState[idx].isPrecedenceRule) {
        // wrap from the beginning of the rule to the StarLoopEntryState
        endState = null;
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (this.stateIsEndStateFor(state, idx)) {
                endState = state;
                excludeTransition = state.loopBackState.transitions[0];
                break;
            }
        }
        if (excludeTransition === null) {
            throw ("Couldn't identify final state of the precedence rule prefix section.");
        }
    } else {
        endState = atn.ruleToStopState[idx];
    }

    // all non-excluded transitions that currently target end state need to
	// target blockEnd instead
    for(i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for(var j=0; j<state.transitions.length; j++) {
            var transition = state.transitions[j];
            if (transition === excludeTransition) {
                continue;
            }
            if (transition.target === endState) {
                transition.target = bypassStop;
            }
        }
    }

    // all transitions leaving the rule start state need to leave blockStart
	// instead
    var ruleToStartState = atn.ruleToStartState[idx];
    var count = ruleToStartState.transitions.length;
    while ( count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count-1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
    }
    // link the new states
    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
    bypassStop.addTransition(new EpsilonTransition(endState));

    var matchState = new BasicState();
    atn.addState(matchState);
    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
    bypassStart.addTransition(new EpsilonTransition(matchState));
};

ATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) {
    if ( state.ruleIndex !== idx) {
        return null;
    }
    if (!( state instanceof StarLoopEntryState)) {
        return null;
    }
    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
    if (!( maybeLoopEndState instanceof LoopEndState)) {
        return null;
    }
    if (maybeLoopEndState.epsilonOnlyTransitions &&
        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
        return state;
    } else {
        return null;
    }
};

//
// Analyze the {@link StarLoopEntryState} states in the specified ATN to set
// the {@link StarLoopEntryState//isPrecedenceDecision} field to the
// correct value.
//
// @param atn The ATN.
//
ATNDeserializer.prototype.markPrecedenceDecisions = function(atn) {
	for(var i=0; i<atn.states.length; i++) {
		var state = atn.states[i];
		if (!( state instanceof StarLoopEntryState)) {
            continue;
        }
        // We analyze the ATN to determine if this ATN decision state is the
        // decision for the closure block that determines whether a
        // precedence rule should continue or complete.
        //
        if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
            if (maybeLoopEndState instanceof LoopEndState) {
                if ( maybeLoopEndState.epsilonOnlyTransitions &&
                        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                    state.isPrecedenceDecision = true;
                }
            }
        }
	}
};

ATNDeserializer.prototype.verifyATN = function(atn) {
    if (!this.deserializationOptions.verifyATN) {
        return;
    }
    // verify assumptions
	for(var i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (state === null) {
            continue;
        }
        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
        if (state instanceof PlusBlockStartState) {
            this.checkCondition(state.loopBackState !== null);
        } else  if (state instanceof StarLoopEntryState) {
            this.checkCondition(state.loopBackState !== null);
            this.checkCondition(state.transitions.length === 2);
            if (state.transitions[0].target instanceof StarBlockStartState) {
                this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                this.checkCondition(!state.nonGreedy);
            } else if (state.transitions[0].target instanceof LoopEndState) {
                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                this.checkCondition(state.nonGreedy);
            } else {
                throw("IllegalState");
            }
        } else if (state instanceof StarLoopbackState) {
            this.checkCondition(state.transitions.length === 1);
            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
        } else if (state instanceof LoopEndState) {
            this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof RuleStartState) {
            this.checkCondition(state.stopState !== null);
        } else if (state instanceof BlockStartState) {
            this.checkCondition(state.endState !== null);
        } else if (state instanceof BlockEndState) {
            this.checkCondition(state.startState !== null);
        } else if (state instanceof DecisionState) {
            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
            this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
        }
	}
};

ATNDeserializer.prototype.checkCondition = function(condition, message) {
    if (!condition) {
        if (message === undefined || message===null) {
            message = "IllegalState";
        }
        throw (message);
    }
};

ATNDeserializer.prototype.readInt = function() {
    return this.data[this.pos++];
};

ATNDeserializer.prototype.readInt32 = function() {
    var low = this.readInt();
    var high = this.readInt();
    return low | (high << 16);
};

ATNDeserializer.prototype.readLong = function() {
    var low = this.readInt32();
    var high = this.readInt32();
    return (low & 0x00000000FFFFFFFF) | (high << 32);
};

function createByteToHex() {
	var bth = [];
	for (var i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

var byteToHex = createByteToHex();

ATNDeserializer.prototype.readUUID = function() {
	var bb = [];
	for(var i=7;i>=0;i--) {
		var int = this.readInt();
		/* jshint bitwise: false */
		bb[(2*i)+1] = int & 0xFF;
		bb[2*i] = (int >> 8) & 0xFF;
	}
    return byteToHex[bb[0]] + byteToHex[bb[1]] +
    byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
    byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
    byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
    byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
    byteToHex[bb[10]] + byteToHex[bb[11]] +
    byteToHex[bb[12]] + byteToHex[bb[13]] +
    byteToHex[bb[14]] + byteToHex[bb[15]];
};

ATNDeserializer.prototype.edgeFactory = function(atn, type, src, trg, arg1, arg2, arg3, sets) {
    var target = atn.states[trg];
    switch(type) {
    case Transition.EPSILON:
        return new EpsilonTransition(target);
    case Transition.RANGE:
        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
    case Transition.RULE:
        return new RuleTransition(atn.states[arg1], arg2, arg3, target);
    case Transition.PREDICATE:
        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.PRECEDENCE:
        return new PrecedencePredicateTransition(target, arg1);
    case Transition.ATOM:
        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
    case Transition.ACTION:
        return new ActionTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.SET:
        return new SetTransition(target, sets[arg1]);
    case Transition.NOT_SET:
        return new NotSetTransition(target, sets[arg1]);
    case Transition.WILDCARD:
        return new WildcardTransition(target);
    default:
        throw "The specified transition type: " + type + " is not valid.";
    }
};

ATNDeserializer.prototype.stateFactory = function(type, ruleIndex) {
    if (this.stateFactories === null) {
        var sf = [];
        sf[ATNState.INVALID_TYPE] = null;
        sf[ATNState.BASIC] = function() { return new BasicState(); };
        sf[ATNState.RULE_START] = function() { return new RuleStartState(); };
        sf[ATNState.BLOCK_START] = function() { return new BasicBlockStartState(); };
        sf[ATNState.PLUS_BLOCK_START] = function() { return new PlusBlockStartState(); };
        sf[ATNState.STAR_BLOCK_START] = function() { return new StarBlockStartState(); };
        sf[ATNState.TOKEN_START] = function() { return new TokensStartState(); };
        sf[ATNState.RULE_STOP] = function() { return new RuleStopState(); };
        sf[ATNState.BLOCK_END] = function() { return new BlockEndState(); };
        sf[ATNState.STAR_LOOP_BACK] = function() { return new StarLoopbackState(); };
        sf[ATNState.STAR_LOOP_ENTRY] = function() { return new StarLoopEntryState(); };
        sf[ATNState.PLUS_LOOP_BACK] = function() { return new PlusLoopbackState(); };
        sf[ATNState.LOOP_END] = function() { return new LoopEndState(); };
        this.stateFactories = sf;
    }
    if (type>this.stateFactories.length || this.stateFactories[type] === null) {
        throw("The specified state type " + type + " is not valid.");
    } else {
        var s = this.stateFactories[type]();
        if (s!==null) {
            s.ruleIndex = ruleIndex;
            return s;
        }
    }
};

ATNDeserializer.prototype.lexerActionFactory = function(type, data1, data2) {
    if (this.actionFactories === null) {
        var af = [];
        af[LexerActionType.CHANNEL] = function(data1, data2) { return new LexerChannelAction(data1); };
        af[LexerActionType.CUSTOM] = function(data1, data2) { return new LexerCustomAction(data1, data2); };
        af[LexerActionType.MODE] = function(data1, data2) { return new LexerModeAction(data1); };
        af[LexerActionType.MORE] = function(data1, data2) { return LexerMoreAction.INSTANCE; };
        af[LexerActionType.POP_MODE] = function(data1, data2) { return LexerPopModeAction.INSTANCE; };
        af[LexerActionType.PUSH_MODE] = function(data1, data2) { return new LexerPushModeAction(data1); };
        af[LexerActionType.SKIP] = function(data1, data2) { return LexerSkipAction.INSTANCE; };
        af[LexerActionType.TYPE] = function(data1, data2) { return new LexerTypeAction(data1); };
        this.actionFactories = af;
    }
    if (type>this.actionFactories.length || this.actionFactories[type] === null) {
        throw("The specified lexer action type " + type + " is not valid.");
    } else {
        return this.actionFactories[type](data1, data2);
    }
};


exports.ATNDeserializer = ATNDeserializer;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var DFAState = __webpack_require__(24).DFAState;
var ATNConfigSet = __webpack_require__(20).ATNConfigSet;
var getCachedPredictionContext = __webpack_require__(13).getCachedPredictionContext;

function ATNSimulator(atn, sharedContextCache) {

    // The context cache maps all PredictionContext objects that are ==
    //  to a single cached copy. This cache is shared across all contexts
    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
    //  to use only cached nodes/graphs in addDFAState(). We don't want to
    //  fill this during closure() since there are lots of contexts that
    //  pop up but are not used ever again. It also greatly slows down closure().
    //
    //  <p>This cache makes a huge difference in memory and a little bit in speed.
    //  For the Java grammar on java.*, it dropped the memory requirements
    //  at the end from 25M to 16M. We don't store any of the full context
    //  graphs in the DFA because they are limited to local context only,
    //  but apparently there's a lot of repetition there as well. We optimize
    //  the config contexts before storing the config set in the DFA states
    //  by literally rebuilding them with cached subgraphs only.</p>
    //
    //  <p>I tried a cache for use during closure operations, that was
    //  whacked after each adaptivePredict(). It cost a little bit
    //  more time I think and doesn't save on the overall footprint
    //  so it's not worth the complexity.</p>
    ///
    this.atn = atn;
    this.sharedContextCache = sharedContextCache;
    return this;
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


ATNSimulator.prototype.getCachedContext = function(context) {
    if (this.sharedContextCache ===null) {
        return context;
    }
    var visited = {};
    return getCachedPredictionContext(context, this.sharedContextCache, visited);
};

exports.ATNSimulator = ATNSimulator;


/***/ }),
/* 81 */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
 //

function LexerActionType() {
}

LexerActionType.CHANNEL = 0;     //The type of a {@link LexerChannelAction} action.
LexerActionType.CUSTOM = 1;      //The type of a {@link LexerCustomAction} action.
LexerActionType.MODE = 2;        //The type of a {@link LexerModeAction} action.
LexerActionType.MORE = 3;        //The type of a {@link LexerMoreAction} action.
LexerActionType.POP_MODE = 4;    //The type of a {@link LexerPopModeAction} action.
LexerActionType.PUSH_MODE = 5;   //The type of a {@link LexerPushModeAction} action.
LexerActionType.SKIP = 6;        //The type of a {@link LexerSkipAction} action.
LexerActionType.TYPE = 7;        //The type of a {@link LexerTypeAction} action.

function LexerAction(action) {
    this.actionType = action;
    this.isPositionDependent = false;
    return this;
}

LexerAction.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish()
};

LexerAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType);
};

LexerAction.prototype.equals = function(other) {
    return this === other;
};



//
// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
//
// <p>The {@code skip} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerSkipAction() {
	LexerAction.call(this, LexerActionType.SKIP);
	return this;
}

LexerSkipAction.prototype = Object.create(LexerAction.prototype);
LexerSkipAction.prototype.constructor = LexerSkipAction;

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

LexerSkipAction.prototype.execute = function(lexer) {
    lexer.skip();
};

LexerSkipAction.prototype.toString = function() {
	return "skip";
};

//  Implements the {@code type} lexer action by calling {@link Lexer//setType}
// with the assigned type.
function LexerTypeAction(type) {
	LexerAction.call(this, LexerActionType.TYPE);
	this.type = type;
	return this;
}

LexerTypeAction.prototype = Object.create(LexerAction.prototype);
LexerTypeAction.prototype.constructor = LexerTypeAction;

LexerTypeAction.prototype.execute = function(lexer) {
    lexer.type = this.type;
};

LexerTypeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.type);
};


LexerTypeAction.prototype.equals = function(other) {
    if(this === other) {
        return true;
    } else if (! (other instanceof LexerTypeAction)) {
        return false;
    } else {
        return this.type === other.type;
    }
};

LexerTypeAction.prototype.toString = function() {
    return "type(" + this.type + ")";
};

// Implements the {@code pushMode} lexer action by calling
// {@link Lexer//pushMode} with the assigned mode.
function LexerPushModeAction(mode) {
	LexerAction.call(this, LexerActionType.PUSH_MODE);
    this.mode = mode;
    return this;
}

LexerPushModeAction.prototype = Object.create(LexerAction.prototype);
LexerPushModeAction.prototype.constructor = LexerPushModeAction;

// <p>This action is implemented by calling {@link Lexer//pushMode} with the
// value provided by {@link //getMode}.</p>
LexerPushModeAction.prototype.execute = function(lexer) {
    lexer.pushMode(this.mode);
};

LexerPushModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerPushModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerPushModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerPushModeAction.prototype.toString = function() {
	return "pushMode(" + this.mode + ")";
};


// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
//
// <p>The {@code popMode} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerPopModeAction() {
	LexerAction.call(this,LexerActionType.POP_MODE);
	return this;
}

LexerPopModeAction.prototype = Object.create(LexerAction.prototype);
LexerPopModeAction.prototype.constructor = LexerPopModeAction;

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerPopModeAction.prototype.execute = function(lexer) {
    lexer.popMode();
};

LexerPopModeAction.prototype.toString = function() {
	return "popMode";
};

// Implements the {@code more} lexer action by calling {@link Lexer//more}.
//
// <p>The {@code more} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerMoreAction() {
	LexerAction.call(this, LexerActionType.MORE);
	return this;
}

LexerMoreAction.prototype = Object.create(LexerAction.prototype);
LexerMoreAction.prototype.constructor = LexerMoreAction;

LexerMoreAction.INSTANCE = new LexerMoreAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerMoreAction.prototype.execute = function(lexer) {
    lexer.more();
};

LexerMoreAction.prototype.toString = function() {
    return "more";
};


// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
// the assigned mode.
function LexerModeAction(mode) {
	LexerAction.call(this, LexerActionType.MODE);
    this.mode = mode;
    return this;
}

LexerModeAction.prototype = Object.create(LexerAction.prototype);
LexerModeAction.prototype.constructor = LexerModeAction;

// <p>This action is implemented by calling {@link Lexer//mode} with the
// value provided by {@link //getMode}.</p>
LexerModeAction.prototype.execute = function(lexer) {
    lexer.mode(this.mode);
};

LexerModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerModeAction.prototype.toString = function() {
    return "mode(" + this.mode + ")";
};

// Executes a custom lexer action by calling {@link Recognizer//action} with the
// rule and action indexes assigned to the custom action. The implementation of
// a custom action is added to the generated code for the lexer in an override
// of {@link Recognizer//action} when the grammar is compiled.
//
// <p>This class may represent embedded actions created with the <code>{...}</code>
// syntax in ANTLR 4, as well as actions created for lexer commands where the
// command argument could not be evaluated when the grammar was compiled.</p>


    // Constructs a custom lexer action with the specified rule and action
    // indexes.
    //
    // @param ruleIndex The rule index to use for calls to
    // {@link Recognizer//action}.
    // @param actionIndex The action index to use for calls to
    // {@link Recognizer//action}.

function LexerCustomAction(ruleIndex, actionIndex) {
	LexerAction.call(this, LexerActionType.CUSTOM);
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex;
    this.isPositionDependent = true;
    return this;
}

LexerCustomAction.prototype = Object.create(LexerAction.prototype);
LexerCustomAction.prototype.constructor = LexerCustomAction;

// <p>Custom actions are implemented by calling {@link Lexer//action} with the
// appropriate rule and action indexes.</p>
LexerCustomAction.prototype.execute = function(lexer) {
    lexer.action(null, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerCustomAction)) {
        return false;
    } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
    }
};

// Implements the {@code channel} lexer action by calling
// {@link Lexer//setChannel} with the assigned channel.
// Constructs a new {@code channel} action with the specified channel value.
// @param channel The channel value to pass to {@link Lexer//setChannel}.
function LexerChannelAction(channel) {
	LexerAction.call(this, LexerActionType.CHANNEL);
    this.channel = channel;
    return this;
}

LexerChannelAction.prototype = Object.create(LexerAction.prototype);
LexerChannelAction.prototype.constructor = LexerChannelAction;

// <p>This action is implemented by calling {@link Lexer//setChannel} with the
// value provided by {@link //getChannel}.</p>
LexerChannelAction.prototype.execute = function(lexer) {
    lexer._channel = this.channel;
};

LexerChannelAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.channel);
};

LexerChannelAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerChannelAction)) {
        return false;
    } else {
        return this.channel === other.channel;
    }
};

LexerChannelAction.prototype.toString = function() {
    return "channel(" + this.channel + ")";
};

// This implementation of {@link LexerAction} is used for tracking input offsets
// for position-dependent actions within a {@link LexerActionExecutor}.
//
// <p>This action is not serialized as part of the ATN, and is only required for
// position-dependent lexer actions which appear at a location other than the
// end of a rule. For more information about DFA optimizations employed for
// lexer actions, see {@link LexerActionExecutor//append} and
// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>

// Constructs a new indexed custom action by associating a character offset
// with a {@link LexerAction}.
//
// <p>Note: This class is only required for lexer actions for which
// {@link LexerAction//isPositionDependent} returns {@code true}.</p>
//
// @param offset The offset into the input {@link CharStream}, relative to
// the token start index, at which the specified lexer action should be
// executed.
// @param action The lexer action to execute at a particular offset in the
// input {@link CharStream}.
function LexerIndexedCustomAction(offset, action) {
	LexerAction.call(this, action.actionType);
    this.offset = offset;
    this.action = action;
    this.isPositionDependent = true;
    return this;
}

LexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);
LexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;

// <p>This method calls {@link //execute} on the result of {@link //getAction}
// using the provided {@code lexer}.</p>
LexerIndexedCustomAction.prototype.execute = function(lexer) {
    // assume the input stream position was properly set by the calling code
    this.action.execute(lexer);
};

LexerIndexedCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.offset, this.action);
};

LexerIndexedCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerIndexedCustomAction)) {
        return false;
    } else {
        return this.offset === other.offset && this.action === other.action;
    }
};


exports.LexerActionType = LexerActionType;
exports.LexerSkipAction = LexerSkipAction;
exports.LexerChannelAction = LexerChannelAction;
exports.LexerCustomAction = LexerCustomAction;
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
exports.LexerMoreAction = LexerMoreAction;
exports.LexerTypeAction = LexerTypeAction;
exports.LexerPushModeAction = LexerPushModeAction;
exports.LexerPopModeAction = LexerPopModeAction;
exports.LexerModeAction = LexerModeAction;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//
//
// This enumeration defines the prediction modes available in ANTLR 4 along with
// utility methods for analyzing configuration sets for conflicts and/or
// ambiguities.

var Set = __webpack_require__(2).Set;
var Map = __webpack_require__(2).Map;
var BitSet = __webpack_require__(2).BitSet;
var AltDict = __webpack_require__(2).AltDict;
var ATN = __webpack_require__(15).ATN;
var RuleStopState = __webpack_require__(10).RuleStopState;
var ATNConfigSet = __webpack_require__(20).ATNConfigSet;
var ATNConfig = __webpack_require__(34).ATNConfig;
var SemanticContext = __webpack_require__(23).SemanticContext;
var Hash = __webpack_require__(2).Hash;
var hashStuff = __webpack_require__(2).hashStuff;
var equalArrays = __webpack_require__(2).equalArrays;

function PredictionMode() {
	return this;
}

//
// The SLL(*) prediction mode. This prediction mode ignores the current
// parser context when making predictions. This is the fastest prediction
// mode, and provides correct results for many grammars. This prediction
// mode is more powerful than the prediction mode provided by ANTLR 3, but
// may result in syntax errors for grammar and input combinations which are
// not SLL.
//
// <p>
// When using this prediction mode, the parser will either return a correct
// parse tree (i.e. the same parse tree that would be returned with the
// {@link //LL} prediction mode), or it will report a syntax error. If a
// syntax error is encountered when using the {@link //SLL} prediction mode,
// it may be due to either an actual syntax error in the input or indicate
// that the particular combination of grammar and input requires the more
// powerful {@link //LL} prediction abilities to complete successfully.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.SLL = 0;
//
// The LL(*) prediction mode. This prediction mode allows the current parser
// context to be used for resolving SLL conflicts that occur during
// prediction. This is the fastest prediction mode that guarantees correct
// parse results for all combinations of grammars with syntactically correct
// inputs.
//
// <p>
// When using this prediction mode, the parser will make correct decisions
// for all syntactically-correct grammar and input combinations. However, in
// cases where the grammar is truly ambiguous this prediction mode might not
// report a precise answer for <em>exactly which</em> alternatives are
// ambiguous.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL = 1;
//
// The LL(*) prediction mode with exact ambiguity detection. In addition to
// the correctness guarantees provided by the {@link //LL} prediction mode,
// this prediction mode instructs the prediction algorithm to determine the
// complete and exact set of ambiguous alternatives for every ambiguous
// decision encountered while parsing.
//
// <p>
// This prediction mode may be used for diagnosing ambiguities during
// grammar development. Due to the performance overhead of calculating sets
// of ambiguous alternatives, this prediction mode should be avoided when
// the exact results are not necessary.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL_EXACT_AMBIG_DETECTION = 2;


//
// Computes the SLL prediction termination condition.
//
// <p>
// This method computes the SLL prediction termination condition for both of
// the following cases.</p>
//
// <ul>
// <li>The usual SLL+LL fallback upon SLL conflict</li>
// <li>Pure SLL without LL fallback</li>
// </ul>
//
// <p><strong>COMBINED SLL+LL PARSING</strong></p>
//
// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
// ensured regardless of how the termination condition is computed by this
// method. Due to the substantially higher cost of LL prediction, the
// prediction should only fall back to LL when the additional lookahead
// cannot lead to a unique SLL prediction.</p>
//
// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
// conflicting subsets should fall back to full LL, even if the
// configuration sets don't resolve to the same alternative (e.g.
// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
// configuration, SLL could continue with the hopes that more lookahead will
// resolve via one of those non-conflicting configurations.</p>
//
// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
// stops when it sees only conflicting configuration subsets. In contrast,
// full LL keeps going when there is uncertainty.</p>
//
// <p><strong>HEURISTIC</strong></p>
//
// <p>As a heuristic, we stop prediction when we see any conflicting subset
// unless we see a state that only has one alternative associated with it.
// The single-alt-state thing lets prediction continue upon rules like
// (otherwise, it would admit defeat too soon):</p>
//
// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
//
// <p>When the ATN simulation reaches the state before {@code ';'}, it has a
// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
// processing this node because alternative to has another way to continue,
// via {@code [6|2|[]]}.</p>
//
// <p>It also let's us continue for this rule:</p>
//
// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
//
// <p>After matching input A, we reach the stop state for rule A, state 1.
// State 8 is the state right before B. Clearly alternatives 1 and 2
// conflict and no amount of further lookahead will separate the two.
// However, alternative 3 will be able to continue and so we do not stop
// working on this state. In the previous example, we're concerned with
// states associated with the conflicting alternatives. Here alt 3 is not
// associated with the conflicting configs, but since we can continue
// looking for input reasonably, don't declare the state done.</p>
//
// <p><strong>PURE SLL PARSING</strong></p>
//
// <p>To handle pure SLL parsing, all we have to do is make sure that we
// combine stack contexts for configurations that differ only by semantic
// predicate. From there, we can do the usual SLL termination heuristic.</p>
//
// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
//
// <p>SLL decisions don't evaluate predicates until after they reach DFA stop
// states because they need to create the DFA cache that works in all
// semantic situations. In contrast, full LL evaluates predicates collected
// during start state computation so it can ignore predicates thereafter.
// This means that SLL termination detection can totally ignore semantic
// predicates.</p>
//
// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
// semantic predicate contexts so we might see two configurations like the
// following.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
//
// <p>Before testing these configurations against others, we have to merge
// {@code x} and {@code x'} (without modifying the existing configurations).
// For example, we test {@code (x+x')==x''} when looking for conflicts in
// the following configurations.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
//
// <p>If the configuration set has predicates (as indicated by
// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
// the configurations to strip out all of the predicates so that a standard
// {@link ATNConfigSet} will merge everything ignoring predicates.</p>
//
PredictionMode.hasSLLConflictTerminatingPrediction = function( mode, configs) {
    // Configs in rule stop states indicate reaching the end of the decision
    // rule (local context) or end of start rule (full context). If all
    // configs meet this condition, then none of the configurations is able
    // to match additional input so we terminate prediction.
    //
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return true;
    }
    // pure SLL mode parsing
    if (mode === PredictionMode.SLL) {
        // Don't bother with combining configs from different semantic
        // contexts if we can fail over to full LL; costs more time
        // since we'll often fail over anyway.
        if (configs.hasSemanticContext) {
            // dup configs, tossing out semantic predicates
            var dup = new ATNConfigSet();
            for(var i=0;i<configs.items.length;i++) {
            	var c = configs.items[i];
                c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                dup.add(c);
            }
            configs = dup;
        }
        // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
};

// Checks if any configuration in {@code configs} is in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if any configuration in {@code configs} is in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.hasConfigInRuleStopState = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (c.state instanceof RuleStopState) {
            return true;
        }
	}
    return false;
};

// Checks if all configurations in {@code configs} are in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if all configurations in {@code configs} are in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.allConfigsInRuleStopStates = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (!(c.state instanceof RuleStopState)) {
            return false;
        }
	}
    return true;
};

//
// Full LL prediction termination.
//
// <p>Can we stop looking ahead during ATN simulation or is there some
// uncertainty as to which alternative we will ultimately pick, after
// consuming more input? Even if there are partial conflicts, we might know
// that everything is going to resolve to the same minimum alternative. That
// means we can stop since no more lookahead will change that fact. On the
// other hand, there might be multiple conflicts that resolve to different
// minimums. That means we need more look ahead to decide which of those
// alternatives we should predict.</p>
//
// <p>The basic idea is to split the set of configurations {@code C}, into
// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
// non-conflicting configurations. Two configurations conflict if they have
// identical {@link ATNConfig//state} and {@link ATNConfig//context} values
// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
//
// <p>Reduce these configuration subsets to the set of possible alternatives.
// You can compute the alternative subsets in one pass as follows:</p>
//
// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
// {@code C} holding {@code s} and {@code ctx} fixed.</p>
//
// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
//
// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
// {@code s} and {@code ctx}.</p>
//
// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
// the union of these alternative subsets is a singleton, then no amount of
// more lookahead will help us. We will always pick that alternative. If,
// however, there is more than one alternative, then we are uncertain which
// alternative to predict and must continue looking for resolution. We may
// or may not discover an ambiguity in the future, even if there are no
// conflicting subsets this round.</p>
//
// <p>The biggest sin is to terminate early because it means we've made a
// decision but were uncertain as to the eventual outcome. We haven't used
// enough lookahead. On the other hand, announcing a conflict too late is no
// big deal; you will still have the conflict. It's just inefficient. It
// might even look until the end of file.</p>
//
// <p>No special consideration for semantic predicates is required because
// predicates are evaluated on-the-fly for full LL prediction, ensuring that
// no configuration contains a semantic context during the termination
// check.</p>
//
// <p><strong>CONFLICTING CONFIGS</strong></p>
//
// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
// when {@code i!=j} but {@code x=x'}. Because we merge all
// {@code (s, i, _)} configurations together, that means that there are at
// most {@code n} configurations associated with state {@code s} for
// {@code n} possible alternatives in the decision. The merged stacks
// complicate the comparison of configuration contexts {@code x} and
// {@code x'}. Sam checks to see if one is a subset of the other by calling
// merge and checking to see if the merged result is either {@code x} or
// {@code x'}. If the {@code x} associated with lowest alternative {@code i}
// is the superset, then {@code i} is the only possible prediction since the
// others resolve to {@code min(i)} as well. However, if {@code x} is
// associated with {@code j>i} then at least one stack configuration for
// {@code j} is not in conflict with alternative {@code i}. The algorithm
// should keep going, looking for more lookahead due to the uncertainty.</p>
//
// <p>For simplicity, I'm doing a equality check between {@code x} and
// {@code x'} that lets the algorithm continue to consume lookahead longer
// than necessary. The reason I like the equality is of course the
// simplicity but also because that is the test you need to detect the
// alternatives that are actually in conflict.</p>
//
// <p><strong>CONTINUE/STOP RULE</strong></p>
//
// <p>Continue if union of resolved alternative sets from non-conflicting and
// conflicting alternative subsets has more than one alternative. We are
// uncertain about which alternative to predict.</p>
//
// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
// alternatives are still in the running for the amount of input we've
// consumed at this point. The conflicting sets let us to strip away
// configurations that won't lead to more states because we resolve
// conflicts to the configuration with a minimum alternate for the
// conflicting set.</p>
//
// <p><strong>CASES</strong></p>
//
// <ul>
//
// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
//
// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1,3}} =&gt; continue
// </li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1}} =&gt; stop and predict 1</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
// ambiguity {@code {1,2}}</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {2}} = {@code {1,2}} =&gt; continue</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {3}} = {@code {1,3}} =&gt; continue</li>
//
// </ul>
//
// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
//
// <p>If all states report the same conflicting set of alternatives, then we
// know we have the exact ambiguity set.</p>
//
// <p><code>|A_<em>i</em>|&gt;1</code> and
// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
//
// <p>In other words, we continue examining lookahead until all {@code A_i}
// have more than one alternative and all {@code A_i} are the same. If
// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
// because the resolved set is {@code {1}}. To determine what the real
// ambiguity is, we have to know whether the ambiguity is between one and
// two or one and three so we keep going. We can only stop prediction when
// we need exact ambiguity detection when the sets look like
// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
//
PredictionMode.resolvesToJustOneViableAlt = function(altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
};

//
// Determines if every alternative subset in {@code altsets} contains more
// than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every {@link BitSet} in {@code altsets} has
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.allSubsetsConflict = function(altsets) {
    return ! PredictionMode.hasNonConflictingAltSet(altsets);
};
//
// Determines if any single alternative subset in {@code altsets} contains
// exactly one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
//
PredictionMode.hasNonConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length===1) {
            return true;
        }
	}
    return false;
};

//
// Determines if any single alternative subset in {@code altsets} contains
// more than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.hasConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length>1) {
            return true;
        }
	}
    return false;
};

//
// Determines if every alternative subset in {@code altsets} is equivalent.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every member of {@code altsets} is equal to the
// others, otherwise {@code false}
//
PredictionMode.allSubsetsEqual = function(altsets) {
    var first = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (first === null) {
            first = alts;
        } else if (alts!==first) {
            return false;
        }
	}
    return true;
};

//
// Returns the unique alternative predicted by all alternative subsets in
// {@code altsets}. If no such alternative exists, this method returns
// {@link ATN//INVALID_ALT_NUMBER}.
//
// @param altsets a collection of alternative subsets
//
PredictionMode.getUniqueAlt = function(altsets) {
    var all = PredictionMode.getAlts(altsets);
    if (all.length===1) {
        return all.minValue();
    } else {
        return ATN.INVALID_ALT_NUMBER;
    }
};

// Gets the complete set of represented alternatives for a collection of
// alternative subsets. This method returns the union of each {@link BitSet}
// in {@code altsets}.
//
// @param altsets a collection of alternative subsets
// @return the set of represented alternatives in {@code altsets}
//
PredictionMode.getAlts = function(altsets) {
    var all = new BitSet();
    altsets.map( function(alts) { all.or(alts); });
    return all;
};

//
// This function gets the conflicting alt subsets from a configuration set.
// For each configuration {@code c} in {@code configs}:
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>

PredictionMode.getConflictingAltSubsets = function(configs) {
    var configToAlts = new Map();
    configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };
    configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);}
    configs.items.map(function(cfg) {
        var alts = configToAlts.get(cfg);
        if (alts === null) {
            alts = new BitSet();
            configToAlts.put(cfg, alts);
        }
        alts.add(cfg.alt);
	});
    return configToAlts.getValues();
};

//
// Get a map from state to alt subset from a configuration set. For each
// configuration {@code c} in {@code configs}:
//
// <pre>
// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
// </pre>
//
PredictionMode.getStateToAltMap = function(configs) {
    var m = new AltDict();
    configs.items.map(function(c) {
        var alts = m.get(c.state);
        if (alts === null) {
            alts = new BitSet();
            m.put(c.state, alts);
        }
        alts.add(c.alt);
    });
    return m;
};

PredictionMode.hasStateAssociatedWithOneAlt = function(configs) {
    var values = PredictionMode.getStateToAltMap(configs).values();
    for(var i=0;i<values.length;i++) {
        if (values[i].length===1) {
            return true;
        }
    }
    return false;
};

PredictionMode.getSingleViableAlt = function(altsets) {
    var result = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        var minAlt = alts.minValue();
        if(result===null) {
            result = minAlt;
        } else if(result!==minAlt) { // more than 1 viable alt
            return ATN.INVALID_ALT_NUMBER;
        }
	}
    return result;
};

exports.PredictionMode = PredictionMode;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(4).Token;
var Errors = __webpack_require__(11);
var NoViableAltException = Errors.NoViableAltException;
var InputMismatchException = Errors.InputMismatchException;
var FailedPredicateException = Errors.FailedPredicateException;
var ParseCancellationException = Errors.ParseCancellationException;
var ATNState = __webpack_require__(10).ATNState;
var Interval = __webpack_require__(7).Interval;
var IntervalSet = __webpack_require__(7).IntervalSet;

function ErrorStrategy() {

}

ErrorStrategy.prototype.reset = function(recognizer){
};

ErrorStrategy.prototype.recoverInline = function(recognizer){
};

ErrorStrategy.prototype.recover = function(recognizer, e){
};

ErrorStrategy.prototype.sync = function(recognizer){
};

ErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer){
};

ErrorStrategy.prototype.reportError = function(recognizer){
};



// This is the default implementation of {@link ANTLRErrorStrategy} used for
// error reporting and recovery in ANTLR parsers.
//
function DefaultErrorStrategy() {
	ErrorStrategy.call(this);
    // Indicates whether the error strategy is currently "recovering from an
    // error". This is used to suppress reporting multiple error messages while
    // attempting to recover from a detected syntax error.
    //
    // @see //inErrorRecoveryMode
    //
    this.errorRecoveryMode = false;

    // The index into the input stream where the last error occurred.
    // This is used to prevent infinite loops where an error is found
    // but no token is consumed during recovery...another error is found,
    // ad nauseum. This is a failsafe mechanism to guarantee that at least
    // one token/tree node is consumed for two errors.
    //
    this.lastErrorIndex = -1;
    this.lastErrorStates = null;
    return this;
}

DefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);
DefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;

// <p>The default implementation simply calls {@link //endErrorCondition} to
// ensure that the handler is not in error recovery mode.</p>
DefaultErrorStrategy.prototype.reset = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// This method is called to enter error recovery mode when a recognition
// exception is reported.
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) {
    this.errorRecoveryMode = true;
};

DefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) {
    return this.errorRecoveryMode;
};

//
// This method is called to leave error recovery mode after recovering from
// a recognition exception.
//
// @param recognizer
//
DefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) {
    this.errorRecoveryMode = false;
    this.lastErrorStates = null;
    this.lastErrorIndex = -1;
};

//
// {@inheritDoc}
//
// <p>The default implementation simply calls {@link //endErrorCondition}.</p>
//
DefaultErrorStrategy.prototype.reportMatch = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// {@inheritDoc}
//
// <p>The default implementation returns immediately if the handler is already
// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
// and dispatches the reporting task based on the runtime type of {@code e}
// according to the following table.</p>
//
// <ul>
// <li>{@link NoViableAltException}: Dispatches the call to
// {@link //reportNoViableAlternative}</li>
// <li>{@link InputMismatchException}: Dispatches the call to
// {@link //reportInputMismatch}</li>
// <li>{@link FailedPredicateException}: Dispatches the call to
// {@link //reportFailedPredicate}</li>
// <li>All other types: calls {@link Parser//notifyErrorListeners} to report
// the exception</li>
// </ul>
//
DefaultErrorStrategy.prototype.reportError = function(recognizer, e) {
   // if we've already reported an error and have not matched a token
   // yet successfully, don't report any errors.
    if(this.inErrorRecoveryMode(recognizer)) {
        return; // don't report spurious errors
    }
    this.beginErrorCondition(recognizer);
    if ( e instanceof NoViableAltException ) {
        this.reportNoViableAlternative(recognizer, e);
    } else if ( e instanceof InputMismatchException ) {
        this.reportInputMismatch(recognizer, e);
    } else if ( e instanceof FailedPredicateException ) {
        this.reportFailedPredicate(recognizer, e);
    } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
    }
};
//
// {@inheritDoc}
//
// <p>The default implementation resynchronizes the parser by consuming tokens
// until we find one in the resynchronization set--loosely the set of tokens
// that can follow the current rule.</p>
//
DefaultErrorStrategy.prototype.recover = function(recognizer, e) {
    if (this.lastErrorIndex===recognizer.getInputStream().index &&
        this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
		// uh oh, another error at same token index and previously-visited
		// state in ATN; must be a case where LT(1) is in the recovery
		// token set so nothing got consumed. Consume a single token
		// at least to prevent an infinite loop; this is a failsafe.
		recognizer.consume();
    }
    this.lastErrorIndex = recognizer._input.index;
    if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
    }
    this.lastErrorStates.push(recognizer.state);
    var followSet = this.getErrorRecoverySet(recognizer);
    this.consumeUntil(recognizer, followSet);
};

// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
// that the current lookahead symbol is consistent with what were expecting
// at this point in the ATN. You can call this anytime but ANTLR only
// generates code to check before subrules/loops and each iteration.
//
// <p>Implements Jim Idle's magic sync mechanism in closures and optional
// subrules. E.g.,</p>
//
// <pre>
// a : sync ( stuff sync )* ;
// sync : {consume to what can follow sync} ;
// </pre>
//
// At the start of a sub rule upon error, {@link //sync} performs single
// token deletion, if possible. If it can't do that, it bails on the current
// rule and uses the default error recovery, which consumes until the
// resynchronization set of the current rule.
//
// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
// with an empty alternative), then the expected set includes what follows
// the subrule.</p>
//
// <p>During loop iteration, it consumes until it sees a token that can start a
// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
// stay in the loop as long as possible.</p>
//
// <p><strong>ORIGINS</strong></p>
//
// <p>Previous versions of ANTLR did a poor job of their recovery within loops.
// A single mismatch token or missing token would force the parser to bail
// out of the entire rules surrounding the loop. So, for rule</p>
//
// <pre>
// classDef : 'class' ID '{' member* '}'
// </pre>
//
// input with an extra token between members would force the parser to
// consume until it found the next class definition rather than the next
// member definition of the current class.
//
// <p>This functionality cost a little bit of effort because the parser has to
// compare token set at the start of the loop and at each iteration. If for
// some reason speed is suffering for you, you can turn off this
// functionality by simply overriding this method as a blank { }.</p>
//
DefaultErrorStrategy.prototype.sync = function(recognizer) {
    // If already recovering, don't try to sync
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    var s = recognizer._interp.atn.states[recognizer.state];
    var la = recognizer.getTokenStream().LA(1);
    // try cheaper subset first; might get lucky. seems to shave a wee bit off
    if (la===Token.EOF || recognizer.atn.nextTokens(s).contains(la)) {
        return;
    }
    // Return but don't end recovery. only do that upon valid token match
    if(recognizer.isExpectedToken(la)) {
        return;
    }
    switch (s.stateType) {
    case ATNState.BLOCK_START:
    case ATNState.STAR_BLOCK_START:
    case ATNState.PLUS_BLOCK_START:
    case ATNState.STAR_LOOP_ENTRY:
       // report error and recover if possible
        if( this.singleTokenDeletion(recognizer) !== null) {
            return;
        } else {
            throw new InputMismatchException(recognizer);
        }
        break;
    case ATNState.PLUS_LOOP_BACK:
    case ATNState.STAR_LOOP_BACK:
        this.reportUnwantedToken(recognizer);
        var expecting = new IntervalSet();
        expecting.addSet(recognizer.getExpectedTokens());
        var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
        break;
    default:
        // do nothing if we can't identify the exact kind of ATN state
    }
};

// This is called by {@link //reportError} when the exception is a
// {@link NoViableAltException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportNoViableAlternative = function(recognizer, e) {
    var tokens = recognizer.getTokenStream();
    var input;
    if(tokens !== null) {
        if (e.startToken.type===Token.EOF) {
            input = "<EOF>";
        } else {
            input = tokens.getText(new Interval(e.startToken, e.offendingToken));
        }
    } else {
        input = "<unknown input>";
    }
    var msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is an
// {@link InputMismatchException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportInputMismatch = function(recognizer, e) {
    var msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
          " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is a
// {@link FailedPredicateException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportFailedPredicate = function(recognizer, e) {
    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
    var msg = "rule " + ruleName + " " + e.message;
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

// This method is called to report a syntax error which requires the removal
// of a token from the input stream. At the time this method is called, the
// erroneous symbol is current {@code LT(1)} symbol and has not yet been
// removed from the input stream. When this method returns,
// {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenDeletion} identifies
// single-token deletion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportUnwantedToken = function(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var tokenName = this.getTokenErrorDisplay(t);
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "extraneous input " + tokenName + " expecting " +
        expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, t, null);
};
// This method is called to report a syntax error which requires the
// insertion of a missing token into the input stream. At the time this
// method is called, the missing token has not yet been inserted. When this
// method returns, {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenInsertion} identifies
// single-token insertion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportMissingToken = function(recognizer) {
    if ( this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
          " at " + this.getTokenErrorDisplay(t);
    recognizer.notifyErrorListeners(msg, t, null);
};

// <p>The default implementation attempts to recover from the mismatched input
// by using single token insertion and deletion as described below. If the
// recovery attempt fails, this method throws an
// {@link InputMismatchException}.</p>
//
// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
//
// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
// right token, however, then assume {@code LA(1)} is some extra spurious
// token and delete it. Then consume and return the next token (which was
// the {@code LA(2)} token) as the successful result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenDeletion}.</p>
//
// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
//
// <p>If current token (at {@code LA(1)}) is consistent with what could come
// after the expected {@code LA(1)} token, then assume the token is missing
// and use the parser's {@link TokenFactory} to create it on the fly. The
// "insertion" is performed by returning the created token as the successful
// result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenInsertion}.</p>
//
// <p><strong>EXAMPLE</strong></p>
//
// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
// the parser returns from the nested call to {@code expr}, it will have
// call chain:</p>
//
// <pre>
// stat &rarr; expr &rarr; atom
// </pre>
//
// and it will be trying to match the {@code ')'} at this point in the
// derivation:
//
// <pre>
// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
// ^
// </pre>
//
// The attempt to match {@code ')'} will fail when it sees {@code ';'} and
// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
// is in the set of tokens that can follow the {@code ')'} token reference
// in rule {@code atom}. It can assume that you forgot the {@code ')'}.
//
DefaultErrorStrategy.prototype.recoverInline = function(recognizer) {
    // SINGLE TOKEN DELETION
    var matchedSymbol = this.singleTokenDeletion(recognizer);
    if (matchedSymbol !== null) {
        // we have deleted the extra token.
        // now, move past ttype token as if all were ok
        recognizer.consume();
        return matchedSymbol;
    }
    // SINGLE TOKEN INSERTION
    if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
    }
    // even that didn't work; must throw the exception
    throw new InputMismatchException(recognizer);
};

//
// This method implements the single-token insertion inline error recovery
// strategy. It is called by {@link //recoverInline} if the single-token
// deletion strategy fails to recover from the mismatched input. If this
// method returns {@code true}, {@code recognizer} will be in error recovery
// mode.
//
// <p>This method determines whether or not single-token insertion is viable by
// checking if the {@code LA(1)} input symbol could be successfully matched
// if it were instead the {@code LA(2)} symbol. If this method returns
// {@code true}, the caller is responsible for creating and inserting a
// token with the correct type to produce this behavior.</p>
//
// @param recognizer the parser instance
// @return {@code true} if single-token insertion is a viable recovery
// strategy for the current mismatched input, otherwise {@code false}
//
DefaultErrorStrategy.prototype.singleTokenInsertion = function(recognizer) {
    var currentSymbolType = recognizer.getTokenStream().LA(1);
    // if current token is consistent with what could come after current
    // ATN state, then we know we're missing a token; error recovery
    // is free to conjure up and insert the missing token
    var atn = recognizer._interp.atn;
    var currentState = atn.states[recognizer.state];
    var next = currentState.transitions[0].target;
    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
    if (expectingAtLL2.contains(currentSymbolType) ){
        this.reportMissingToken(recognizer);
        return true;
    } else {
        return false;
    }
};

// This method implements the single-token deletion inline error recovery
// strategy. It is called by {@link //recoverInline} to attempt to recover
// from mismatched input. If this method returns null, the parser and error
// handler state will not have changed. If this method returns non-null,
// {@code recognizer} will <em>not</em> be in error recovery mode since the
// returned token was a successful match.
//
// <p>If the single-token deletion is successful, this method calls
// {@link //reportUnwantedToken} to report the error, followed by
// {@link Parser//consume} to actually "delete" the extraneous token. Then,
// before returning {@link //reportMatch} is called to signal a successful
// match.</p>
//
// @param recognizer the parser instance
// @return the successfully matched {@link Token} instance if single-token
// deletion successfully recovers from the mismatched input, otherwise
// {@code null}
//
DefaultErrorStrategy.prototype.singleTokenDeletion = function(recognizer) {
    var nextTokenType = recognizer.getTokenStream().LA(2);
    var expecting = this.getExpectedTokens(recognizer);
    if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        // print("recoverFromMismatchedToken deleting " \
        // + str(recognizer.getTokenStream().LT(1)) \
        // + " since " + str(recognizer.getTokenStream().LT(2)) \
        // + " is what we want", file=sys.stderr)
        recognizer.consume(); // simply delete extra token
        // we want to return the token we're actually matching
        var matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer); // we know current token is correct
        return matchedSymbol;
    } else {
        return null;
    }
};

// Conjure up a missing token during error recovery.
//
// The recognizer attempts to recover from single missing
// symbols. But, actions might refer to that missing symbol.
// For example, x=ID {f($x);}. The action clearly assumes
// that there has been an identifier matched previously and that
// $x points at that token. If that token is missing, but
// the next token in the stream is what we want we assume that
// this token is missing and we keep going. Because we
// have to return some token to replace the missing token,
// we have to conjure one up. This method gives the user control
// over the tokens returned for missing tokens. Mostly,
// you will want to create something special for identifier
// tokens. For literals such as '{' and ',', the default
// action in the parser or tree parser works. It simply creates
// a CommonToken of the appropriate type. The text will be the token.
// If you change what tokens must be created by the lexer,
// override this method to create the appropriate tokens.
//
DefaultErrorStrategy.prototype.getMissingSymbol = function(recognizer) {
    var currentSymbol = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var expectedTokenType = expecting.first(); // get any element
    var tokenText;
    if (expectedTokenType===Token.EOF) {
        tokenText = "<missing EOF>";
    } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
    }
    var current = currentSymbol;
    var lookback = recognizer.getTokenStream().LT(-1);
    if (current.type===Token.EOF && lookback !== null) {
        current = lookback;
    }
    return recognizer.getTokenFactory().create(current.source,
        expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
        -1, -1, current.line, current.column);
};

DefaultErrorStrategy.prototype.getExpectedTokens = function(recognizer) {
    return recognizer.getExpectedTokens();
};

// How should a token be displayed in an error message? The default
// is to display just the text, but during development you might
// want to have a lot of information spit out. Override in that case
// to use t.toString() (which, for CommonToken, dumps everything about
// the token). This is better than forcing you to override a method in
// your token objects because you don't have to go modify your lexer
// so that it creates a new Java type.
//
DefaultErrorStrategy.prototype.getTokenErrorDisplay = function(t) {
    if (t === null) {
        return "<no token>";
    }
    var s = t.text;
    if (s === null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    return this.escapeWSAndQuote(s);
};

DefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) {
    s = s.replace(/\n/g,"\\n");
    s = s.replace(/\r/g,"\\r");
    s = s.replace(/\t/g,"\\t");
    return "'" + s + "'";
};

// Compute the error recovery set for the current rule. During
// rule invocation, the parser pushes the set of tokens that can
// follow that rule reference on the stack; this amounts to
// computing FIRST of what follows the rule reference in the
// enclosing rule. See LinearApproximator.FIRST().
// This local follow set only includes tokens
// from within the rule; i.e., the FIRST computation done by
// ANTLR stops at the end of a rule.
//
// EXAMPLE
//
// When you find a "no viable alt exception", the input is not
// consistent with any of the alternatives for rule r. The best
// thing to do is to consume tokens until you see something that
// can legally follow a call to r//or* any rule that called r.
// You don't want the exact set of viable next tokens because the
// input might just be missing a token--you might consume the
// rest of the input looking for one of the missing tokens.
//
// Consider grammar:
//
// a : '[' b ']'
// | '(' b ')'
// ;
// b : c '^' INT ;
// c : ID
// | INT
// ;
//
// At each rule invocation, the set of tokens that could follow
// that rule is pushed on a stack. Here are the various
// context-sensitive follow sets:
//
// FOLLOW(b1_in_a) = FIRST(']') = ']'
// FOLLOW(b2_in_a) = FIRST(')') = ')'
// FOLLOW(c_in_b) = FIRST('^') = '^'
//
// Upon erroneous input "[]", the call chain is
//
// a -> b -> c
//
// and, hence, the follow context stack is:
//
// depth follow set start of rule execution
// 0 <EOF> a (from main())
// 1 ']' b
// 2 '^' c
//
// Notice that ')' is not included, because b would have to have
// been called from a different context in rule a for ')' to be
// included.
//
// For error recovery, we cannot consider FOLLOW(c)
// (context-sensitive or otherwise). We need the combined set of
// all context-sensitive FOLLOW sets--the set of all tokens that
// could follow any reference in the call chain. We need to
// resync to one of those tokens. Note that FOLLOW(c)='^' and if
// we resync'd to that token, we'd consume until EOF. We need to
// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
// In this case, for input "[]", LA(1) is ']' and in the set, so we would
// not consume anything. After printing an error, rule c would
// return normally. Rule b would not find the required '^' though.
// At this point, it gets a mismatched token error and throws an
// exception (since LA(1) is not in the viable following token
// set). The rule exception handler tries to recover, but finds
// the same recovery set and doesn't consume anything. Rule b
// exits normally returning to rule a. Now it finds the ']' (and
// with the successful match exits errorRecovery mode).
//
// So, you can see that the parser walks up the call chain looking
// for the token that was a member of the recovery set.
//
// Errors are not generated in errorRecovery mode.
//
// ANTLR's error recovery mechanism is based upon original ideas:
//
// "Algorithms + Data Structures = Programs" by Niklaus Wirth
//
// and
//
// "A note on error recovery in recursive descent parsers":
// http://portal.acm.org/citation.cfm?id=947902.947905
//
// Later, Josef Grosch had some good ideas:
//
// "Efficient and Comfortable Error Recovery in Recursive Descent
// Parsers":
// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
//
// Like Grosch I implement context-sensitive FOLLOW sets that are combined
// at run-time upon error to avoid overhead during parsing.
//
DefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) {
    var atn = recognizer._interp.atn;
    var ctx = recognizer._ctx;
    var recoverSet = new IntervalSet();
    while (ctx !== null && ctx.invokingState>=0) {
        // compute what follows who invoked us
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        var follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
    }
    recoverSet.removeOne(Token.EPSILON);
    return recoverSet;
};

// Consume tokens until one matches the given token set.//
DefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) {
    var ttype = recognizer.getTokenStream().LA(1);
    while( ttype !== Token.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
    }
};

//
// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
// by immediately canceling the parse operation with a
// {@link ParseCancellationException}. The implementation ensures that the
// {@link ParserRuleContext//exception} field is set for all parse tree nodes
// that were not completed prior to encountering the error.
//
// <p>
// This error strategy is useful in the following scenarios.</p>
//
// <ul>
// <li><strong>Two-stage parsing:</strong> This error strategy allows the first
// stage of two-stage parsing to immediately terminate if an error is
// encountered, and immediately fall back to the second stage. In addition to
// avoiding wasted work by attempting to recover from errors here, the empty
// implementation of {@link BailErrorStrategy//sync} improves the performance of
// the first stage.</li>
// <li><strong>Silent validation:</strong> When syntax errors are not being
// reported or logged, and the parse result is simply ignored if errors occur,
// the {@link BailErrorStrategy} avoids wasting work on recovering from errors
// when the result will be ignored either way.</li>
// </ul>
//
// <p>
// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
//
// @see Parser//setErrorHandler(ANTLRErrorStrategy)
//
function BailErrorStrategy() {
	DefaultErrorStrategy.call(this);
	return this;
}

BailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);
BailErrorStrategy.prototype.constructor = BailErrorStrategy;

// Instead of recovering from exception {@code e}, re-throw it wrapped
// in a {@link ParseCancellationException} so it is not caught by the
// rule function catches. Use {@link Exception//getCause()} to get the
// original {@link RecognitionException}.
//
BailErrorStrategy.prototype.recover = function(recognizer, e) {
    var context = recognizer._ctx;
    while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
    }
    throw new ParseCancellationException(e);
};

// Make sure we don't attempt to recover inline; if the parser
// successfully recovers, it won't throw an exception.
//
BailErrorStrategy.prototype.recoverInline = function(recognizer) {
    this.recover(recognizer, new InputMismatchException(recognizer));
};

// Make sure we don't attempt to recover from problems in subrules.//
BailErrorStrategy.prototype.sync = function(recognizer) {
    // pass
};

exports.BailErrorStrategy = BailErrorStrategy;
exports.DefaultErrorStrategy = DefaultErrorStrategy;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Utils = __webpack_require__(2);
var Token = __webpack_require__(4).Token;
var RuleNode = __webpack_require__(12).RuleNode;
var ErrorNode = __webpack_require__(12).ErrorNode;
var TerminalNode = __webpack_require__(12).TerminalNode;
var ParserRuleContext = __webpack_require__(44).ParserRuleContext;
var RuleContext = __webpack_require__(33).RuleContext;
var INVALID_ALT_NUMBER = __webpack_require__(15).INVALID_ALT_NUMBER;


/** A set of utility routines useful for all kinds of ANTLR trees. */
function Trees() {
}

// Print out a whole tree in LISP form. {@link //getNodeText} is used on the
//  node payloads to get the text for the nodes.  Detect
//  parse trees and extract data appropriately.
Trees.toStringTree = function(tree, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
       ruleNames = recog.ruleNames;
    }
    var s = Trees.getNodeText(tree, ruleNames);
    s = Utils.escapeWhitespace(s, false);
    var c = tree.getChildCount();
    if(c===0) {
        return s;
    }
    var res = "(" + s + ' ';
    if(c>0) {
        s = Trees.toStringTree(tree.getChild(0), ruleNames);
        res = res.concat(s);
    }
    for(var i=1;i<c;i++) {
        s = Trees.toStringTree(tree.getChild(i), ruleNames);
        res = res.concat(' ' + s);
    }
    res = res.concat(")");
    return res;
};

Trees.getNodeText = function(t, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
        ruleNames = recog.ruleNames;
    }
    if(ruleNames!==null) {
       if (t instanceof RuleContext) {
           var altNumber = t.getAltNumber();
           if ( altNumber!=INVALID_ALT_NUMBER ) {
               return ruleNames[t.ruleIndex]+":"+altNumber;
           }
           return ruleNames[t.ruleIndex];
       } else if ( t instanceof ErrorNode) {
           return t.toString();
       } else if(t instanceof TerminalNode) {
           if(t.symbol!==null) {
               return t.symbol.text;
           }
       }
    }
    // no recog for rule names
    var payload = t.getPayload();
    if (payload instanceof Token ) {
       return payload.text;
    }
    return t.getPayload().toString();
};


// Return ordered list of all children of this node
Trees.getChildren = function(t) {
	var list = [];
	for(var i=0;i<t.getChildCount();i++) {
		list.push(t.getChild(i));
	}
	return list;
};

// Return a list of all ancestors of this node.  The first node of
//  list is the root and the last is the parent of this node.
//
Trees.getAncestors = function(t) {
    var ancestors = [];
    t = t.getParent();
    while(t!==null) {
        ancestors = [t].concat(ancestors);
        t = t.getParent();
    }
    return ancestors;
};

Trees.findAllTokenNodes = function(t, ttype) {
    return Trees.findAllNodes(t, ttype, true);
};

Trees.findAllRuleNodes = function(t, ruleIndex) {
	return Trees.findAllNodes(t, ruleIndex, false);
};

Trees.findAllNodes = function(t, index, findTokens) {
	var nodes = [];
	Trees._findAllNodes(t, index, findTokens, nodes);
	return nodes;
};

Trees._findAllNodes = function(t, index, findTokens, nodes) {
	// check this node (the root) first
	if(findTokens && (t instanceof TerminalNode)) {
		if(t.symbol.type===index) {
			nodes.push(t);
		}
	} else if(!findTokens && (t instanceof ParserRuleContext)) {
		if(t.ruleIndex===index) {
			nodes.push(t);
		}
	}
	// check children
	for(var i=0;i<t.getChildCount();i++) {
		Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
	}
};

Trees.descendants = function(t) {
	var nodes = [t];
    for(var i=0;i<t.getChildCount();i++) {
        nodes = nodes.concat(Trees.descendants(t.getChild(i)));
    }
    return nodes;
};


exports.Trees = Trees;

/***/ }),
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var antlr4_1 = __webpack_require__(25);
var Acsl = __webpack_require__(75);
var acslerrorlistener_1 = __webpack_require__(123);
var acslprogram_1 = __webpack_require__(124);
var acsl2rlistener_1 = __webpack_require__(121);
function stripLineContinuations(lines) {
    var rerun;
    var i = 0;
    do {
        rerun = false;
        for (; i < (lines.length - 1); ++i) {
            var line = lines[i];
            var index = line.lastIndexOf("&");
            if (-1 != index) {
                var rest = line.substring(index + 1).trim();
                if (0 < rest.length)
                    continue;
                line = line.substring(0, index);
                var removed = lines.splice(i + 1, 1);
                var next = removed[0].trim();
                if (next.startsWith("&"))
                    next = next.substring(1);
                line = line + " " + next;
                lines[i] = line;
                rerun = true;
                break;
            }
        }
    } while (rerun);
}
var infixOperators = [
    "eq",
    "ne",
    "gt",
    "lt",
    "ge",
    "le",
    "eqv",
    "neqv",
    "and",
    "or",
    "at"
];
var reInfixOperators = infixOperators.map(function (io) { return new RegExp("\\." + io + "\\.", "gi"); });
var infixOperatorReplacements = infixOperators.map(function (io) { return " __" + io + " "; });
function replaceInfixOperators(lines) {
    for (var i = 0; i < reInfixOperators.length; ++i) {
        var re = reInfixOperators[i];
        var replacement = infixOperatorReplacements[i];
        for (var j = 0; j < lines.length; ++j) {
            var line = lines[j];
            line = line.replace(re, replacement);
            lines[j] = line;
        }
    }
}
var reNot = new RegExp("\\.?not\\.", "gi");
var replacementNot = " __not ";
function replaceNotOperator(lines) {
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];
        line = line.replace(reNot, replacementNot);
        lines[i] = line;
    }
}
var reTrue = new RegExp("\\.true\\.", "gi");
var replacementTrue = " __true ";
var reFalse = new RegExp("\\.false\\.", "gi");
var replacementFalse = " __false ";
function replaceBooleans(lines) {
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];
        line = line.replace(reTrue, replacementTrue);
        line = line.replace(reFalse, replacementFalse);
        lines[i] = line;
    }
}
function convertProgramName(lines) {
    var keyword = "program";
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];
        var index = line.toLowerCase().indexOf(keyword);
        if (!~index)
            continue;
        index = index + keyword.length;
        var rest = line.substring(index).trim();
        if (0 != rest.length)
            line = line.substring(0, index) + " !" + rest;
        lines[i] = line;
        break;
    }
}
function parse(input, messages, diagnostics) {
    var lines = input.split(/\r?\n/);
    stripLineContinuations(lines);
    replaceInfixOperators(lines);
    replaceNotOperator(lines);
    replaceBooleans(lines);
    convertProgramName(lines);
    lines.push(""); // keep Antlr quiet
    input = lines.join("\n");
    var chars = new antlr4_1.InputStream(input);
    var errorListener = acslerrorlistener_1.createAcslErrorListener(messages, diagnostics, lines);
    var lexer = new Acsl.AcslLexer(chars);
    lexer.removeErrorListeners();
    lexer.addErrorListener(errorListener);
    var tokens = new antlr4_1.CommonTokenStream(lexer);
    var parser = new Acsl.AcslParser(tokens);
    parser.removeErrorListeners();
    parser.addErrorListener(errorListener);
    parser.buildParseTrees = true;
    var acsl = parser.acsl();
    var acslProgram = new acslprogram_1.default();
    var listener = acsl2rlistener_1.createAcsl2RListener(acslProgram, messages);
    antlr4_1.tree.ParseTreeWalker.DEFAULT.walk(listener, acsl);
    return acslProgram;
}
exports.parse = parse;


/***/ }),
/* 113 */,
/* 114 */,
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(6);
var objectmodel_1 = __webpack_require__(0);
var assignparameters_1 = __webpack_require__(134);
var calculatevariables_1 = __webpack_require__(135);
var derivative_1 = __webpack_require__(136);
var eventhandler_1 = __webpack_require__(137);
var runmodel_1 = __webpack_require__(139);
var terminal_1 = __webpack_require__(140);
var rscript_1 = __webpack_require__(138);
function generate(acslProgram, fileName, messages, diagnostics, configureForRVis) {
    var grouped = lodash_1.partition(acslProgram.initialSection.codeBlocks, function (c) { return objectmodel_1.isStatement(c) && c.isConstant; });
    var parameterAssignments = grouped[0];
    parameterAssignments.push.apply(parameterAssignments, acslProgram.codeBlocks.filter(function (c) { return objectmodel_1.isStatement(c) && c.isConstant; }));
    parameterAssignments.push.apply(parameterAssignments, acslProgram.dynamicSection.codeBlocks.filter(function (c) { return objectmodel_1.isStatement(c) && c.isConstant; }));
    !!acslProgram.dynamicSection.cinterval && parameterAssignments.push(acslProgram.dynamicSection.cinterval);
    var parameterSymbols = new Set();
    parameterAssignments.forEach(function (pa) { return pa.symbolsProvided.forEach(function (s) { return parameterSymbols.add(s.toCode("R", 0)); }); });
    var initialComputations = grouped[1];
    var initialComputationSymbols = new Set();
    initialComputations.forEach(function (c) { return c.symbolsProvided.forEach(function (s) { return initialComputationSymbols.add(s.toCode("R", 0)); }); });
    var assignParameters = assignparameters_1.generateAssignParametersRScript(acslProgram, configureForRVis, parameterAssignments);
    var calculateVariables = calculatevariables_1.generateCalculateVariablesRScript(acslProgram, initialComputations);
    var integratorEvents = eventhandler_1.processDiscreteSections(acslProgram, messages);
    var discreteSymbols = objectmodel_1.getDiscreteSymbolsRequiredByDerivative(acslProgram);
    var _a = derivative_1.generateDerivativeRScript(acslProgram, messages, parameterSymbols, initialComputationSymbols, discreteSymbols), derivative = _a.derivative, integAssignments = _a.integAssignments, outputs = _a.outputs;
    var eventHandler = 0 == integratorEvents.length ? null : eventhandler_1.generateEventHandlerRScript(integAssignments, integratorEvents);
    var tStopParamName = !!acslProgram.dynamicSection.tStop ? acslProgram.dynamicSection.tStop.lvalue.toCode("R", 0) : null;
    var cIntParamName = !!acslProgram.dynamicSection.cinterval ? acslProgram.dynamicSection.cinterval.lvalue.toCode("R", 0) : null;
    var runModel = runmodel_1.generateRunModelRScript(tStopParamName, cIntParamName, integAssignments, integratorEvents);
    var terminal = terminal_1.generateTerminalRScript(acslProgram, outputs);
    var rScript = rscript_1.generateRScript(acslProgram, fileName, messages, diagnostics, assignParameters, calculateVariables, derivative, eventHandler, runModel, terminal);
    return rScript;
}
exports.generate = generate;


/***/ }),
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isPromise = __webpack_require__(185);

function parseJsonSafely(str) {
  try {
    return JSON.parse(str);
  } catch (e) {
    return false;
  }
}

function registerPromiseWorker(callback) {

  function postOutgoingMessage(e, messageId, error, result) {
    function postMessage(msg) {
      /* istanbul ignore if */
      if (typeof self.postMessage !== 'function') { // service worker
        e.ports[0].postMessage(msg);
      } else { // web worker
        self.postMessage(msg);
      }
    }
    if (error) {
      /* istanbul ignore else */
      if (typeof console !== 'undefined' && 'error' in console) {
        // This is to make errors easier to debug. I think it's important
        // enough to just leave here without giving the user an option
        // to silence it.
        console.error('Worker caught an error:', error);
      }
      postMessage(JSON.stringify([messageId, {
        message: error.message
      }]));
    } else {
      postMessage(JSON.stringify([messageId, null, result]));
    }
  }

  function tryCatchFunc(callback, message) {
    try {
      return {res: callback(message)};
    } catch (e) {
      return {err: e};
    }
  }

  function handleIncomingMessage(e, callback, messageId, message) {

    var result = tryCatchFunc(callback, message);

    if (result.err) {
      postOutgoingMessage(e, messageId, result.err);
    } else if (!isPromise(result.res)) {
      postOutgoingMessage(e, messageId, null, result.res);
    } else {
      result.res.then(function (finalResult) {
        postOutgoingMessage(e, messageId, null, finalResult);
      }, function (finalError) {
        postOutgoingMessage(e, messageId, finalError);
      });
    }
  }

  function onIncomingMessage(e) {
    var payload = parseJsonSafely(e.data);
    if (!payload) {
      // message isn't stringified json; ignore
      return;
    }
    var messageId = payload[0];
    var message = payload[1];

    if (typeof callback !== 'function') {
      postOutgoingMessage(e, messageId, new Error(
        'Please pass a function into register().'));
    } else {
      handleIncomingMessage(e, callback, messageId, message);
    }
  }

  self.addEventListener('message', onIncomingMessage);
}

module.exports = registerPromiseWorker;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(6);
var acsl_1 = __webpack_require__(75);
var statement_1 = __webpack_require__(67);
var tablestatement_1 = __webpack_require__(70);
var arraystatement_1 = __webpack_require__(56);
var arrayexpression_1 = __webpack_require__(55);
var stringexpression_1 = __webpack_require__(132);
var floatexpression_1 = __webpack_require__(42);
var idexpression_1 = __webpack_require__(31);
var texpression_1 = __webpack_require__(72);
var expexpression_1 = __webpack_require__(128);
var unaryplusminusexpression_1 = __webpack_require__(133);
var muldivexpression_1 = __webpack_require__(64);
var addsubexpression_1 = __webpack_require__(54);
var infixexpression_1 = __webpack_require__(62);
var subexpression_1 = __webpack_require__(69);
var integexpression_1 = __webpack_require__(129);
var rswexpression_1 = __webpack_require__(131);
var fnexpression_1 = __webpack_require__(43);
var notexpression_1 = __webpack_require__(130);
var pulseexpression_1 = __webpack_require__(66);
var stepexpression_1 = __webpack_require__(68);
var booleanexpression_1 = __webpack_require__(57);
var discretesection_1 = __webpack_require__(127);
var initialsection_1 = __webpack_require__(63);
var terminalsection_1 = __webpack_require__(71);
var dynamicsection_1 = __webpack_require__(60);
var derivativesection_1 = __webpack_require__(58);
var conditionalsection_1 = __webpack_require__(126);
var proceduralsection_1 = __webpack_require__(65);
var ifsection_1 = __webpack_require__(61);
var docontinuesection_1 = __webpack_require__(59);
var comment_1 = __webpack_require__(125);
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var js_1 = __webpack_require__(141);
var tokenTypeID = acsl_1.AcslParser.ID;
var tokenTypeEQUALS = acsl_1.AcslParser.EQUALS;
var tokenTypeCOMMA = acsl_1.AcslParser.COMMA;
var Acsl2RListener = (function () {
    function Acsl2RListener(acslProgram, messages) {
        this._expressions = [];
        this._comments = [];
        this._lastHeaderCommentLineNo = 0;
        this._codeBlocks = [];
        this._transitioningtoElseIf = false;
        this._lvalues = new Set();
        this._symbols = new Set();
        this._doContinueSections = [];
        this._acslProgram = acslProgram;
        this._messages = messages;
    }
    Acsl2RListener.prototype.enterHeadedProgramWithComments = function (ctx) {
        this._codeBlocks.push(this._acslProgram);
        this._enterHeadedProgram(ctx);
    };
    Acsl2RListener.prototype.exitHeadedProgramWithComments = function (ctx) {
        this._exitProgram(ctx);
    };
    Acsl2RListener.prototype.enterHeadedProgramWithoutComments = function (ctx) {
        this._codeBlocks.push(this._acslProgram);
        this._enterHeadedProgram(ctx);
    };
    Acsl2RListener.prototype.exitHeadedProgramWithoutComments = function (ctx) {
        this._exitProgram(ctx);
    };
    Acsl2RListener.prototype.enterProgramWithComments = function (ctx) {
        this._codeBlocks.push(this._acslProgram);
    };
    Acsl2RListener.prototype.exitProgramWithComments = function (ctx) {
        this._exitProgram(ctx);
    };
    Acsl2RListener.prototype.enterProgramWithoutComments = function (ctx) {
        this._codeBlocks.push(this._acslProgram);
    };
    Acsl2RListener.prototype.exitProgramWithoutComments = function (ctx) {
        this._exitProgram(ctx);
    };
    Acsl2RListener.prototype._enterHeadedProgram = function (ctx) {
        var index = 0;
        var lastHeaderComment;
        while (ctx.children[index].ruleIndex == acsl_1.AcslParser["RULE_comment"]) {
            lastHeaderComment = ctx.children[index];
            ++index;
        }
        this._lastHeaderCommentLineNo = lastHeaderComment.start.line;
    };
    Acsl2RListener.prototype.setDefaults = function () {
        if (!(this._acslProgram.dynamicSection.cinterval instanceof statement_1.default)) {
            var lvalue = new idexpression_1.default("CINT");
            var computation = new floatexpression_1.default(0.01);
            var statement = new statement_1.default(lvalue, computation);
            statement.isConstant = true;
            this._acslProgram.dynamicSection.cinterval = statement;
            var message = "Setting default CINTERVAL.";
            this._messages.push(message);
        }
        var tStop = null;
        if (this._acslProgram.dynamicSection.termt instanceof infixexpression_1.default) {
            var tStopExpr = null;
            var lhs = this._acslProgram.dynamicSection.termt.lhs.toCode("R", 0);
            if (this._acslProgram.dynamicSection.termt.lhs instanceof texpression_1.default) {
                tStopExpr = this._acslProgram.dynamicSection.termt.rhs;
            }
            else if (this._acslProgram.dynamicSection.termt.rhs instanceof texpression_1.default) {
                tStopExpr = this._acslProgram.dynamicSection.termt.lhs;
            }
            if (!!tStopExpr) {
                if (tStopExpr instanceof floatexpression_1.default) {
                    tStop = new statement_1.default(new idexpression_1.default("TSTOP"), tStopExpr);
                    tStop.isConstant = true;
                    this._acslProgram.initialSection.codeBlocks.push(tStop);
                }
                else if (tStopExpr instanceof idexpression_1.default) {
                    var provider = objectmodel_1.findSymbolProvider(this._acslProgram.initialSection, tStopExpr);
                    if (null == provider) {
                        provider = objectmodel_1.findSymbolProvider(this._acslProgram.dynamicSection.derivativeSection, tStopExpr);
                        if (!!provider && provider.computation instanceof floatexpression_1.default) {
                            var index = this._acslProgram.dynamicSection.derivativeSection.codeBlocks.indexOf(provider);
                            if (!!~index) {
                                this._acslProgram.dynamicSection.derivativeSection.codeBlocks.splice(index, 1);
                                this._acslProgram.initialSection.codeBlocks.push(provider);
                            }
                            else {
                                provider = null; // can't use
                            }
                        }
                    }
                    if (!!provider && provider instanceof statement_1.default && provider.computation instanceof floatexpression_1.default) {
                        tStop = provider;
                    }
                }
            }
        }
        if (null == tStop) {
            tStop = new statement_1.default(new idexpression_1.default("TSTOP"), new floatexpression_1.default(1.0));
            tStop.isConstant = true;
            this._acslProgram.initialSection.codeBlocks.push(tStop);
            var message = "Could not determine stop time from TERMT. Setting default.";
            this._messages.push(message);
        }
        this._acslProgram.dynamicSection.tStop = tStop;
    };
    Acsl2RListener.prototype.findFloatValue = function (expression) {
        var value = null;
        if (expression instanceof floatexpression_1.default) {
            value = expression.float;
        }
        else if (expression instanceof idexpression_1.default) {
            var provider = objectmodel_1.findSymbolProvider(this._acslProgram.initialSection, expression);
            if (null != provider && provider.computation instanceof floatexpression_1.default) {
                value = provider.computation.float;
            }
        }
        return value;
    };
    Acsl2RListener.prototype.unrollSchedulingLoops = function () {
        var _this = this;
        this._doContinueSections.forEach(function (cs) {
            if (0 == cs.schedules.length)
                return;
            var initial = _this.findFloatValue(cs.initial);
            if (null == initial) {
                var message = "Failed to evaluate loop initial: " + cs.initial.toCode("R", 0);
                _this._messages.push(message);
                return;
            }
            var terminal = _this.findFloatValue(cs.terminal);
            if (null == terminal) {
                var message = "Failed to evaluate loop terminal: " + cs.terminal.toCode("R", 0);
                _this._messages.push(message);
                return;
            }
            var increment = _this.findFloatValue(cs.increment);
            if (null == increment) {
                var message = "Failed to evaluate loop increment: " + cs.increment.toCode("R", 0);
                _this._messages.push(message);
                return;
            }
            var index = cs.index.toCode("R", 0);
            var _loop_1 = function (i) {
                var indexValue = new floatexpression_1.default(i);
                cs.schedules.forEach(function (s) {
                    var schedule = s.clone();
                    objectmodel_1.replaceSymbol(schedule, index, indexValue);
                    _this._acslProgram.initialSection.schedules.push(schedule);
                });
            };
            for (var i = initial; i <= terminal; i += increment) {
                _loop_1(i);
            }
            cs.schedules.length = 0;
        });
    };
    Acsl2RListener.prototype._exitProgram = function (ctx) {
        var _this = this;
        this.gatherEndProgramComments(ctx);
        this._acslProgram.applyAcslTypes(this._acslProgram.typeDictionary);
        this._doContinueSections.forEach(function (dcs) { return dcs.applyAcslTypes(_this._acslProgram.typeDictionary); });
        this.checkLvalueConsistency();
        this.reviseSymbolUsage();
        Acsl2RListener.distributeMiscellaneousCodeBlocks(this._acslProgram, this._acslProgram.codeBlocks);
        this._acslProgram.codeBlocks.length = 0;
        Acsl2RListener.distributeMiscellaneousCodeBlocks(this._acslProgram, this._acslProgram.dynamicSection.codeBlocks);
        this._acslProgram.dynamicSection.codeBlocks.length = 0;
        this.setDefaults();
        this.unrollSchedulingLoops();
        this._expressions.forEach(function (e) { return _this._messages.push("Listener failure -- unhandled: " + e.toCode("R", 0)); });
        var messages = objectmodel_1.orderComputations(this._acslProgram);
        if (!!messages)
            (_a = this._messages).push.apply(_a, messages);
        this._codeBlocks.pop(); // acslProgram out
        var _a;
    };
    Acsl2RListener.prototype.enterDiscreteWithComment = function (ctx) {
        var discreteSection = new discretesection_1.default();
        this.processPreSectionComments(discreteSection.comments);
        this._codeBlocks.push(discreteSection);
    };
    Acsl2RListener.prototype.exitDiscreteWithComment = function (ctx) {
        this._exitDiscrete(ctx);
    };
    Acsl2RListener.prototype.enterDiscreteWithoutCommment = function (ctx) {
        var discreteSection = new discretesection_1.default();
        this.processPreSectionComments(discreteSection.comments);
        this._codeBlocks.push(discreteSection);
    };
    Acsl2RListener.prototype.exitDiscreteWithoutCommment = function (ctx) {
        this._exitDiscrete(ctx);
    };
    Acsl2RListener.prototype._exitDiscrete = function (ctx) {
        var discreteSection = this.popCodeBlock(discretesection_1.default);
        var node = ctx.children[1];
        discreteSection.name = node.symbol.text;
        this.processEndSectionComments(discreteSection.comments, ctx.stop.line);
        var dynamicSection = this.getCurrentSection(dynamicsection_1.default);
        dynamicSection.discreteSections.push(discreteSection);
    };
    Acsl2RListener.prototype.exitInterval = function (ctx) {
        var discreteSection = this.getCurrentSection(discretesection_1.default);
        if (null == discreteSection) {
            this._messages.push("INTERVAL statements supported only in DISCRETE sections");
        }
        else if (null != discreteSection.intervalAssignment) {
            this._messages.push("Found more than one interval assignment");
        }
        else {
            var intervalAssignment = this.getCurrentStatement(discreteSection);
            if (null == intervalAssignment) {
                this._messages.push("Expecting statement after INTERVAL");
            }
            else if (!(intervalAssignment instanceof statement_1.default) || null == intervalAssignment.lvalue) {
                this._messages.push("Expecting assignment after INTERVAL. Found: " + Acsl2RListener.toText(ctx, intervalAssignment));
            }
            else {
                discreteSection.intervalAssignment = intervalAssignment;
            }
        }
    };
    Acsl2RListener.prototype.enterInitialWithComment = function (ctx) {
        var initialSection = this._acslProgram.initialSection;
        this.processPreSectionComments(initialSection.comments);
        this._codeBlocks.push(initialSection);
    };
    Acsl2RListener.prototype.exitInitialWithComment = function (ctx) {
        this._exitInitial(ctx);
    };
    Acsl2RListener.prototype.enterInitialWithoutComment = function (ctx) {
        var initialSection = this._acslProgram.initialSection;
        this.processPreSectionComments(initialSection.comments);
        this._codeBlocks.push(initialSection);
    };
    Acsl2RListener.prototype.exitInitialWithoutComment = function (ctx) {
        this._exitInitial(ctx);
    };
    Acsl2RListener.prototype._exitInitial = function (ctx) {
        var initialSection = this.popCodeBlock(initialsection_1.default);
        this.processEndSectionComments(initialSection.comments, ctx.stop.line);
    };
    Acsl2RListener.prototype.enterTerminalWithComment = function (ctx) {
        var terminalSection = this._acslProgram.terminalSection;
        this.processPreSectionComments(terminalSection.comments);
        this._codeBlocks.push(terminalSection);
    };
    Acsl2RListener.prototype.exitTerminalWithComment = function (ctx) {
        this._exitTerminal(ctx);
    };
    Acsl2RListener.prototype.enterTerminalWithoutComment = function (ctx) {
        var terminalSection = this._acslProgram.terminalSection;
        this.processPreSectionComments(terminalSection.comments);
        this._codeBlocks.push(terminalSection);
    };
    Acsl2RListener.prototype.exitTerminalWithoutComment = function (ctx) {
        this._exitTerminal(ctx);
    };
    Acsl2RListener.prototype._exitTerminal = function (ctx) {
        var terminalSection = this.popCodeBlock(terminalsection_1.default);
        this.processEndSectionComments(terminalSection.comments, ctx.stop.line);
    };
    Acsl2RListener.prototype.exitConstant = function (ctx) {
        var exprOrAssignContext = ctx.children[1];
        var nDeclarations = Acsl2RListener.getCommaCount(exprOrAssignContext.children) + 1;
        var statements = [];
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        for (var i = 0; i < nDeclarations; ++i) {
            var statement = codeBlock.codeBlocks[codeBlock.codeBlocks.length - 1 - i];
            if (!(statement instanceof statement_1.default) || !(statement.lvalue instanceof idexpression_1.default)) {
                return;
            }
            statements.push(statement);
        }
        statements.forEach(function (s) { return s.isConstant = true; });
    };
    Acsl2RListener.prototype.exitSchedule = function (ctx) {
        var section = this._codeBlocks[this._codeBlocks.length - 1];
        var schedule = this._expressions.pop();
        if (!(schedule instanceof infixexpression_1.default)) {
            this._messages.push("Ignoring non-infix SCHEDULE: " + Acsl2RListener.toText(ctx, schedule));
        }
        else if (schedule.infix != "__at") {
            this._messages.push("Ignoring SCHEDULE missing .AT.: " + Acsl2RListener.toText(ctx, schedule));
        }
        else if (section instanceof conditionalsection_1.default) {
            this._messages.push("Ignoring conditional SCHEDULE: " + Acsl2RListener.toText(ctx, schedule));
        }
        else if (js_1.implementsProperty(section, "schedules")) {
            section.schedules.push(schedule);
        }
        else {
            this._acslProgram.initialSection.schedules.push(schedule);
        }
    };
    Acsl2RListener.prototype.enterDynamicWithComment = function (ctx) {
        var dynamicSection = this._acslProgram.dynamicSection;
        this.processPreSectionComments(dynamicSection.comments);
        this._codeBlocks.push(dynamicSection);
    };
    Acsl2RListener.prototype.exitDynamicWithComment = function (ctx) {
        this._exitDynamic(ctx);
    };
    Acsl2RListener.prototype.enterDynamicWithoutComment = function (ctx) {
        var dynamicSection = this._acslProgram.dynamicSection;
        this.processPreSectionComments(dynamicSection.comments);
        this._codeBlocks.push(dynamicSection);
    };
    Acsl2RListener.prototype.exitDynamicWithoutComment = function (ctx) {
        this._exitDynamic(ctx);
    };
    Acsl2RListener.prototype._exitDynamic = function (ctx) {
        var dynamicSection = this.popCodeBlock(dynamicsection_1.default);
        this.processEndSectionComments(dynamicSection.comments, ctx.stop.line);
    };
    Acsl2RListener.prototype.exitAlgorithm = function (ctx) {
        var statement = this.popStatement();
        this._acslProgram.dynamicSection.algorithm = statement;
    };
    Acsl2RListener.prototype.exitMaxterval = function (ctx) {
        var statement = this.popStatement();
        this._acslProgram.dynamicSection.maxterval = statement;
    };
    Acsl2RListener.prototype.exitMinterval = function (ctx) {
        var statement = this.popStatement();
        this._acslProgram.dynamicSection.minterval = statement;
    };
    Acsl2RListener.prototype.exitCinterval = function (ctx) {
        var statement = this.popStatement();
        if (!(statement instanceof statement_1.default) || null == statement.lvalue) {
            this._messages.push("Expecting CINTERVAL assignment. Found: " + Acsl2RListener.toText(ctx, statement));
        }
        else {
            this._acslProgram.dynamicSection.cinterval = statement;
        }
    };
    Acsl2RListener.prototype.exitNsteps = function (ctx) {
        var statement = this.popStatement();
        this._acslProgram.dynamicSection.nsteps = statement;
    };
    Acsl2RListener.prototype.enterDerivativeWithComment = function (ctx) {
        var derivativeSection = this._acslProgram.dynamicSection.derivativeSection;
        this.processPreSectionComments(derivativeSection.comments);
        this._codeBlocks.push(derivativeSection);
    };
    Acsl2RListener.prototype.exitDerivativeWithComment = function (ctx) {
        this._exitDerivative(ctx);
    };
    Acsl2RListener.prototype.enterDerivativeWithoutComment = function (ctx) {
        var derivativeSection = this._acslProgram.dynamicSection.derivativeSection;
        this.processPreSectionComments(derivativeSection.comments);
        this._codeBlocks.push(derivativeSection);
    };
    Acsl2RListener.prototype.exitDerivativeWithoutComment = function (ctx) {
        this._exitDerivative(ctx);
    };
    Acsl2RListener.prototype._exitDerivative = function (ctx) {
        var derivativeSection = this.popCodeBlock(derivativesection_1.default);
        this.processEndSectionComments(derivativeSection.comments, ctx.stop.line);
    };
    Acsl2RListener.prototype.enterIfBlock = function (ctx) {
        if (!this._transitioningtoElseIf) {
            var ifSection = new ifsection_1.default();
            this.processPreSectionComments(ifSection.comments);
            var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
            codeBlock.codeBlocks.push(ifSection);
        }
        this._transitioningtoElseIf = false;
        var conditionalSection = new conditionalsection_1.default();
        this._codeBlocks.push(conditionalSection);
    };
    Acsl2RListener.prototype.exitIfBlock = function (ctx) {
    };
    Acsl2RListener.prototype.enterElseIfEndBlockEnd = function (ctx) {
    };
    Acsl2RListener.prototype.exitElseIfEndBlockEnd = function (ctx) {
    };
    Acsl2RListener.prototype.enterElseIfEndBlockElseIf = function (ctx) {
        this._transitioningtoElseIf = true;
    };
    Acsl2RListener.prototype.exitElseIfEndBlockElseIf = function (ctx) {
    };
    Acsl2RListener.prototype.enterElseIfEndBlockElse = function (ctx) {
        var conditionalSection = new conditionalsection_1.default();
        this._codeBlocks.push(conditionalSection);
    };
    Acsl2RListener.prototype.exitElseIfEndBlockElse = function (ctx) {
        var conditionalSection = this._codeBlocks.pop();
        var section = this._codeBlocks[this._codeBlocks.length - 1];
        var ifSection = section.codeBlocks[section.codeBlocks.length - 1];
        ifSection.conditionalSections.push(conditionalSection);
    };
    Acsl2RListener.prototype.enterThenBlock = function (ctx) {
        var conditionalSection = this._codeBlocks[this._codeBlocks.length - 1];
        conditionalSection.condition = this._expressions.pop();
    };
    Acsl2RListener.prototype.exitThenBlock = function (ctx) {
        var conditionalSection = this._codeBlocks.pop();
        var section = this._codeBlocks[this._codeBlocks.length - 1];
        var ifSection = section.codeBlocks[section.codeBlocks.length - 1];
        ifSection.conditionalSections.push(conditionalSection);
    };
    Acsl2RListener.prototype.enterIfLogical = function (ctx) {
        var ifSection = new ifsection_1.default();
        this.processPreSectionComments(ifSection.comments);
        this._codeBlocks.push(ifSection);
        var conditionalSection = new conditionalsection_1.default();
        this._codeBlocks.push(conditionalSection);
    };
    Acsl2RListener.prototype.exitIfLogical = function (ctx) {
        var conditionalSection = this._codeBlocks.pop();
        conditionalSection.condition = this._expressions.pop();
        var ifSection = this._codeBlocks.pop();
        ifSection.conditionalSections.push(conditionalSection);
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        codeBlock.codeBlocks.push(ifSection);
    };
    Acsl2RListener.prototype.exitTable = function (ctx) {
        var args = [];
        var nArgs = Acsl2RListener.getCommaCount(ctx.children) + 1;
        for (var i = 0; i < nArgs; ++i) {
            var arg = this._expressions.pop();
            if (arg instanceof floatexpression_1.default) {
                args.push(arg);
            }
            else if (arg instanceof muldivexpression_1.default && arg.lhs instanceof floatexpression_1.default) {
                var repeat = arg.lhs.float;
                while (repeat--) {
                    args.push(arg.rhs.clone());
                }
            }
            else {
                var message = "Unexpected expression in TABLE: " + arg.toCode("R", 0);
                this._messages.push(message);
                return;
            }
        }
        var name = this._expressions.pop();
        if (!(name instanceof idexpression_1.default)) {
            var message = "Expected TABLE name: " + name.toCode("R", 0);
            this._messages.push(message);
            return;
        }
        this._symbols.delete(name);
        this._lvalues.add(name);
        var expr = args.pop();
        var n = +expr.toCode("R", 0);
        if (n > 1) {
            var message = "TABLEs of more than one independent variable not supported: " + name.toCode("R", 0);
            this._messages.push(message);
            return;
        }
        expr = args.pop();
        var d = +expr.toCode("R", 0);
        if ((2 * d) != args.length) {
            var message = "Misspecified TABLE: " + name.toCode("R", 0);
            this._messages.push(message);
            return;
        }
        args.reverse();
        var independent = [];
        var dependent = [];
        for (var i = 0; i < d; ++i) {
            independent.push(args[i]);
        }
        for (var i = 0; i < d; ++i) {
            dependent.push(args[d + i]);
        }
        var tableStatement = new tablestatement_1.default(name, independent, dependent);
        var comments = this.collectComments(ctx.start.line);
        (_a = tableStatement.comments).push.apply(_a, comments);
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        codeBlock.codeBlocks.push(tableStatement);
        var _a;
    };
    Acsl2RListener.prototype.exitParameter = function (ctx) {
        var statement = this.getCurrentStatement();
        statement.isConstant = true;
        var comments = this.collectComments(ctx.start.line);
        (_a = statement.comments).push.apply(_a, comments);
        this._messages.push("Converted PARAMETER: " + Acsl2RListener.toText(ctx, statement));
        var _a;
    };
    Acsl2RListener.prototype.enterDoContinueIncr = function (ctx) {
        var doContinueSection = new docontinuesection_1.default();
        this.processPreSectionComments(doContinueSection.comments);
        this._codeBlocks.push(doContinueSection);
    };
    Acsl2RListener.prototype.exitDoContinueIncr = function (ctx) {
        this._exitDoContinueIncr(ctx);
    };
    Acsl2RListener.prototype._exitDoContinueIncr = function (ctx) {
        var doContinueSection = this.popCodeBlock(docontinuesection_1.default);
        var terminalLabel = this._expressions.pop();
        doContinueSection.increment = doContinueSection.increment || this._expressions.pop();
        doContinueSection.terminal = this._expressions.pop();
        doContinueSection.label = this._expressions.pop();
        var initialIndex = doContinueSection.codeBlocks.shift();
        if (terminalLabel.toCode("R", 0) != doContinueSection.label.toCode("R", 0)) {
            this._messages.push("Label mismatch in DO..CONTINUE: " + terminalLabel.toCode("R", 0) + " != " + doContinueSection.label.toCode("R", 0));
            return;
        }
        if (!(initialIndex instanceof statement_1.default) || null == initialIndex.lvalue) {
            this._messages.push("Expecting assignment in DO..CONTINUE index initializer: " + Acsl2RListener.toText(ctx, initialIndex));
            return;
        }
        doContinueSection.index = initialIndex.lvalue;
        doContinueSection.initial = initialIndex.computation;
        this._doContinueSections.push(doContinueSection);
        if (0 < doContinueSection.codeBlocks.length) {
            var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
            codeBlock.codeBlocks.push(doContinueSection);
        }
    };
    Acsl2RListener.prototype.enterDoContinue = function (ctx) {
        var doContinueSection = new docontinuesection_1.default();
        doContinueSection.increment = new floatexpression_1.default(1.0);
        this.processPreSectionComments(doContinueSection.comments);
        this._codeBlocks.push(doContinueSection);
    };
    Acsl2RListener.prototype.exitDoContinue = function (ctx) {
        this._exitDoContinueIncr(ctx);
    };
    Acsl2RListener.prototype.exitGoTo = function (ctx) {
        var label = this._expressions.pop();
        var statement = new statement_1.default(null, label);
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        codeBlock.codeBlocks.push(statement);
        var message = "GO TO not supported. Please remove, or refactor your code: " + Acsl2RListener.toText(ctx, statement);
        this._messages.push(message);
    };
    Acsl2RListener.prototype.exitLabelStatement = function (ctx) {
        var label = this._expressions.pop();
        var statement = this.popStatement();
        var asText = statement.toCode("R");
        statement = new statement_1.default(null, new stringexpression_1.default(label.toCode("R", 0) + " #" + asText));
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        codeBlock.codeBlocks.push(statement);
        var message = "Label:Statement not supported. Please remove, or refactor your code: " + Acsl2RListener.toText(ctx, statement);
        this._messages.push(message);
    };
    Acsl2RListener.prototype.exitLabelContinue = function (ctx) {
        var label = this._expressions.pop();
        var statement = new statement_1.default(null, label);
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        codeBlock.codeBlocks.push(statement);
        var message = "Label:CONTINUE not supported. Please remove, or refactor your code: " + Acsl2RListener.toText(ctx, statement);
        this._messages.push(message);
    };
    Acsl2RListener.prototype.exitCall = function (ctx) {
        var statement = this.popStatement();
        this._comments.length = 0;
        this._messages.push("Discarded CALL: " + Acsl2RListener.toText(ctx, statement));
    };
    Acsl2RListener.prototype.exitVariable = function (ctx) {
        this.popStatement();
        this.collectComments(ctx.start.line);
        this._messages.push("Discarded VARIABLE statement");
    };
    Acsl2RListener.prototype.exitType = function (acslType, ctx) {
        var _this = this;
        var nDeclarations = Acsl2RListener.getCommaCount(ctx.children) + 1;
        var declarations = [];
        for (var i = 0; i < nDeclarations; ++i) {
            declarations.push(this._expressions.pop());
        }
        declarations.reverse();
        var comments = this.collectComments(ctx.start.line);
        declarations.forEach(function (d, i) {
            var name;
            if (d instanceof fnexpression_1.default) {
                name = d.name;
                var dimensions = d.args;
                var arrayStatement = new arraystatement_1.default(name, acslType, dimensions);
                if (!!comments) {
                    (_a = arrayStatement.comments).push.apply(_a, comments);
                    comments = null;
                }
                var codeBlock = _this._codeBlocks[_this._codeBlocks.length - 1];
                codeBlock.codeBlocks.push(arrayStatement);
            }
            else if (d instanceof idexpression_1.default) {
                name = d;
            }
            else {
                throw new Error("Exiting type declaration with unexpected expression type: " + typeof d);
            }
            _this._lvalues.add(name);
            _this._acslProgram.typeDictionary.set(name.toCode("R", 0), acslType);
            var _a;
        });
    };
    Acsl2RListener.prototype.exitDimensionType = function (ctx) {
        this.exitType(enum_1.AcslType.Dimension, ctx);
    };
    Acsl2RListener.prototype.exitRealType = function (ctx) {
        this.exitType(enum_1.AcslType.Real, ctx);
    };
    Acsl2RListener.prototype.exitDoublePrecisionType = function (ctx) {
        this.exitType(enum_1.AcslType.DoublePrecision, ctx);
    };
    Acsl2RListener.prototype.exitIntegerType = function (ctx) {
        this.exitType(enum_1.AcslType.Integer, ctx);
    };
    Acsl2RListener.prototype.exitLogicalType = function (ctx) {
        this.exitType(enum_1.AcslType.Logical, ctx);
    };
    Acsl2RListener.prototype.exitCharacterType = function (ctx) {
        this.exitType(enum_1.AcslType.Character, ctx);
    };
    Acsl2RListener.prototype._enterProcedural = function (ctx) {
        var outputs = [];
        var inputs = [];
        var ids = outputs;
        for (var i = 0; i < ctx.children.length; ++i) {
            var child = ctx.children[i];
            if (!!child.symbol) {
                if (child.symbol.type == tokenTypeEQUALS) {
                    ids = inputs;
                }
                else if (child.symbol.type == tokenTypeID) {
                    ids.push(child.symbol.text);
                }
            }
        }
        var outputExpressions = outputs.map(function (o) { return new idexpression_1.default(o); });
        var inputExpressions = inputs.map(function (i) { return new idexpression_1.default(i); });
        var proceduralSection = new proceduralsection_1.default();
        (_a = proceduralSection.outputs).push.apply(_a, outputExpressions);
        (_b = proceduralSection.inputs).push.apply(_b, inputExpressions);
        this._codeBlocks.push(proceduralSection);
        var _a, _b;
    };
    Acsl2RListener.prototype._exitProcedural = function (ctx) {
        var procedural = this._codeBlocks.pop();
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        codeBlock.codeBlocks.push(procedural);
    };
    Acsl2RListener.prototype.enterProceduralWithComment = function (ctx) {
        this._enterProcedural(ctx);
    };
    Acsl2RListener.prototype.exitProceduralWithComment = function (ctx) {
        this._exitProcedural(ctx);
    };
    Acsl2RListener.prototype.enterProceduralWithoutComment = function (ctx) {
        this._enterProcedural(ctx);
    };
    Acsl2RListener.prototype.exitProceduralWithoutComment = function (ctx) {
        this._exitProcedural(ctx);
    };
    Acsl2RListener.prototype.exitAssignExprOrAssignWithComment = function (ctx) {
        this._exitAssignExprOrAssign(ctx);
    };
    Acsl2RListener.prototype.exitAssignExprOrAssign = function (ctx) {
        this._exitAssignExprOrAssign(ctx);
    };
    Acsl2RListener.prototype._exitAssignExprOrAssign = function (ctx) {
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        var statement = codeBlock.codeBlocks.pop();
        if (!(statement instanceof statement_1.default))
            throw new Error("Expecting Statement on exiting ExprOrAssign");
        var computation = statement.computation;
        var lvalue = this._expressions.pop();
        if (lvalue instanceof fnexpression_1.default) {
            this._symbols.delete(lvalue.name);
            var arrayExpression = new arrayexpression_1.default(lvalue.name, lvalue.args);
            lvalue = arrayExpression;
        }
        else if (lvalue instanceof idexpression_1.default) {
            this._symbols.delete(lvalue);
            this._lvalues.add(lvalue);
        }
        else if (lvalue instanceof texpression_1.default) {
            // VARIABLE statement
        }
        else {
            this._messages.push("Unexpected lvalue type: " + lvalue.toCode("R", 0));
            return;
        }
        statement.lvalue = lvalue;
        var comments = this.collectComments(ctx.start.line);
        (_a = statement.comments).push.apply(_a, comments);
        if (computation instanceof integexpression_1.default) {
            this._acslProgram.dynamicSection.derivativeSection.integs.push(statement);
        }
        else {
            codeBlock.codeBlocks.push(statement);
        }
        var _a;
    };
    Acsl2RListener.prototype.exitListExprOrAssignWithComment = function (ctx) {
        this._exitListExprOrAssign(ctx);
    };
    Acsl2RListener.prototype.exitListExprOrAssign = function (ctx) {
        this._exitListExprOrAssign(ctx);
    };
    Acsl2RListener.prototype._exitListExprOrAssign = function (ctx) {
        var lvalue = this._expressions.shift();
        if (!(lvalue instanceof idexpression_1.default)) {
            this._messages.push("Expecting identifier in list assignment: " + lvalue.toCode("R", 0));
        }
        var name = new idexpression_1.default(lvalue.toCode("R", 0));
        this._symbols.add(name);
        var items = [];
        while (0 < this._expressions.length) {
            var item = this._expressions.shift();
            if (item instanceof floatexpression_1.default) {
                items.push(item);
            }
            else if (item instanceof muldivexpression_1.default && item.lhs instanceof floatexpression_1.default) {
                var repeat = item.lhs.float;
                while (repeat--) {
                    items.push(item.rhs.clone());
                }
            }
            else {
                this._messages.push("Unexpected list item: " + item.toCode("R", 0));
            }
        }
        var index = 1;
        var arrayExpression = new arrayexpression_1.default(name, [new floatexpression_1.default(index)]);
        var statement = new statement_1.default(arrayExpression, items.shift());
        var comments = this.collectComments(ctx.start.line);
        (_a = statement.comments).push.apply(_a, comments);
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        codeBlock.codeBlocks.push(statement);
        while (0 < items.length) {
            arrayExpression = new arrayexpression_1.default(name, [new floatexpression_1.default(++index)]);
            statement = new statement_1.default(arrayExpression, items.shift());
            codeBlock.codeBlocks.push(statement);
        }
        var _a;
    };
    Acsl2RListener.prototype.exitMultipleExprOrAssignWithComment = function (ctx) {
        this._exitMultipleExprOrAssign(ctx);
    };
    Acsl2RListener.prototype.exitMultipleExprOrAssign = function (ctx) {
        this._exitMultipleExprOrAssign(ctx);
    };
    Acsl2RListener.prototype._exitMultipleExprOrAssign = function (ctx) {
        var nDeclarations = Acsl2RListener.getCommaCount(ctx.children) + 1;
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        var comments = this.collectComments(ctx.start.line);
        while (0 < nDeclarations--) {
            var lvalue = this._expressions.shift();
            var computation = this._expressions.shift();
            if (lvalue instanceof fnexpression_1.default) {
                this._symbols.delete(lvalue.name);
                var arrayExpression = new arrayexpression_1.default(lvalue.name, lvalue.args);
                lvalue = arrayExpression;
            }
            else if (lvalue instanceof idexpression_1.default) {
                this._symbols.delete(lvalue);
                this._lvalues.add(lvalue);
            }
            else {
                this._messages.push("Unexpected lvalue type: " + lvalue.toCode("R", 0));
                return;
            }
            var statement = new statement_1.default(lvalue, computation);
            (_a = statement.comments).push.apply(_a, comments);
            if (computation instanceof integexpression_1.default) {
                this._acslProgram.dynamicSection.derivativeSection.integs.push(statement);
            }
            else {
                codeBlock.codeBlocks.push(statement);
            }
        }
        var _a;
    };
    Acsl2RListener.prototype.exitExprExprOrAssign = function (ctx) {
        if (0 == this._expressions.length)
            return; // termt etc.
        var computation = this._expressions.pop();
        var statement = new statement_1.default(null, computation);
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        codeBlock.codeBlocks.push(statement);
    };
    Acsl2RListener.prototype.exitBoolExpr = function (ctx) {
        var node = ctx.children[0];
        var value = node.symbol.text;
        var expression = new booleanexpression_1.default(value);
        this._expressions.push(expression);
    };
    Acsl2RListener.prototype.exitFloatExpr = function (ctx) {
        var node = ctx.FLOAT();
        var expression = new floatexpression_1.default(+node.symbol.text);
        this._expressions.push(expression);
    };
    Acsl2RListener.prototype.exitIdExpr = function (ctx) {
        var node = ctx.ID();
        var text = node.symbol.text;
        if (text.toLowerCase() == "t") {
            var expression = new texpression_1.default();
            this._expressions.push(expression);
        }
        else {
            var expression = new idexpression_1.default(text);
            this._symbols.add(expression);
            this._expressions.push(expression);
        }
    };
    Acsl2RListener.prototype.exitSubExpr = function (ctx) {
        var expression = new subexpression_1.default(this.refactor(this._expressions.pop()));
        this._expressions.push(expression);
    };
    Acsl2RListener.prototype.exitExpExpr = function (ctx) {
        var rhs = this.refactor(this._expressions.pop());
        var lhs = this.refactor(this._expressions.pop());
        var expression = new expexpression_1.default(lhs, rhs);
        this._expressions.push(expression);
    };
    Acsl2RListener.prototype.exitInfixExpr = function (ctx) {
        var node = ctx.children[1];
        var infix = node.symbol.text;
        var rhs = this._expressions.pop();
        var lhs = this._expressions.pop();
        var expression = new infixexpression_1.default(lhs, infix, rhs);
        this._expressions.push(expression);
    };
    Acsl2RListener.prototype.exitUnaryExpr = function (ctx) {
        var node = ctx.children[0];
        var op = node.symbol.text;
        var operand = this._expressions.pop();
        var expression = new unaryplusminusexpression_1.default(op, operand);
        this._expressions.push(expression);
    };
    Acsl2RListener.prototype.exitMulDivExpr = function (ctx) {
        var node = ctx.children[1];
        var op = node.symbol.text;
        var rhs = this.refactor(this._expressions.pop());
        var lhs = this.refactor(this._expressions.pop());
        var expression = new muldivexpression_1.default(lhs, op, rhs);
        this._expressions.push(expression);
    };
    Acsl2RListener.prototype.exitStrExpr = function (ctx) {
        var node = ctx.STRING();
        var expression = new stringexpression_1.default(node.symbol.text);
        this._expressions.push(expression);
    };
    Acsl2RListener.prototype.exitNotExpr = function (ctx) {
        var operand = this._expressions.pop();
        var expression = new notexpression_1.default(operand);
        this._expressions.push(expression);
    };
    Acsl2RListener.prototype.exitIntExpr = function (ctx) {
        var node = ctx.INT();
        var expression = new floatexpression_1.default(+node.symbol.text);
        this._expressions.push(expression);
    };
    Acsl2RListener.prototype.exitAddSubExpr = function (ctx) {
        var node = ctx.children[1];
        var op = node.symbol.text;
        var rhs = this.refactor(this._expressions.pop());
        var lhs = this.refactor(this._expressions.pop());
        var expression = new addsubexpression_1.default(lhs, op, rhs);
        this._expressions.push(expression);
    };
    Acsl2RListener.prototype.exitFnExpr = function (ctx) {
        var child = ctx.children[0];
        var fn = child.symbol.text.toLowerCase();
        var args = [];
        if (ctx.children.length > 3) {
            var nArgs = Acsl2RListener.getCommaCount(ctx.children) + 1;
            for (var i = 0; i < nArgs; ++i) {
                args.push(this._expressions.pop());
            }
            if (nArgs > 1)
                args.reverse();
        }
        var expression = null;
        if (fn == "integ") {
            expression = new integexpression_1.default(args[0], args[1]);
        }
        else if (fn == "rsw") {
            expression = new rswexpression_1.default(args[0], args[1], args[2]);
        }
        else if (fn == "termt") {
            var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
            if (codeBlock instanceof conditionalsection_1.default) {
                var message = "Ignoring conditional TERMT: " + args[0].toCode("R", 0);
                this._messages.push(message);
            }
            else if (!!this._acslProgram.dynamicSection.termt) {
                var message = "Found extra TERMT: " + args[0].toCode("R", 0);
                this._messages.push(message);
            }
            else {
                this._acslProgram.dynamicSection.termt = args[0];
            }
            this._comments.length = 0; // discard
        }
        else if (fn == "pulse") {
            expression = new pulseexpression_1.default(args[0], args[1], args[2]);
            this._acslProgram.nonNativeExpressions.push(expression);
        }
        else if (fn == "step") {
            expression = new stepexpression_1.default(args[0]);
            this._acslProgram.nonNativeExpressions.push(expression);
        }
        else {
            var name_1 = new idexpression_1.default(child.symbol.text);
            this._symbols.add(name_1);
            expression = new fnexpression_1.default(name_1, args);
        }
        !!expression && this._expressions.push(expression);
    };
    Acsl2RListener.prototype.exitComment = function (ctx) {
        var node = ctx.children[0];
        var text = node.symbol.text.substring(1).trim();
        var placement = enum_1.CommentPlacement.None;
        var lineNo = ctx.start.line;
        var comment = new comment_1.default(text, placement, lineNo);
        if (lineNo <= this._lastHeaderCommentLineNo) {
            comment.placement = enum_1.CommentPlacement.PreSection;
            this._acslProgram.comments.push(comment);
        }
        else {
            this._comments.push(comment);
        }
    };
    Acsl2RListener.prototype.refactor = function (expression) {
        if (expression instanceof integexpression_1.default) {
            var stateId = "state__" + expression.id.toCode("R", 0);
            var id = new idexpression_1.default(stateId);
            this._lvalues.add(id);
            var statement = new statement_1.default(id, expression);
            this._acslProgram.dynamicSection.derivativeSection.integs.push(statement);
            this._messages.push("Factored out state from INTEG subexpression: " + stateId);
            expression = id;
        }
        return expression;
    };
    Acsl2RListener.prototype.processEndSectionComments = function (sectionEndComments, sectionEndLineNo) {
        var _this = this;
        var comments = this._comments;
        this._comments = [];
        comments.forEach(function (c) {
            if (sectionEndLineNo == c.lineNo) {
                // discard
            }
            else if (sectionEndLineNo > c.lineNo) {
                c.placement = enum_1.CommentPlacement.EndSection;
                sectionEndComments.push(c);
            }
            else {
                _this._comments.push(c);
            }
        });
    };
    Acsl2RListener.prototype.processPreSectionComments = function (sectionPreComments) {
        var comments = this._comments;
        this._comments = [];
        comments.forEach(function (c) {
            c.placement = enum_1.CommentPlacement.PreSection;
            sectionPreComments.push(c);
        });
    };
    Acsl2RListener.prototype.popStatement = function () {
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        var statement = codeBlock.codeBlocks.pop();
        if (!(statement instanceof statement_1.default || statement instanceof tablestatement_1.default))
            throw new Error("Listener failure -- expecting Statement or TableStatement: " + typeof (statement));
        return statement;
    };
    Acsl2RListener.prototype.getCurrentStatement = function (codeBlock) {
        codeBlock = codeBlock || this._codeBlocks[this._codeBlocks.length - 1];
        var statement = codeBlock.codeBlocks[codeBlock.codeBlocks.length - 1];
        return statement instanceof statement_1.default || statement instanceof tablestatement_1.default ?
            statement : null;
    };
    Acsl2RListener.prototype.popCodeBlock = function (type) {
        var codeBlock = this._codeBlocks.pop();
        if (!(codeBlock instanceof type))
            throw new Error("Listener failure -- type mismatch: " + typeof (type) + "/" + typeof (codeBlock));
        return codeBlock;
    };
    Acsl2RListener.prototype.getCurrentSection = function (type) {
        var codeBlock = this._codeBlocks[this._codeBlocks.length - 1];
        return codeBlock instanceof type ? codeBlock : null;
    };
    Acsl2RListener.prototype.collectComments = function (assignmentLineNo) {
        if (0 == this._comments.length)
            return [];
        var comments = this._comments;
        this._comments = [];
        var nComments = comments.length;
        for (var i = 0; i < nComments; ++i) {
            var comment = comments[i];
            var lineNo = comment.lineNo;
            if (lineNo < (assignmentLineNo - 1))
                comment.placement = enum_1.CommentPlacement.Content;
            else if (lineNo == (assignmentLineNo - 1))
                comment.placement = enum_1.CommentPlacement.Line;
            else if (lineNo == assignmentLineNo)
                comment.placement = enum_1.CommentPlacement.EndLine;
            else {
                comments.splice(i, 1);
                this._comments.push(comment);
            }
        }
        return comments;
    };
    Acsl2RListener.prototype.gatherEndProgramComments = function (ctx) {
        var _this = this;
        var stopLine;
        for (var i = 0; i < ctx.children.length; ++i) {
            var child = ctx.children[i];
            if (child.hasOwnProperty("symbol")) {
                var node = child;
                if (node.symbol.text.toLowerCase() == "end") {
                    stopLine = node.symbol.line;
                    break;
                }
            }
        }
        this.processEndSectionComments(this._acslProgram.comments, stopLine);
        var comments = this._comments;
        this._comments = [];
        comments.forEach(function (c) {
            if (c.lineNo > stopLine) {
                c.placement = enum_1.CommentPlacement.PostSection;
                _this._acslProgram.comments.push(c);
            }
        });
    };
    Acsl2RListener.prototype.checkSectionLvalueConsistency = function (codeBlocks, sectionName) {
        var _this = this;
        var allSymbolsProvided = [];
        codeBlocks.forEach(function (cb) { return allSymbolsProvided.push.apply(allSymbolsProvided, cb.symbolsProvided); });
        var symbolsProvided = new Set(allSymbolsProvided);
        var ncLvalues = [];
        var lcLvalues = [];
        symbolsProvided.forEach(function (lv) {
            if (!(lv instanceof idexpression_1.default))
                return;
            var lvalue = lv.toCode("R", 0);
            var lcLvalue = lvalue.toLowerCase();
            var index = lcLvalues.indexOf(lcLvalue);
            if (!!~index && lvalue == ncLvalues[index]) {
                // exact match with existing
            }
            else if (!~index) {
                ncLvalues.push(lvalue);
                lcLvalues.push(lcLvalue);
            }
            else {
                var message = "Probable fatal error in " + sectionName + ": found assigments to BOTH " + lvalue + " and " + ncLvalues[index];
                _this._messages.push(message);
            }
        });
    };
    Acsl2RListener.prototype.checkLvalueConsistency = function () {
        var _this = this;
        this.checkSectionLvalueConsistency(this._acslProgram.initialSection.codeBlocks, "INITIAL");
        this._acslProgram.dynamicSection.discreteSections.forEach(function (ds) {
            _this.checkSectionLvalueConsistency(ds.codeBlocks, "DISCRETE=" + ds.name);
        });
        this.checkSectionLvalueConsistency(this._acslProgram.dynamicSection.derivativeSection.codeBlocks, "DERIVATIVE");
        this.checkSectionLvalueConsistency(this._acslProgram.terminalSection.codeBlocks, "TERMINAL");
    };
    Acsl2RListener.prototype.reviseSymbolUsage = function () {
        var _this = this;
        var lvalues = new Set();
        var lcLvalues = [];
        this._lvalues.forEach(function (lv) {
            var lcLvalue = lv.toCode("R", 0).toLowerCase();
            if (!~lcLvalues.indexOf(lcLvalue)) {
                lcLvalues.push(lcLvalue);
                lvalues.add(lv);
            }
        });
        lvalues.forEach(function (lv) {
            var revised = new Set();
            var definition = lv.toCode("R", 0);
            _this._symbols.forEach(function (s) {
                var revision = s.reviseId(definition);
                if (!!revision)
                    revised.add(revision);
            });
            if (0 < revised.size) {
                var list = Array.from(revised).join(", ");
                var message = "Definition is " + definition + ". Found and corrected: " + list + ".";
                _this._messages.push(message);
            }
        });
    };
    Acsl2RListener.distributeMiscellaneousCodeBlocks = function (acslProgram, codeBlocks) {
        codeBlocks.forEach(function (cb) {
            if (cb instanceof statement_1.default) {
                if (cb.computation instanceof floatexpression_1.default) {
                    acslProgram.initialSection.codeBlocks.push(cb);
                }
                else {
                    acslProgram.terminalSection.codeBlocks.push(cb);
                }
            }
        });
    };
    Acsl2RListener.getCommaCount = function (children) {
        var count = 0;
        for (var i = 0; i < children.length; ++i) {
            var child = children[i];
            if (!!child.symbol) {
                if (child.symbol.type == tokenTypeCOMMA) {
                    ++count;
                }
            }
        }
        return count;
    };
    Acsl2RListener.toText = function (antlrObj, acslScriptObj) {
        var text;
        if (!!antlrObj && !!antlrObj.getText && typeof antlrObj.getText == "function") {
            text = antlrObj.getText.apply(antlrObj);
        }
        else if (js_1.implementsProperty(antlrObj, "symbol")) {
            text = antlrObj.symbol.text;
        }
        else if (js_1.implementsProperty(antlrObj, "text")) {
            text = antlrObj.text;
        }
        else if (!!acslScriptObj && !!acslScriptObj.toCode && typeof acslScriptObj.toCode == "function") {
            text = acslScriptObj.toCode.apply(acslScriptObj, ["R", 0]);
        }
        text = text || "?";
        text = text.trim();
        return text;
    };
    return Acsl2RListener;
}());
function createAcsl2RListener(acslProgram, messages) {
    var l = new acsl_1.AcslListener();
    var m = new Acsl2RListener(acslProgram, messages);
    lodash_1.assignIn(l, m);
    return l;
}
exports.createAcsl2RListener = createAcsl2RListener;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var registerPromiseWorker = __webpack_require__(120);
var enum_1 = __webpack_require__(1);
var acsl2RParser = __webpack_require__(112);
var rScriptGenerator = __webpack_require__(115);
function parseACSL(parseACSLPayload) {
    var messages = [];
    var diagnostics = [];
    var acslProgram = acsl2RParser.parse(parseACSLPayload.code, messages, diagnostics);
    var rScript = rScriptGenerator.generate(acslProgram, parseACSLPayload.fileName, messages, diagnostics, parseACSLPayload.configureForRVis);
    return rScript;
}
function handleDispatch(message) {
    switch (message.type) {
        case enum_1.MessageType.ParseACSL:
            return parseACSL(message.payload);
        default:
            throw new Error("Unhandled worker message: " + message.type);
    }
}
registerPromiseWorker(function (message) {
    var result = handleDispatch(message);
    return result;
});


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(6);
var antlr4_1 = __webpack_require__(25);
var AcslErrorListener = (function () {
    function AcslErrorListener(messages, diagnostics, source) {
        this._messages = messages;
        this._diagnostics = diagnostics;
        this._source = source;
    }
    AcslErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
        var offendingSource = this._source[line - 1].trim();
        var message = "Syntax error or unsupported feature: " + offendingSource;
        var haveRecorded = 0 < this._messages.length && message == this._messages[this._messages.length - 1];
        if (!haveRecorded)
            this._messages.push(message);
        var issue = !!offendingSymbol ? "offending symbol \"" + offendingSymbol + "\"" : "issue";
        this._diagnostics.push(issue + " on or before line " + line + ": " + msg);
    };
    return AcslErrorListener;
}());
function createAcslErrorListener(messages, diagnostics, source) {
    var errorListener = new antlr4_1.error.ErrorListener();
    lodash_1.assignIn(errorListener, new AcslErrorListener(messages, diagnostics, source));
    return errorListener;
}
exports.createAcslErrorListener = createAcslErrorListener;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var initialsection_1 = __webpack_require__(63);
var dynamicsection_1 = __webpack_require__(60);
var terminalsection_1 = __webpack_require__(71);
var sectionbase_1 = __webpack_require__(9);
var AcslProgram = (function (_super) {
    __extends(AcslProgram, _super);
    function AcslProgram() {
        var _this = _super.call(this, "acslprogram") || this;
        _this._initialSection = new initialsection_1.default();
        _this._dynamicSection = new dynamicsection_1.default();
        _this._terminalSection = new terminalsection_1.default();
        _this._typeDictionary = new Map();
        _this._nonNativeExpressions = [];
        return _this;
    }
    AcslProgram.prototype.toCode = function (lang) {
        throw new Error("Not implemented");
    };
    Object.defineProperty(AcslProgram.prototype, "symbolsRequired", {
        get: function () {
            throw new Error("Not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AcslProgram.prototype, "symbolsProvided", {
        get: function () {
            throw new Error("Not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AcslProgram.prototype, "initialSection", {
        get: function () {
            return this._initialSection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AcslProgram.prototype, "dynamicSection", {
        get: function () {
            return this._dynamicSection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AcslProgram.prototype, "terminalSection", {
        get: function () {
            return this._terminalSection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AcslProgram.prototype, "typeDictionary", {
        get: function () {
            return this._typeDictionary;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AcslProgram.prototype, "nonNativeExpressions", {
        get: function () {
            return this._nonNativeExpressions;
        },
        enumerable: true,
        configurable: true
    });
    AcslProgram.prototype.applyAcslTypes = function (typeDictionary) {
        this.applyAcslTypesToCodeBlocks(typeDictionary);
        this.initialSection.applyAcslTypes(typeDictionary);
        this._dynamicSection.applyAcslTypes(typeDictionary);
        this._terminalSection.applyAcslTypes(typeDictionary);
    };
    return AcslProgram;
}(sectionbase_1.SectionBase));
exports.default = AcslProgram;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Comment = (function () {
    function Comment(text, placement, lineNo) {
        this._text = text;
        this._placement = placement;
        this._lineNo = lineNo;
    }
    Object.defineProperty(Comment.prototype, "text", {
        get: function () {
            return this._text;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Comment.prototype, "placement", {
        get: function () {
            return this._placement;
        },
        set: function (value) {
            this._placement = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Comment.prototype, "lineNo", {
        get: function () {
            return this._lineNo;
        },
        enumerable: true,
        configurable: true
    });
    return Comment;
}());
exports.default = Comment;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sectionbase_1 = __webpack_require__(9);
var objectmodel_1 = __webpack_require__(0);
var objectmodel_2 = __webpack_require__(0);
var ConditionalSection = (function (_super) {
    __extends(ConditionalSection, _super);
    function ConditionalSection() {
        return _super.call(this, "conditional") || this;
    }
    ConditionalSection.prototype.toCode = function (lang) {
        throw new Error("Not implemented");
    };
    Object.defineProperty(ConditionalSection.prototype, "symbolsRequired", {
        get: function () {
            var symbolsProvided = this.symbolsProvided;
            var required = objectmodel_1.getSymbolsRequired(symbolsProvided, this.codeBlocks);
            if (!!this.condition) {
                required.push.apply(required, this.condition.symbols);
            }
            return required;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConditionalSection.prototype, "symbolsProvided", {
        get: function () {
            var symbolsProvided = objectmodel_1.getSymbolsProvided(this.codeBlocks);
            return symbolsProvided;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConditionalSection.prototype, "condition", {
        get: function () {
            return this._condition;
        },
        set: function (value) {
            this._condition = value;
        },
        enumerable: true,
        configurable: true
    });
    ConditionalSection.prototype.applyAcslTypes = function (typeDictionary) {
        this.applyAcslTypesToCodeBlocks(typeDictionary);
        if (!!this._condition) {
            var replacement = objectmodel_2.applyAcslTypesToExpression(this._condition, typeDictionary);
            if (!!replacement)
                this._condition = replacement;
            this._condition.applyAcslTypes(typeDictionary);
        }
    };
    return ConditionalSection;
}(sectionbase_1.SectionBase));
exports.default = ConditionalSection;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sectionbase_1 = __webpack_require__(9);
var objectmodel_1 = __webpack_require__(0);
var DiscreteSection = (function (_super) {
    __extends(DiscreteSection, _super);
    function DiscreteSection() {
        var _this = _super.call(this, "discrete") || this;
        _this._schedules = [];
        return _this;
    }
    DiscreteSection.prototype.toCode = function (lang) {
        throw new Error("Not implemented");
    };
    Object.defineProperty(DiscreteSection.prototype, "symbolsRequired", {
        get: function () {
            var symbolsProvided = this.symbolsProvided;
            var required = objectmodel_1.getSymbolsRequired(symbolsProvided, this.codeBlocks);
            return required;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiscreteSection.prototype, "symbolsProvided", {
        get: function () {
            var symbolsProvided = objectmodel_1.getSymbolsProvided(this.codeBlocks);
            return symbolsProvided;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiscreteSection.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiscreteSection.prototype, "intervalAssignment", {
        get: function () {
            return this._intervalAssignment;
        },
        set: function (value) {
            this._intervalAssignment = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiscreteSection.prototype, "schedules", {
        get: function () {
            return this._schedules;
        },
        enumerable: true,
        configurable: true
    });
    DiscreteSection.prototype.applyAcslTypes = function (typeDictionary) {
        this.applyAcslTypesToCodeBlocks(typeDictionary);
        !!this._intervalAssignment && this._intervalAssignment.applyAcslTypes(typeDictionary);
        this._schedules.forEach(function (s) { return s.applyAcslTypes(typeDictionary); });
    };
    return DiscreteSection;
}(sectionbase_1.SectionBase));
exports.default = DiscreteSection;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var ExpExpression = (function (_super) {
    __extends(ExpExpression, _super);
    function ExpExpression(operand1, operand2) {
        var _this = _super.call(this) || this;
        _this.set("operand1", operand1);
        _this.set("operand2", operand2);
        return _this;
    }
    ExpExpression.prototype.toCode = function (lang, prec) {
        var wrap = prec != enum_1.Prec.Sub && prec > enum_1.Prec.Exp;
        var code = this.get("operand1").toCode(lang, enum_1.Prec.Exp) + " ^ " + this.get("operand2").toCode(lang, enum_1.Prec.Exp);
        return wrap ? "(" + code + ")" : code;
    };
    Object.defineProperty(ExpExpression.prototype, "symbols", {
        get: function () {
            return this.get("operand1").symbols.concat(this.get("operand2").symbols);
        },
        enumerable: true,
        configurable: true
    });
    ExpExpression.prototype.applyAcslTypes = function (typeDictionary) {
        var replacement = objectmodel_1.applyAcslTypesToExpression(this.get("operand1"), typeDictionary);
        if (!!replacement)
            this.set("operand1", replacement);
        replacement = objectmodel_1.applyAcslTypesToExpression(this.get("operand2"), typeDictionary);
        if (!!replacement)
            this.set("operand2", replacement);
    };
    ExpExpression.prototype.clone = function () {
        var expression = new ExpExpression(null, null);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return ExpExpression;
}(expressionbase_1.ExpressionBase));
exports.default = ExpExpression;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var IntegExpression = (function (_super) {
    __extends(IntegExpression, _super);
    function IntegExpression(id, value) {
        var _this = _super.call(this) || this;
        _this.set("id", id);
        _this.set("value", value);
        return _this;
    }
    IntegExpression.prototype.toCode = function (lang, prec) {
        throw new Error("transliterating INTEG");
    };
    Object.defineProperty(IntegExpression.prototype, "symbols", {
        get: function () {
            return this.get("id").symbols.concat(this.get("value").symbols);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IntegExpression.prototype, "id", {
        get: function () {
            return this.get("id");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IntegExpression.prototype, "value", {
        get: function () {
            return this.get("value");
        },
        enumerable: true,
        configurable: true
    });
    IntegExpression.prototype.applyAcslTypes = function (typeDictionary) {
        var replacement = objectmodel_1.applyAcslTypesToExpression(this.get("value"), typeDictionary);
        if (!!replacement)
            this.set("value", replacement);
    };
    IntegExpression.prototype.clone = function () {
        var expression = new IntegExpression(null, null);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return IntegExpression;
}(expressionbase_1.ExpressionBase));
exports.default = IntegExpression;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var NotExpression = (function (_super) {
    __extends(NotExpression, _super);
    function NotExpression(operand) {
        var _this = _super.call(this) || this;
        _this.set("operand", operand);
        return _this;
    }
    NotExpression.prototype.toCode = function (lang, prec) {
        var wrap = prec != enum_1.Prec.Sub && prec > enum_1.Prec.Not;
        var code = "!" + this.get("operand").toCode(lang, enum_1.Prec.Not);
        return wrap ? "(" + code + ")" : code;
    };
    Object.defineProperty(NotExpression.prototype, "symbols", {
        get: function () {
            return this.get("operand").symbols;
        },
        enumerable: true,
        configurable: true
    });
    NotExpression.prototype.applyAcslTypes = function (typeDictionary) {
        var replacement = objectmodel_1.applyAcslTypesToExpression(this.get("operand"), typeDictionary);
        if (!!replacement)
            this.set("operand", replacement);
    };
    NotExpression.prototype.clone = function () {
        var expression = new NotExpression(null);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return NotExpression;
}(expressionbase_1.ExpressionBase));
exports.default = NotExpression;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var RswExpression = (function (_super) {
    __extends(RswExpression, _super);
    function RswExpression(test, ifTrue, ifFalse) {
        var _this = _super.call(this) || this;
        _this.set("test", test);
        _this.set("ifTrue", ifTrue);
        _this.set("ifFalse", ifFalse);
        return _this;
    }
    RswExpression.prototype.toCode = function (lang, prec) {
        return "ifelse(" + this.get("test").toCode(lang, enum_1.Prec.Rsw) + ", " + this.get("ifTrue").toCode(lang, enum_1.Prec.Rsw) + ", " + this.get("ifFalse").toCode(lang, enum_1.Prec.Rsw) + ")";
    };
    Object.defineProperty(RswExpression.prototype, "symbols", {
        get: function () {
            return this.get("test").symbols.concat(this.get("ifTrue").symbols, this.get("ifFalse").symbols);
        },
        enumerable: true,
        configurable: true
    });
    RswExpression.prototype.applyAcslTypes = function (typeDictionary) {
        var replacement = objectmodel_1.applyAcslTypesToExpression(this.get("test"), typeDictionary);
        if (!!replacement)
            this.set("test", replacement);
        replacement = objectmodel_1.applyAcslTypesToExpression(this.get("ifTrue"), typeDictionary);
        if (!!replacement)
            this.set("ifTrue", replacement);
        replacement = objectmodel_1.applyAcslTypesToExpression(this.get("ifFalse"), typeDictionary);
        if (!!replacement)
            this.set("ifFalse", replacement);
    };
    RswExpression.prototype.clone = function () {
        var expression = new RswExpression(null, null, null);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return RswExpression;
}(expressionbase_1.ExpressionBase));
exports.default = RswExpression;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var expressionbase_1 = __webpack_require__(5);
var StringExpression = (function (_super) {
    __extends(StringExpression, _super);
    function StringExpression(str) {
        var _this = _super.call(this) || this;
        _this._str = str;
        return _this;
    }
    StringExpression.prototype.toCode = function (lang, prec) {
        return this._str.replace(/'/g, "\"");
    };
    Object.defineProperty(StringExpression.prototype, "symbols", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    StringExpression.prototype.applyAcslTypes = function (typeDictionary) {
    };
    StringExpression.prototype.clone = function () {
        var expression = new StringExpression(this._str);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return StringExpression;
}(expressionbase_1.ExpressionBase));
exports.default = StringExpression;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = __webpack_require__(1);
var objectmodel_1 = __webpack_require__(0);
var expressionbase_1 = __webpack_require__(5);
var UnaryPlusMinusExpression = (function (_super) {
    __extends(UnaryPlusMinusExpression, _super);
    function UnaryPlusMinusExpression(op, operand) {
        var _this = _super.call(this) || this;
        _this._op = op;
        _this.set("operand", operand);
        return _this;
    }
    UnaryPlusMinusExpression.prototype.toCode = function (lang, prec) {
        var wrap = prec != enum_1.Prec.Sub && prec > enum_1.Prec.Unary;
        var code = this._op + this.get("operand").toCode(lang, enum_1.Prec.Unary);
        return wrap ? "(" + code + ")" : code;
    };
    Object.defineProperty(UnaryPlusMinusExpression.prototype, "symbols", {
        get: function () {
            return this.get("operand").symbols;
        },
        enumerable: true,
        configurable: true
    });
    UnaryPlusMinusExpression.prototype.applyAcslTypes = function (typeDictionary) {
        var replacement = objectmodel_1.applyAcslTypesToExpression(this.get("operand"), typeDictionary);
        if (!!replacement)
            this.set("operand", replacement);
    };
    UnaryPlusMinusExpression.prototype.clone = function () {
        var expression = new UnaryPlusMinusExpression(this._op, null);
        expression.cloneExpressionsFrom(this);
        return expression;
    };
    return UnaryPlusMinusExpression;
}(expressionbase_1.ExpressionBase));
exports.default = UnaryPlusMinusExpression;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(6);
var format_1 = __webpack_require__(22);
var assignParametersSrc = __webpack_require__(143);
var tmplAssignParameters = lodash_1.template(assignParametersSrc);
function generateAssignParametersRScript(acslProgram, configureForRVis, parameterAssignments) {
    var parameterAssignmentData = parameterAssignments.map(function (pa) { return format_1.codeBlockToCode(pa, format_1.unitIndent, configureForRVis); });
    var assignParameters = tmplAssignParameters({
        parameterAssignmentData: parameterAssignmentData
    });
    return assignParameters;
}
exports.generateAssignParametersRScript = generateAssignParametersRScript;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(6);
var enum_1 = __webpack_require__(1);
var format_1 = __webpack_require__(22);
var objectmodel_1 = __webpack_require__(0);
var calculateVariablesSrc = __webpack_require__(144);
var tmplCalculateVariables = lodash_1.template(calculateVariablesSrc);
function generateCalculateVariablesRScript(acslProgram, computations) {
    var groups = lodash_1.partition(computations, function (c) { return objectmodel_1.isArrayStatement(c) || objectmodel_1.isTableStatement(c); });
    var declarations = groups[0];
    var calculations = groups[1];
    var declarationData = declarations.map(function (c) { return format_1.codeBlockToCode(c, format_1.unitIndent + format_1.unitIndent, false); });
    var calculationData = calculations.map(function (c) { return format_1.codeBlockToCode(c, format_1.unitIndent + format_1.unitIndent, false); });
    var initialEndSectionComments = format_1.generateCommentBlock(acslProgram.initialSection.comments, enum_1.CommentPlacement.EndSection, "#", format_1.unitIndent + format_1.unitIndent);
    var calculateVariables = tmplCalculateVariables({
        computationData: declarationData.concat(calculationData),
        initialEndSectionComments: initialEndSectionComments
    });
    return calculateVariables;
}
exports.generateCalculateVariablesRScript = generateCalculateVariablesRScript;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(6);
var enum_1 = __webpack_require__(1);
var format_1 = __webpack_require__(22);
var derivativeSrc = __webpack_require__(145);
var tmplDerivative = lodash_1.template(derivativeSrc);
function generateDerivativeRScript(acslProgram, messages, parameterSymbols, initialComputationSymbols, discreteSymbols) {
    var integStatements = acslProgram.dynamicSection.derivativeSection.integs;
    var integAssignments = integStatements.map(function (s) {
        return {
            stateId: s.lvalue.toCode("R", 0),
            derivativeId: s.computation.id.toCode("R", 0),
            initialValue: s.computation.value.toCode("R", 0)
        };
    });
    var notFromState = new Set();
    discreteSymbols.forEach(function (s) {
        var isState = integAssignments.some(function (ia) { return ia.stateId == s; });
        if (!isState)
            notFromState.add(s);
    });
    if (0 < notFromState.size) {
        var list = Array.from(notFromState).join(", ");
        var message = "Adding computations from DISCRETE sections to integrator state: " + list;
        messages.push(message);
        var argsToIntegrator = [];
        argsToIntegrator.push.apply(argsToIntegrator, Array.from(parameterSymbols));
        argsToIntegrator.push.apply(argsToIntegrator, Array.from(initialComputationSymbols));
        var alreadyDefined = argsToIntegrator.filter(function (a) { return notFromState.has(a); });
        if (0 < alreadyDefined.length) {
            list = alreadyDefined.join(", ");
            message = "State set in DISCRETE section also defined elsewhere: " + list;
            messages.push(message);
        }
    }
    notFromState.forEach(function (s) { return integAssignments.push({
        stateId: s, derivativeId: "0.0", initialValue: "0.0"
    }); });
    var symbolsProvided = new Set();
    acslProgram.dynamicSection.derivativeSection.codeBlocks.forEach(function (cb) { return cb.symbolsProvided.forEach(function (s) { return symbolsProvided.add(s.toCode("R", 0)); }); });
    integAssignments.forEach(function (ia) { return symbolsProvided.delete(ia.derivativeId); });
    var outputs = Array.from(symbolsProvided);
    var computationData = acslProgram.dynamicSection.derivativeSection.codeBlocks.map(function (c) { return format_1.codeBlockToCode(c, format_1.unitIndent + format_1.unitIndent, false); });
    var derivativeEndSectionComments = format_1.generateCommentBlock(acslProgram.dynamicSection.derivativeSection.comments, enum_1.CommentPlacement.EndSection, "#", format_1.unitIndent + format_1.unitIndent);
    var derivative = tmplDerivative({
        integAssignments: integAssignments,
        computationData: computationData,
        outputs: outputs,
        derivativeEndSectionComments: derivativeEndSectionComments
    });
    return { derivative: derivative, integAssignments: integAssignments, outputs: outputs };
}
exports.generateDerivativeRScript = generateDerivativeRScript;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(6);
var infixexpression_1 = __webpack_require__(62);
var addsubexpression_1 = __webpack_require__(54);
var idexpression_1 = __webpack_require__(31);
var texpression_1 = __webpack_require__(72);
var fnexpression_1 = __webpack_require__(43);
var muldivexpression_1 = __webpack_require__(64);
var floatexpression_1 = __webpack_require__(42);
var subexpression_1 = __webpack_require__(69);
var format_1 = __webpack_require__(22);
var objectmodel_1 = __webpack_require__(0);
var eventHandlerSrc = __webpack_require__(146);
var tmplEventHandler = lodash_1.template(eventHandlerSrc);
function processDiscreteSections(acslProgram, messages) {
    // populate empty event data structures from DISCRETE sections
    var discreteEvents = acslProgram.dynamicSection.discreteSections.map(function (ds) {
        var discreteSection = ds;
        var name = ds.name;
        var schedules = [];
        var interval = !!ds.intervalAssignment ? +ds.intervalAssignment.computation.toCode("R", 0) : null;
        if (Number.isNaN(interval)) {
            messages.push("Failed to configure events for DISCRETE " + name + " -- needed numerical value for INTERVAL.");
            interval = null;
        }
        var codeSource = ds;
        var discreteEvent = { discreteSection: discreteSection, integratorEvent: { name: name, schedules: schedules, interval: interval, codeSource: codeSource } };
        return discreteEvent;
    });
    // for each SCHEDULE triggered from within a DISCRETE section, add an empty schedule data structure to the target event data structure
    discreteEvents.forEach(function (scheduledBy) {
        scheduledBy.discreteSection.schedules.forEach(function (schedule) {
            var name = schedule.lhs.toCode("R", 0);
            var eventScheduled = discreteEvents.find(function (de) { return de.integratorEvent.name.toLowerCase() == name.toLowerCase(); });
            if (null == eventScheduled) {
                messages.push("Unidentified DISCRETE scheduled: " + name);
                return;
            }
            var integratorEventSchedule = {
                schedule: schedule.rhs,
                times: [],
                tests: [],
                scheduledBy: scheduledBy.integratorEvent,
                eventScheduled: eventScheduled.integratorEvent
            };
            eventScheduled.integratorEvent.schedules.push(integratorEventSchedule);
        });
    });
    var tStop = !!acslProgram.dynamicSection.tStop ? +acslProgram.dynamicSection.tStop.computation.toCode("R", 0) : 0;
    var cintervalName = !!acslProgram.dynamicSection.cinterval ? acslProgram.dynamicSection.cinterval.lvalue : null;
    var withInterval = discreteEvents.filter(function (de) { return !!de.integratorEvent.interval && de.integratorEvent.interval > 0; });
    // for each DISCRETE section with an INTERVAL set, add a schedule data structure with time points up to stop time
    withInterval.forEach(function (de) {
        var integratorEventSchedule = {
            schedule: null,
            times: [],
            tests: [],
            scheduledBy: null,
            eventScheduled: de.integratorEvent
        };
        for (var t = 0; t < tStop; t += de.integratorEvent.interval) {
            integratorEventSchedule.times.push(new floatexpression_1.default(t));
        }
        integratorEventSchedule.tests.push(intervalToTimePointTest(new floatexpression_1.default(de.integratorEvent.interval), null, cintervalName));
        de.integratorEvent.schedules.push(integratorEventSchedule);
    });
    // for each DISCRETE section with an INTERVAL set, recurse into data structures and add time points to those items
    // with T in their SCHEDULE statements
    withInterval.forEach(function (wi) {
        discreteEvents.forEach(function (de) {
            if (wi == de)
                return;
            var triggerTimes = wi.integratorEvent.schedules[wi.integratorEvent.schedules.length - 1].times;
            var triggerOffset = null;
            configureTimesRec(de, wi, triggerTimes, triggerOffset, wi.discreteSection.intervalAssignment.computation, cintervalName, discreteEvents);
        });
    });
    var initialScheduleData = acslProgram.initialSection.schedules.map(function (s) { return ({ name: s.lhs.toCode("R", 0), time: s.rhs }); });
    // add scheduling for each SCHEDULE set outside the DISCRETE sections
    discreteEvents.forEach(function (de) {
        var scheduleData = initialScheduleData.filter(function (sd) { return sd.name.toLowerCase() == de.discreteSection.name.toLowerCase(); });
        scheduleData.forEach(function (sd) {
            var integratorEventSchedule = {
                schedule: sd.time,
                times: [],
                tests: [],
                scheduledBy: null,
                eventScheduled: de.integratorEvent
            };
            de.integratorEvent.schedules.push(integratorEventSchedule);
        });
        de.integratorEvent.schedules.forEach(function (s) {
            if (0 < s.times.length)
                return;
            if (null == s.schedule)
                return;
            s.times.push(s.schedule);
            s.tests.push(scheduleToTComparison(s.schedule, cintervalName));
        });
    });
    // replace t in comparison rhs with zero
    discreteEvents.forEach(function (scheduledBy) {
        scheduledBy.discreteSection.schedules.forEach(function (schedule) {
            objectmodel_1.replaceSymbol(schedule.rhs, "t", new floatexpression_1.default(0));
        });
    });
    var integratorEvents = discreteEvents.map(function (de) { return de.integratorEvent; });
    return integratorEvents;
}
exports.processDiscreteSections = processDiscreteSections;
function configureTimesRec(toConfigure, trigger, triggerTimes, triggerOffset, interval, cintervalName, discreteEvents) {
    toConfigure.integratorEvent.schedules.forEach(function (s) {
        if (s.scheduledBy != trigger.integratorEvent)
            return;
        if (0 < s.times.length)
            return;
        if (!s.schedule.symbols.some(function (s) { return s instanceof texpression_1.default; }))
            return;
        triggerTimes.forEach(function (tt) {
            var time = new addsubexpression_1.default(tt, "+", s.schedule);
            s.times.push(time);
        });
        var offset = !!triggerOffset ? new addsubexpression_1.default(triggerOffset, "+", s.schedule) : s.schedule;
        var timePointTest = intervalToTimePointTest(interval, offset, cintervalName);
        s.tests.push(timePointTest);
        discreteEvents.forEach(function (de) {
            if (toConfigure == de)
                return;
            configureTimesRec(de, toConfigure, s.times, offset, interval, cintervalName, discreteEvents);
        });
    });
}
function intervalToTimePointTest(interval, offset, cintervalName) {
    // (t %% I) < (CINT / 2)
    // ((t - off) %% I) < (CINT / 2)
    var numerator = new texpression_1.default();
    if (!!offset) {
        if (!(offset instanceof subexpression_1.default || offset instanceof idexpression_1.default || offset instanceof floatexpression_1.default)) {
            offset = new subexpression_1.default(offset);
        }
        numerator = new subexpression_1.default(new addsubexpression_1.default(numerator, "-", offset));
    }
    var moduloExpression = new infixexpression_1.default(numerator, "%%", interval);
    moduloExpression = new subexpression_1.default(moduloExpression);
    var rhs = new muldivexpression_1.default(cintervalName, "/", new floatexpression_1.default(2));
    rhs = new subexpression_1.default(rhs);
    var test = new infixexpression_1.default(moduloExpression, "__lt", rhs);
    return test;
}
function scheduleToTComparison(schedule, cintervalName) {
    // abs(t - S) < (CINT / 2)
    if (!(schedule instanceof subexpression_1.default || schedule instanceof idexpression_1.default || schedule instanceof floatexpression_1.default)) {
        schedule = new subexpression_1.default(schedule);
    }
    var tComparison = new addsubexpression_1.default(new texpression_1.default(), "-", schedule);
    tComparison = new fnexpression_1.default(new idexpression_1.default("abs"), [tComparison]);
    var rhs = new muldivexpression_1.default(cintervalName, "/", new floatexpression_1.default(2));
    rhs = new subexpression_1.default(rhs);
    tComparison = new infixexpression_1.default(tComparison, "__lt", rhs);
    return tComparison;
}
function generateEventHandlerRScript(integAssignments, integratorEvents) {
    var events = integratorEvents.map(function (ed) {
        var test = null;
        if (0 < ed.schedules.length) {
            var scheduleTests = ed.schedules.map(function (s) { return s.tests.map(function (t) { return t.toCode("R", 0); }); });
            var tests = scheduleTests.map(function (st) { return st.join(" | "); });
            test = tests.join(" | ");
        }
        if (null == test || 0 == test.trim().length) {
            test = "F";
        }
        var computationData = ed.codeSource.codeBlocks.map(function (c) { return format_1.codeBlockToCode(c, format_1.unitIndent + format_1.unitIndent + format_1.unitIndent, false); });
        return { test: test, computationData: computationData };
    });
    var eventHandler = tmplEventHandler({
        integAssignments: integAssignments,
        events: events
    });
    return eventHandler;
}
exports.generateEventHandlerRScript = generateEventHandlerRScript;


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var wordWrap = __webpack_require__(220);
var lodash_1 = __webpack_require__(6);
var enum_1 = __webpack_require__(1);
var format_1 = __webpack_require__(22);
var pulseexpression_1 = __webpack_require__(66);
var stepexpression_1 = __webpack_require__(68);
var version_1 = __webpack_require__(41);
var rScriptSrc = __webpack_require__(147);
var tmplRScript = lodash_1.template(rScriptSrc);
function generateHeader(comment, fileName, messages, diagnostics) {
    var lines = [];
    var line = comment + " Generated from " + fileName + " by acsl2r v" + version_1.version + " on " + new Date().toISOString();
    lines.push(line);
    if (0 < messages.length) {
        lines.push("");
        line = comment + " Review the following before use!";
        lines.push(line);
        var unique = new Set(messages);
        unique.forEach(function (m) {
            lines.push("");
            var parts = m.split("\n");
            parts.forEach(function (p) { return lines.push(comment + " " + p); });
        });
    }
    if (0 < diagnostics.length) {
        lines.push("");
        line = comment + " The lexer/parser issued the following diagnostics:";
        lines.push(line);
        var unique = new Set(diagnostics);
        unique.forEach(function (d) {
            lines.push("");
            var wrapped = wordWrap(d, { indent: '', width: 78 });
            var parts = wrapped.split("\n");
            parts.forEach(function (p) { return lines.push(comment + " " + p); });
        });
    }
    lines.push("");
    line = comment + " Help improve this tool: please submit faults you find to";
    lines.push(line);
    line = comment + " https://github.com/acsl2r/acsl2r/issues";
    lines.push(line);
    var header = lines.join("\n");
    return header;
}
function generateRScript(acslProgram, fileName, messages, diagnostics, assignParameters, calculateVariables, derivative, eventHandler, runModel, terminal) {
    var header = generateHeader("#", fileName, messages, diagnostics);
    var headerComments = format_1.generateCommentBlock(acslProgram.comments, enum_1.CommentPlacement.PreSection, "#", "");
    var initialComments = format_1.generateCommentBlock(acslProgram.initialSection.comments, enum_1.CommentPlacement.PreSection, "#", "");
    var dynamicComments = format_1.generateCommentBlock(acslProgram.dynamicSection.comments, enum_1.CommentPlacement.PreSection, "#", "");
    var derivativeComments = format_1.generateCommentBlock(acslProgram.dynamicSection.derivativeSection.comments, enum_1.CommentPlacement.PreSection, "#", "");
    var dynamicEndSectionComments = format_1.generateCommentBlock(acslProgram.dynamicSection.comments, enum_1.CommentPlacement.EndSection, "#", "");
    var terminalComments = format_1.generateCommentBlock(acslProgram.terminalSection.comments, enum_1.CommentPlacement.PreSection, "#", "");
    var programEndSectionComments = format_1.generateCommentBlock(acslProgram.comments, enum_1.CommentPlacement.EndSection, "#", "");
    var footerComments = format_1.generateCommentBlock(acslProgram.comments, enum_1.CommentPlacement.PostSection, "#", "");
    var requiresPulseFunction = acslProgram.nonNativeExpressions.some(function (e) { return e instanceof pulseexpression_1.default; });
    var requiresStepFunction = acslProgram.nonNativeExpressions.some(function (e) { return e instanceof stepexpression_1.default; });
    var rScript = tmplRScript({
        header: header,
        headerComments: headerComments,
        initialComments: initialComments,
        assignParameters: assignParameters,
        calculateVariables: calculateVariables,
        dynamicComments: dynamicComments,
        derivativeComments: derivativeComments,
        derivative: derivative,
        eventHandler: eventHandler,
        runModel: runModel,
        dynamicEndSectionComments: dynamicEndSectionComments,
        terminalComments: terminalComments,
        terminal: terminal,
        programEndSectionComments: programEndSectionComments,
        footerComments: footerComments,
        requiresPulseFunction: requiresPulseFunction,
        requiresStepFunction: requiresStepFunction
    });
    return rScript;
}
exports.generateRScript = generateRScript;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(6);
var runModelSrc = __webpack_require__(148);
var tmplRunModel = lodash_1.template(runModelSrc);
function generateRunModelRScript(tStopParamName, cIntParamName, integAssignments, integratorEvents) {
    var eventTimes = null;
    if (0 < integratorEvents.length) {
        var times_1 = new Set();
        integratorEvents.forEach(function (ie) { return ie.schedules.forEach(function (s) { return s.times.forEach(function (t) { return times_1.add(t.toCode("R", 0)); }); }); });
        eventTimes = Array.from(times_1).join(", ");
    }
    var runModel = tmplRunModel({
        tStopParamName: tStopParamName,
        cIntParamName: cIntParamName,
        integAssignments: integAssignments,
        eventTimes: eventTimes
    });
    return runModel;
}
exports.generateRunModelRScript = generateRunModelRScript;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(6);
var enum_1 = __webpack_require__(1);
var format_1 = __webpack_require__(22);
var objectmodel_1 = __webpack_require__(0);
var terminalSrc = __webpack_require__(149);
var tmplTerminal = lodash_1.template(terminalSrc);
function generateTerminalRScript(acslProgram, outputs) {
    var codeBlocks = [];
    codeBlocks.push.apply(codeBlocks, acslProgram.codeBlocks.filter(function (c) { return objectmodel_1.isStatement(c) && !c.isConstant; }));
    codeBlocks.push.apply(codeBlocks, acslProgram.dynamicSection.codeBlocks.filter(function (c) { return objectmodel_1.isStatement(c) && !c.isConstant; }));
    codeBlocks.push.apply(codeBlocks, acslProgram.terminalSection.codeBlocks);
    var computationData = codeBlocks.map(function (c) { return format_1.codeBlockToCode(c, format_1.unitIndent + format_1.unitIndent + format_1.unitIndent, false); });
    var terminalEndSectionComments = format_1.generateCommentBlock(acslProgram.terminalSection.comments, enum_1.CommentPlacement.EndSection, "#", format_1.unitIndent + format_1.unitIndent + format_1.unitIndent);
    var terminal = tmplTerminal({
        computationData: computationData,
        terminalEndSectionComments: terminalEndSectionComments,
        lastOutput: 0 == outputs.length ? "???" : outputs[outputs.length - 1]
    });
    return terminal;
}
exports.generateTerminalRScript = generateTerminalRScript;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function implementsProperty(obj, name) {
    if (null == obj)
        return false;
    var proto = Object.getPrototypeOf(obj);
    if (null == proto)
        return false; // obj===Object
    var desc = Object.getOwnPropertyDescriptor(proto, name);
    return !!desc || implementsProperty(proto, name);
}
exports.implementsProperty = implementsProperty;


/***/ }),
/* 142 */,
/* 143 */
/***/ (function(module, exports) {

module.exports = "assign_parameters = function()\r\n{\r\n<% parameterAssignmentData.forEach(function(lines) { lines.forEach(function(line, i) {%><%= line %><% if(i == (lines.length - 1)) { %>\r\n<% } %>\r\n<% });}); %>  # return all variables in this function's environment\r\n  as.list(sys.frame(sys.nframe()))\r\n}"

/***/ }),
/* 144 */
/***/ (function(module, exports) {

module.exports = "calculate_variables = function(parameters)\r\n{\r\n  with(parameters,\r\n  {\r\n<% computationData.forEach(function(lines) { lines.forEach(function(line, i) { %><%= line %><% if(i == (lines.length - 1)) { %>\r\n<% } %>\r\n<% });}); if(0 < initialEndSectionComments.length) { %>\r\n<%= initialEndSectionComments %>\r\n<% } %>    # return all variables in this function's environment\r\n    as.list(sys.frame(sys.nframe()))\r\n\r\n  }) # end with\r\n}"

/***/ }),
/* 145 */
/***/ (function(module, exports) {

module.exports = "derivative = function(t, y, parameters, ...)\r\n{\r\n  with(parameters,\r\n  {<% integAssignments.forEach(function(ia, i) { %>\r\n    <%= ia.stateId %> <- y[<%= (i+1) %>]<% }); %>\r\n\r\n<% computationData.forEach(function(lines) { lines.forEach(function(line, i) { %><%= line %><% if(i == (lines.length - 1)) { %>\r\n<% } %>\r\n<% });}); if(0 < derivativeEndSectionComments.length) { %>\r\n<%= derivativeEndSectionComments %>\r\n<% } %>\r\n    list(c(\r\n      # pack and return derivatives<% integAssignments.forEach(function(ia, i) { %>\r\n      <%= ia.derivativeId %><% if(i < (integAssignments.length-1)) {%>,<% } %><% }); %>\r\n    ), c(\r\n      # pack and return outputs<% outputs.forEach(function(o, i) { %>\r\n      <% if(i > 0) {%>#, <% } else { %>#  <% } %><%= o %> = unname(<%= o %>)<% }); %>\r\n      )\r\n    ) # end list\r\n\r\n  }) # end with\r\n}"

/***/ }),
/* 146 */
/***/ (function(module, exports) {

module.exports = "event_handler <- function(t, y, parameters, ...)\r\n{\r\n  with(parameters, \r\n  {<% integAssignments.forEach(function(ia, i) { %>\r\n    <%= ia.stateId %> <- y[<%= (i+1) %>]<% }); %>\r\n  <% events.forEach(function(e, i) { %>\r\n    if (<%= e.test %>)\r\n    {<% e.computationData.forEach(function(lines) { lines.forEach(function(line) { %>\r\n<%= line %><% });});%>      \r\n    }\r\n    <% }); %>\r\n    return(c(<% integAssignments.forEach(function(ia, i) { %>\r\n      <%= ia.stateId %><% if(i < (integAssignments.length - 1)) {%>,<% } %><% }); %>\r\n    ))\r\n\r\n  })  \r\n}"

/***/ }),
/* 147 */
/***/ (function(module, exports) {

module.exports = "<%= header %>\r\n<% if(0 < headerComments.length) { %>\r\n<%= headerComments %>\r\n<% } %>\r\n#pragma exec run_model parameters\r\n\r\nif (!require(deSolve))\r\n{\r\n  stop(\"The deSolve package is required. Please install it.\")\r\n}\r\n<% if(0 < initialComments.length) { %>\r\n<%= initialComments %>\r\n<% } %>\r\n# INITIAL\r\n\r\n<%= assignParameters %>\r\n\r\n<%= calculateVariables %>\r\n\r\n# END!INITIAL\r\n<% if(requiresPulseFunction) { %>\r\npulse <- function(t, tz, p, w)\r\n{\r\n  if(t < tz) return(0)\r\n  t <- t - tz\r\n  t <- t %% p\r\n  return(ifelse(t <= w, 1, 0))\r\n}<%}%>\r\n<% if(requiresStepFunction) { %>\r\ntzstep <- function(t, tz)\r\n{\r\n  y <- ifelse(t < tz, 0, 1)\r\n  return(y)\r\n}<%}%>\r\n<% if(0 < dynamicComments.length) { %>\r\n<%= dynamicComments %>\r\n<% } %>\r\n# DYNAMIC\r\n<% if(0 < derivativeComments.length) { %>\r\n<%= derivativeComments %>\r\n<% } %>\r\n# DERIVATIVE\r\n\r\n<%= derivative %>\r\n\r\n<% if(!!eventHandler) { %><%= eventHandler %><% } %>\r\n\r\n<%= runModel %>\r\n\r\nparameters <- assign_parameters()\r\nsolution <- run_model(parameters)\r\n<% if(0 < dynamicEndSectionComments.length) { %>\r\n<%= dynamicEndSectionComments %>\r\n<% }; if(0 < programEndSectionComments.length) { %>\r\n<%= programEndSectionComments %>\r\n<% } %>\r\n# END ! DERIVATIVE\r\n# END ! DYNAMIC\r\n# END ! PROGRAM\r\n<% if(0 < footerComments.length) { %>\r\n<%= footerComments %><% } %>\r\n<% if(0 < terminalComments.length) { %>\r\n<%= terminalComments %><% } %>\r\n<%= terminal %>\r\n"

/***/ }),
/* 148 */
/***/ (function(module, exports) {

module.exports = "run_model <- function(parameters)\r\n{\r\n  parameters <- calculate_variables(parameters)\r\n\r\n  with(parameters, {\r\n\r\n    TSTART <- 0.0\r\n    times <- seq.int(TSTART, <%= tStopParamName %>, <%= cIntParamName %>)\r\n\r\n    y <- c(<% integAssignments.forEach(function(ia, i) { %>\r\n      <%= ia.stateId %> = <%= ia.initialValue %><% if(i < (integAssignments.length-1)) {%>,<% } %><% }); %>\r\n      )\r\n<% if(!!eventTimes) { %>\r\n    eventTimes <- c(<%= eventTimes %>)\r\n    eventTimes <- sort(unique(eventTimes))\r\n    \r\n    times <- c(times, eventTimes)\r\n    times <- sort(unique(times))\r\n\r\n    solution <- deSolve::ode(\r\n      y, \r\n      times, \r\n      derivative, \r\n      parameters, \r\n      events = list(func = event_handler, time = eventTimes),\r\n      method = \"lsodes\"\r\n      )\r\n<% } else { %>\r\n    solution <- deSolve::ode(\r\n      y, \r\n      times, \r\n      derivative, \r\n      parameters, \r\n      method = \"lsodes\"\r\n      )\r\n<% } %>\r\n    return(as.matrix(unclass(solution)))\r\n  })\r\n}"

/***/ }),
/* 149 */
/***/ (function(module, exports) {

module.exports = "if (F)\r\n{\r\n  parameters <- calculate_variables(parameters)\r\n  \r\n  with(parameters, {\r\n    with(as.data.frame(solution), {\r\n  \r\n      # TERMINAL\r\n<% computationData.forEach(function(lines) { lines.forEach(function(line) { %><%= line %>\r\n<% });}); if(0 < terminalEndSectionComments.length) { %>\r\n<%= terminalEndSectionComments %>\r\n<% } %>      \r\n      # plot(time, <%= lastOutput %>, type = \"l\", xlab = \"time [units]\", ylab = \"[m]\", main = \"[main]\")\r\n      \r\n      # END ! TERMINAL\r\n    })\r\n  })\r\n}\r\n"

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

// Generated from Acsl.g4 by ANTLR 4.6
// jshint ignore: start
var antlr4 = __webpack_require__(25);


var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0002F\u02ea\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0007\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003",
    "\u000b\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003\u000e\u0003",
    "\u000e\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0017\u0003",
    "\u0017\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001d\u0003",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003 \u0003",
    " \u0003!\u0003!\u0003\"\u0003\"\u0003#\u0003#\u0003$\u0003$\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003",
    "&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u01aa\n7\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00059\u01b9\n9\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003>\u0003",
    ">\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003B\u0003B\u0003",
    "B\u0003B\u0006B\u01eb\nB\rB\u000eB\u01ec\u0003B\u0003B\u0003B\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003",
    "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003",
    "U\u0003U\u0007U\u0280\nU\fU\u000eU\u0283\u000bU\u0003U\u0003U\u0003",
    "V\u0006V\u0288\nV\rV\u000eV\u0289\u0003W\u0006W\u028d\nW\rW\u000eW\u028e",
    "\u0003W\u0003W\u0007W\u0293\nW\fW\u000eW\u0296\u000bW\u0003W\u0005W",
    "\u0299\nW\u0003W\u0006W\u029c\nW\rW\u000eW\u029d\u0003W\u0003W\u0003",
    "W\u0003W\u0006W\u02a4\nW\rW\u000eW\u02a5\u0003W\u0005W\u02a9\nW\u0005",
    "W\u02ab\nW\u0003X\u0003X\u0005X\u02af\nX\u0003X\u0003X\u0003X\u0007",
    "X\u02b4\nX\fX\u000eX\u02b7\u000bX\u0003X\u0003X\u0003X\u0003X\u0007",
    "X\u02bd\nX\fX\u000eX\u02c0\u000bX\u0005X\u02c2\nX\u0003Y\u0003Y\u0003",
    "Z\u0003Z\u0005Z\u02c8\nZ\u0003Z\u0003Z\u0003[\u0003[\u0003\\\u0003\\",
    "\u0003]\u0003]\u0003^\u0003^\u0003_\u0003_\u0003`\u0003`\u0003a\u0003",
    "a\u0007a\u02da\na\fa\u000ea\u02dd\u000ba\u0003a\u0005a\u02e0\na\u0003",
    "a\u0003a\u0003b\u0006b\u02e5\nb\rb\u000eb\u02e6\u0003b\u0003b\u0002",
    "\u0002c\u0003\u0003\u0005\u0004\u0007\u0005\t\u0006\u000b\u0007\r\b",
    "\u000f\t\u0011\n\u0013\u000b\u0015\u0002\u0017\u0002\u0019\u0002\u001b",
    "\u0002\u001d\u0002\u001f\u0002!\u0002#\u0002%\u0002\'\u0002)\u0002+",
    "\u0002-\u0002/\u00021\u00023\u00025\u00027\u00029\u0002;\u0002=\u0002",
    "?\u0002A\u0002C\u0002E\u0002G\u0002I\fK\rM\u000eO\u000fQ\u0010S\u0011",
    "U\u0012W\u0013Y\u0014[\u0015]\u0016_\u0017a\u0018c\u0019e\u001ag\u001b",
    "i\u001ck\u001dm\u001eo\u001fq s!u\"w#y${%}&\u007f\'\u0081(\u0083)\u0085",
    "*\u0087+\u0089,\u008b-\u008d.\u008f/\u00910\u00931\u00952\u00973\u0099",
    "4\u009b5\u009d6\u009f7\u00a18\u00a39\u00a5:\u00a7;\u00a9<\u00ab=\u00ad",
    ">\u00af?\u00b1\u0002\u00b3\u0002\u00b5\u0002\u00b7@\u00b9A\u00bbB\u00bd",
    "C\u00bfD\u00c1E\u00c3F\u0003\u0002!\u0004\u0002CCcc\u0004\u0002DDdd",
    "\u0004\u0002EEee\u0004\u0002FFff\u0004\u0002GGgg\u0004\u0002HHhh\u0004",
    "\u0002IIii\u0004\u0002JJjj\u0004\u0002KKkk\u0004\u0002LLll\u0004\u0002",
    "MMmm\u0004\u0002NNnn\u0004\u0002OOoo\u0004\u0002PPpp\u0004\u0002QQq",
    "q\u0004\u0002RRrr\u0004\u0002SSss\u0004\u0002TTtt\u0004\u0002UUuu\u0004",
    "\u0002VVvv\u0004\u0002WWww\u0004\u0002XXxx\u0004\u0002YYyy\u0004\u0002",
    "ZZzz\u0004\u0002[[{{\u0004\u0002\\\\||\u0004\u0002))^^\u0004\u0002-",
    "-//\u0004\u0002C\\c|\u0004\u0002\f\f\u000f\u000f\u0005\u0002\u000b\f",
    "\u000f\u000f\"\"\u02e5\u0002\u0003\u0003\u0002\u0002\u0002\u0002\u0005",
    "\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002\u0002\u0002\t",
    "\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002\r",
    "\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002\u0011",
    "\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002I",
    "\u0003\u0002\u0002\u0002\u0002K\u0003\u0002\u0002\u0002\u0002M\u0003",
    "\u0002\u0002\u0002\u0002O\u0003\u0002\u0002\u0002\u0002Q\u0003\u0002",
    "\u0002\u0002\u0002S\u0003\u0002\u0002\u0002\u0002U\u0003\u0002\u0002",
    "\u0002\u0002W\u0003\u0002\u0002\u0002\u0002Y\u0003\u0002\u0002\u0002",
    "\u0002[\u0003\u0002\u0002\u0002\u0002]\u0003\u0002\u0002\u0002\u0002",
    "_\u0003\u0002\u0002\u0002\u0002a\u0003\u0002\u0002\u0002\u0002c\u0003",
    "\u0002\u0002\u0002\u0002e\u0003\u0002\u0002\u0002\u0002g\u0003\u0002",
    "\u0002\u0002\u0002i\u0003\u0002\u0002\u0002\u0002k\u0003\u0002\u0002",
    "\u0002\u0002m\u0003\u0002\u0002\u0002\u0002o\u0003\u0002\u0002\u0002",
    "\u0002q\u0003\u0002\u0002\u0002\u0002s\u0003\u0002\u0002\u0002\u0002",
    "u\u0003\u0002\u0002\u0002\u0002w\u0003\u0002\u0002\u0002\u0002y\u0003",
    "\u0002\u0002\u0002\u0002{\u0003\u0002\u0002\u0002\u0002}\u0003\u0002",
    "\u0002\u0002\u0002\u007f\u0003\u0002\u0002\u0002\u0002\u0081\u0003\u0002",
    "\u0002\u0002\u0002\u0083\u0003\u0002\u0002\u0002\u0002\u0085\u0003\u0002",
    "\u0002\u0002\u0002\u0087\u0003\u0002\u0002\u0002\u0002\u0089\u0003\u0002",
    "\u0002\u0002\u0002\u008b\u0003\u0002\u0002\u0002\u0002\u008d\u0003\u0002",
    "\u0002\u0002\u0002\u008f\u0003\u0002\u0002\u0002\u0002\u0091\u0003\u0002",
    "\u0002\u0002\u0002\u0093\u0003\u0002\u0002\u0002\u0002\u0095\u0003\u0002",
    "\u0002\u0002\u0002\u0097\u0003\u0002\u0002\u0002\u0002\u0099\u0003\u0002",
    "\u0002\u0002\u0002\u009b\u0003\u0002\u0002\u0002\u0002\u009d\u0003\u0002",
    "\u0002\u0002\u0002\u009f\u0003\u0002\u0002\u0002\u0002\u00a1\u0003\u0002",
    "\u0002\u0002\u0002\u00a3\u0003\u0002\u0002\u0002\u0002\u00a5\u0003\u0002",
    "\u0002\u0002\u0002\u00a7\u0003\u0002\u0002\u0002\u0002\u00a9\u0003\u0002",
    "\u0002\u0002\u0002\u00ab\u0003\u0002\u0002\u0002\u0002\u00ad\u0003\u0002",
    "\u0002\u0002\u0002\u00af\u0003\u0002\u0002\u0002\u0002\u00b7\u0003\u0002",
    "\u0002\u0002\u0002\u00b9\u0003\u0002\u0002\u0002\u0002\u00bb\u0003\u0002",
    "\u0002\u0002\u0002\u00bd\u0003\u0002\u0002\u0002\u0002\u00bf\u0003\u0002",
    "\u0002\u0002\u0002\u00c1\u0003\u0002\u0002\u0002\u0002\u00c3\u0003\u0002",
    "\u0002\u0002\u0003\u00c5\u0003\u0002\u0002\u0002\u0005\u00c7\u0003\u0002",
    "\u0002\u0002\u0007\u00c9\u0003\u0002\u0002\u0002\t\u00cb\u0003\u0002",
    "\u0002\u0002\u000b\u00cd\u0003\u0002\u0002\u0002\r\u00d0\u0003\u0002",
    "\u0002\u0002\u000f\u00d2\u0003\u0002\u0002\u0002\u0011\u00d4\u0003\u0002",
    "\u0002\u0002\u0013\u00d6\u0003\u0002\u0002\u0002\u0015\u00d8\u0003\u0002",
    "\u0002\u0002\u0017\u00da\u0003\u0002\u0002\u0002\u0019\u00dc\u0003\u0002",
    "\u0002\u0002\u001b\u00de\u0003\u0002\u0002\u0002\u001d\u00e0\u0003\u0002",
    "\u0002\u0002\u001f\u00e2\u0003\u0002\u0002\u0002!\u00e4\u0003\u0002",
    "\u0002\u0002#\u00e6\u0003\u0002\u0002\u0002%\u00e8\u0003\u0002\u0002",
    "\u0002\'\u00ea\u0003\u0002\u0002\u0002)\u00ec\u0003\u0002\u0002\u0002",
    "+\u00ee\u0003\u0002\u0002\u0002-\u00f0\u0003\u0002\u0002\u0002/\u00f2",
    "\u0003\u0002\u0002\u00021\u00f4\u0003\u0002\u0002\u00023\u00f6\u0003",
    "\u0002\u0002\u00025\u00f8\u0003\u0002\u0002\u00027\u00fa\u0003\u0002",
    "\u0002\u00029\u00fc\u0003\u0002\u0002\u0002;\u00fe\u0003\u0002\u0002",
    "\u0002=\u0100\u0003\u0002\u0002\u0002?\u0102\u0003\u0002\u0002\u0002",
    "A\u0104\u0003\u0002\u0002\u0002C\u0106\u0003\u0002\u0002\u0002E\u0108",
    "\u0003\u0002\u0002\u0002G\u010a\u0003\u0002\u0002\u0002I\u010c\u0003",
    "\u0002\u0002\u0002K\u0114\u0003\u0002\u0002\u0002M\u0118\u0003\u0002",
    "\u0002\u0002O\u0121\u0003\u0002\u0002\u0002Q\u012a\u0003\u0002\u0002",
    "\u0002S\u0133\u0003\u0002\u0002\u0002U\u013b\u0003\u0002\u0002\u0002",
    "W\u0144\u0003\u0002\u0002\u0002Y\u014d\u0003\u0002\u0002\u0002[\u0155",
    "\u0003\u0002\u0002\u0002]\u015f\u0003\u0002\u0002\u0002_\u0169\u0003",
    "\u0002\u0002\u0002a\u0173\u0003\u0002\u0002\u0002c\u017d\u0003\u0002",
    "\u0002\u0002e\u0184\u0003\u0002\u0002\u0002g\u018f\u0003\u0002\u0002",
    "\u0002i\u0196\u0003\u0002\u0002\u0002k\u019c\u0003\u0002\u0002\u0002",
    "m\u01a9\u0003\u0002\u0002\u0002o\u01ab\u0003\u0002\u0002\u0002q\u01b8",
    "\u0003\u0002\u0002\u0002s\u01ba\u0003\u0002\u0002\u0002u\u01c0\u0003",
    "\u0002\u0002\u0002w\u01c6\u0003\u0002\u0002\u0002y\u01cd\u0003\u0002",
    "\u0002\u0002{\u01d3\u0003\u0002\u0002\u0002}\u01d6\u0003\u0002\u0002",
    "\u0002\u007f\u01db\u0003\u0002\u0002\u0002\u0081\u01e0\u0003\u0002\u0002",
    "\u0002\u0083\u01e6\u0003\u0002\u0002\u0002\u0085\u01f1\u0003\u0002\u0002",
    "\u0002\u0087\u01fc\u0003\u0002\u0002\u0002\u0089\u0204\u0003\u0002\u0002",
    "\u0002\u008b\u020d\u0003\u0002\u0002\u0002\u008d\u0214\u0003\u0002\u0002",
    "\u0002\u008f\u021a\u0003\u0002\u0002\u0002\u0091\u0224\u0003\u0002\u0002",
    "\u0002\u0093\u0227\u0003\u0002\u0002\u0002\u0095\u0230\u0003\u0002\u0002",
    "\u0002\u0097\u0233\u0003\u0002\u0002\u0002\u0099\u0236\u0003\u0002\u0002",
    "\u0002\u009b\u023b\u0003\u0002\u0002\u0002\u009d\u0244\u0003\u0002\u0002",
    "\u0002\u009f\u024e\u0003\u0002\u0002\u0002\u00a1\u0253\u0003\u0002\u0002",
    "\u0002\u00a3\u0263\u0003\u0002\u0002\u0002\u00a5\u026b\u0003\u0002\u0002",
    "\u0002\u00a7\u0273\u0003\u0002\u0002\u0002\u00a9\u027d\u0003\u0002\u0002",
    "\u0002\u00ab\u0287\u0003\u0002\u0002\u0002\u00ad\u02aa\u0003\u0002\u0002",
    "\u0002\u00af\u02c1\u0003\u0002\u0002\u0002\u00b1\u02c3\u0003\u0002\u0002",
    "\u0002\u00b3\u02c5\u0003\u0002\u0002\u0002\u00b5\u02cb\u0003\u0002\u0002",
    "\u0002\u00b7\u02cd\u0003\u0002\u0002\u0002\u00b9\u02cf\u0003\u0002\u0002",
    "\u0002\u00bb\u02d1\u0003\u0002\u0002\u0002\u00bd\u02d3\u0003\u0002\u0002",
    "\u0002\u00bf\u02d5\u0003\u0002\u0002\u0002\u00c1\u02d7\u0003\u0002\u0002",
    "\u0002\u00c3\u02e4\u0003\u0002\u0002\u0002\u00c5\u00c6\u0007*\u0002",
    "\u0002\u00c6\u0004\u0003\u0002\u0002\u0002\u00c7\u00c8\u0007+\u0002",
    "\u0002\u00c8\u0006\u0003\u0002\u0002\u0002\u00c9\u00ca\u0007=\u0002",
    "\u0002\u00ca\b\u0003\u0002\u0002\u0002\u00cb\u00cc\u0007<\u0002\u0002",
    "\u00cc\n\u0003\u0002\u0002\u0002\u00cd\u00ce\u0007,\u0002\u0002\u00ce",
    "\u00cf\u0007,\u0002\u0002\u00cf\f\u0003\u0002\u0002\u0002\u00d0\u00d1",
    "\u0007`\u0002\u0002\u00d1\u000e\u0003\u0002\u0002\u0002\u00d2\u00d3",
    "\u0007/\u0002\u0002\u00d3\u0010\u0003\u0002\u0002\u0002\u00d4\u00d5",
    "\u0007-\u0002\u0002\u00d5\u0012\u0003\u0002\u0002\u0002\u00d6\u00d7",
    "\u0007,\u0002\u0002\u00d7\u0014\u0003\u0002\u0002\u0002\u00d8\u00d9",
    "\t\u0002\u0002\u0002\u00d9\u0016\u0003\u0002\u0002\u0002\u00da\u00db",
    "\t\u0003\u0002\u0002\u00db\u0018\u0003\u0002\u0002\u0002\u00dc\u00dd",
    "\t\u0004\u0002\u0002\u00dd\u001a\u0003\u0002\u0002\u0002\u00de\u00df",
    "\t\u0005\u0002\u0002\u00df\u001c\u0003\u0002\u0002\u0002\u00e0\u00e1",
    "\t\u0006\u0002\u0002\u00e1\u001e\u0003\u0002\u0002\u0002\u00e2\u00e3",
    "\t\u0007\u0002\u0002\u00e3 \u0003\u0002\u0002\u0002\u00e4\u00e5\t\b",
    "\u0002\u0002\u00e5\"\u0003\u0002\u0002\u0002\u00e6\u00e7\t\t\u0002\u0002",
    "\u00e7$\u0003\u0002\u0002\u0002\u00e8\u00e9\t\n\u0002\u0002\u00e9&\u0003",
    "\u0002\u0002\u0002\u00ea\u00eb\t\u000b\u0002\u0002\u00eb(\u0003\u0002",
    "\u0002\u0002\u00ec\u00ed\t\f\u0002\u0002\u00ed*\u0003\u0002\u0002\u0002",
    "\u00ee\u00ef\t\r\u0002\u0002\u00ef,\u0003\u0002\u0002\u0002\u00f0\u00f1",
    "\t\u000e\u0002\u0002\u00f1.\u0003\u0002\u0002\u0002\u00f2\u00f3\t\u000f",
    "\u0002\u0002\u00f30\u0003\u0002\u0002\u0002\u00f4\u00f5\t\u0010\u0002",
    "\u0002\u00f52\u0003\u0002\u0002\u0002\u00f6\u00f7\t\u0011\u0002\u0002",
    "\u00f74\u0003\u0002\u0002\u0002\u00f8\u00f9\t\u0012\u0002\u0002\u00f9",
    "6\u0003\u0002\u0002\u0002\u00fa\u00fb\t\u0013\u0002\u0002\u00fb8\u0003",
    "\u0002\u0002\u0002\u00fc\u00fd\t\u0014\u0002\u0002\u00fd:\u0003\u0002",
    "\u0002\u0002\u00fe\u00ff\t\u0015\u0002\u0002\u00ff<\u0003\u0002\u0002",
    "\u0002\u0100\u0101\t\u0016\u0002\u0002\u0101>\u0003\u0002\u0002\u0002",
    "\u0102\u0103\t\u0017\u0002\u0002\u0103@\u0003\u0002\u0002\u0002\u0104",
    "\u0105\t\u0018\u0002\u0002\u0105B\u0003\u0002\u0002\u0002\u0106\u0107",
    "\t\u0019\u0002\u0002\u0107D\u0003\u0002\u0002\u0002\u0108\u0109\t\u001a",
    "\u0002\u0002\u0109F\u0003\u0002\u0002\u0002\u010a\u010b\t\u001b\u0002",
    "\u0002\u010bH\u0003\u0002\u0002\u0002\u010c\u010d\u00053\u001a\u0002",
    "\u010d\u010e\u00057\u001c\u0002\u010e\u010f\u00051\u0019\u0002\u010f",
    "\u0110\u0005!\u0011\u0002\u0110\u0111\u00057\u001c\u0002\u0111\u0112",
    "\u0005\u0015\u000b\u0002\u0112\u0113\u0005-\u0017\u0002\u0113J\u0003",
    "\u0002\u0002\u0002\u0114\u0115\u0005\u001d\u000f\u0002\u0115\u0116\u0005",
    "/\u0018\u0002\u0116\u0117\u0005\u001b\u000e\u0002\u0117L\u0003\u0002",
    "\u0002\u0002\u0118\u0119\u0005\u001b\u000e\u0002\u0119\u011a\u0005%",
    "\u0013\u0002\u011a\u011b\u00059\u001d\u0002\u011b\u011c\u0005\u0019",
    "\r\u0002\u011c\u011d\u00057\u001c\u0002\u011d\u011e\u0005\u001d\u000f",
    "\u0002\u011e\u011f\u0005;\u001e\u0002\u011f\u0120\u0005\u001d\u000f",
    "\u0002\u0120N\u0003\u0002\u0002\u0002\u0121\u0122\u0005%\u0013\u0002",
    "\u0122\u0123\u0005/\u0018\u0002\u0123\u0124\u0005;\u001e\u0002\u0124",
    "\u0125\u0005\u001d\u000f\u0002\u0125\u0126\u00057\u001c\u0002\u0126",
    "\u0127\u0005? \u0002\u0127\u0128\u0005\u0015\u000b\u0002\u0128\u0129",
    "\u0005+\u0016\u0002\u0129P\u0003\u0002\u0002\u0002\u012a\u012b\u0005",
    "9\u001d\u0002\u012b\u012c\u0005\u0019\r\u0002\u012c\u012d\u0005#\u0012",
    "\u0002\u012d\u012e\u0005\u001d\u000f\u0002\u012e\u012f\u0005\u001b\u000e",
    "\u0002\u012f\u0130\u0005=\u001f\u0002\u0130\u0131\u0005+\u0016\u0002",
    "\u0131\u0132\u0005\u001d\u000f\u0002\u0132R\u0003\u0002\u0002\u0002",
    "\u0133\u0134\u0005%\u0013\u0002\u0134\u0135\u0005/\u0018\u0002\u0135",
    "\u0136\u0005%\u0013\u0002\u0136\u0137\u0005;\u001e\u0002\u0137\u0138",
    "\u0005%\u0013\u0002\u0138\u0139\u0005\u0015\u000b\u0002\u0139\u013a",
    "\u0005+\u0016\u0002\u013aT\u0003\u0002\u0002\u0002\u013b\u013c\u0005",
    ";\u001e\u0002\u013c\u013d\u0005\u001d\u000f\u0002\u013d\u013e\u0005",
    "7\u001c\u0002\u013e\u013f\u0005-\u0017\u0002\u013f\u0140\u0005%\u0013",
    "\u0002\u0140\u0141\u0005/\u0018\u0002\u0141\u0142\u0005\u0015\u000b",
    "\u0002\u0142\u0143\u0005+\u0016\u0002\u0143V\u0003\u0002\u0002\u0002",
    "\u0144\u0145\u0005\u0019\r\u0002\u0145\u0146\u00051\u0019\u0002\u0146",
    "\u0147\u0005/\u0018\u0002\u0147\u0148\u00059\u001d\u0002\u0148\u0149",
    "\u0005;\u001e\u0002\u0149\u014a\u0005\u0015\u000b\u0002\u014a\u014b",
    "\u0005/\u0018\u0002\u014b\u014c\u0005;\u001e\u0002\u014cX\u0003\u0002",
    "\u0002\u0002\u014d\u014e\u0005\u001b\u000e\u0002\u014e\u014f\u0005E",
    "#\u0002\u014f\u0150\u0005/\u0018\u0002\u0150\u0151\u0005\u0015\u000b",
    "\u0002\u0151\u0152\u0005-\u0017\u0002\u0152\u0153\u0005%\u0013\u0002",
    "\u0153\u0154\u0005\u0019\r\u0002\u0154Z\u0003\u0002\u0002\u0002\u0155",
    "\u0156\u0005\u0015\u000b\u0002\u0156\u0157\u0005+\u0016\u0002\u0157",
    "\u0158\u0005!\u0011\u0002\u0158\u0159\u00051\u0019\u0002\u0159\u015a",
    "\u00057\u001c\u0002\u015a\u015b\u0005%\u0013\u0002\u015b\u015c\u0005",
    ";\u001e\u0002\u015c\u015d\u0005#\u0012\u0002\u015d\u015e\u0005-\u0017",
    "\u0002\u015e\\\u0003\u0002\u0002\u0002\u015f\u0160\u0005-\u0017\u0002",
    "\u0160\u0161\u0005\u0015\u000b\u0002\u0161\u0162\u0005C\"\u0002\u0162",
    "\u0163\u0005;\u001e\u0002\u0163\u0164\u0005\u001d\u000f\u0002\u0164",
    "\u0165\u00057\u001c\u0002\u0165\u0166\u0005? \u0002\u0166\u0167\u0005",
    "\u0015\u000b\u0002\u0167\u0168\u0005+\u0016\u0002\u0168^\u0003\u0002",
    "\u0002\u0002\u0169\u016a\u0005-\u0017\u0002\u016a\u016b\u0005%\u0013",
    "\u0002\u016b\u016c\u0005/\u0018\u0002\u016c\u016d\u0005;\u001e\u0002",
    "\u016d\u016e\u0005\u001d\u000f\u0002\u016e\u016f\u00057\u001c\u0002",
    "\u016f\u0170\u0005? \u0002\u0170\u0171\u0005\u0015\u000b\u0002\u0171",
    "\u0172\u0005+\u0016\u0002\u0172`\u0003\u0002\u0002\u0002\u0173\u0174",
    "\u0005\u0019\r\u0002\u0174\u0175\u0005%\u0013\u0002\u0175\u0176\u0005",
    "/\u0018\u0002\u0176\u0177\u0005;\u001e\u0002\u0177\u0178\u0005\u001d",
    "\u000f\u0002\u0178\u0179\u00057\u001c\u0002\u0179\u017a\u0005? \u0002",
    "\u017a\u017b\u0005\u0015\u000b\u0002\u017b\u017c\u0005+\u0016\u0002",
    "\u017cb\u0003\u0002\u0002\u0002\u017d\u017e\u0005/\u0018\u0002\u017e",
    "\u017f\u00059\u001d\u0002\u017f\u0180\u0005;\u001e\u0002\u0180\u0181",
    "\u0005\u001d\u000f\u0002\u0181\u0182\u00053\u001a\u0002\u0182\u0183",
    "\u00059\u001d\u0002\u0183d\u0003\u0002\u0002\u0002\u0184\u0185\u0005",
    "\u001b\u000e\u0002\u0185\u0186\u0005\u001d\u000f\u0002\u0186\u0187\u0005",
    "7\u001c\u0002\u0187\u0188\u0005%\u0013\u0002\u0188\u0189\u0005? \u0002",
    "\u0189\u018a\u0005\u0015\u000b\u0002\u018a\u018b\u0005;\u001e\u0002",
    "\u018b\u018c\u0005%\u0013\u0002\u018c\u018d\u0005? \u0002\u018d\u018e",
    "\u0005\u001d\u000f\u0002\u018ef\u0003\u0002\u0002\u0002\u018f\u0190",
    "\u0007a\u0002\u0002\u0190\u0191\u0007a\u0002\u0002\u0191\u0192\u0003",
    "\u0002\u0002\u0002\u0192\u0193\u0005\u0015\u000b\u0002\u0193\u0194\u0005",
    "/\u0018\u0002\u0194\u0195\u0005\u001b\u000e\u0002\u0195h\u0003\u0002",
    "\u0002\u0002\u0196\u0197\u0007a\u0002\u0002\u0197\u0198\u0007a\u0002",
    "\u0002\u0198\u0199\u0003\u0002\u0002\u0002\u0199\u019a\u0005\u001d\u000f",
    "\u0002\u019a\u019b\u00055\u001b\u0002\u019bj\u0003\u0002\u0002\u0002",
    "\u019c\u019d\u0007a\u0002\u0002\u019d\u019e\u0007a\u0002\u0002\u019e",
    "\u019f\u0003\u0002\u0002\u0002\u019f\u01a0\u0005!\u0011\u0002\u01a0",
    "\u01a1\u0005\u001d\u000f\u0002\u01a1l\u0003\u0002\u0002\u0002\u01a2",
    "\u01a3\u0007a\u0002\u0002\u01a3\u01a4\u0007a\u0002\u0002\u01a4\u01a5",
    "\u0003\u0002\u0002\u0002\u01a5\u01a6\u0005!\u0011\u0002\u01a6\u01a7",
    "\u0005;\u001e\u0002\u01a7\u01aa\u0003\u0002\u0002\u0002\u01a8\u01aa",
    "\u0005\u00bb^\u0002\u01a9\u01a2\u0003\u0002\u0002\u0002\u01a9\u01a8",
    "\u0003\u0002\u0002\u0002\u01aan\u0003\u0002\u0002\u0002\u01ab\u01ac",
    "\u0007a\u0002\u0002\u01ac\u01ad\u0007a\u0002\u0002\u01ad\u01ae\u0003",
    "\u0002\u0002\u0002\u01ae\u01af\u0005+\u0016\u0002\u01af\u01b0\u0005",
    "\u001d\u000f\u0002\u01b0p\u0003\u0002\u0002\u0002\u01b1\u01b2\u0007",
    "a\u0002\u0002\u01b2\u01b3\u0007a\u0002\u0002\u01b3\u01b4\u0003\u0002",
    "\u0002\u0002\u01b4\u01b5\u0005+\u0016\u0002\u01b5\u01b6\u0005;\u001e",
    "\u0002\u01b6\u01b9\u0003\u0002\u0002\u0002\u01b7\u01b9\u0005\u00b9]",
    "\u0002\u01b8\u01b1\u0003\u0002\u0002\u0002\u01b8\u01b7\u0003\u0002\u0002",
    "\u0002\u01b9r\u0003\u0002\u0002\u0002\u01ba\u01bb\u0007a\u0002\u0002",
    "\u01bb\u01bc\u0007a\u0002\u0002\u01bc\u01bd\u0003\u0002\u0002\u0002",
    "\u01bd\u01be\u0005/\u0018\u0002\u01be\u01bf\u0005\u001d\u000f\u0002",
    "\u01bft\u0003\u0002\u0002\u0002\u01c0\u01c1\u0007a\u0002\u0002\u01c1",
    "\u01c2\u0007a\u0002\u0002\u01c2\u01c3\u0003\u0002\u0002\u0002\u01c3",
    "\u01c4\u00051\u0019\u0002\u01c4\u01c5\u00057\u001c\u0002\u01c5v\u0003",
    "\u0002\u0002\u0002\u01c6\u01c7\u0007a\u0002\u0002\u01c7\u01c8\u0007",
    "a\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002\u0002\u01c9\u01ca\u0005",
    "C\"\u0002\u01ca\u01cb\u00051\u0019\u0002\u01cb\u01cc\u00057\u001c\u0002",
    "\u01ccx\u0003\u0002\u0002\u0002\u01cd\u01ce\u0007a\u0002\u0002\u01ce",
    "\u01cf\u0007a\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0",
    "\u01d1\u0005\u0015\u000b\u0002\u01d1\u01d2\u0005;\u001e\u0002\u01d2",
    "z\u0003\u0002\u0002\u0002\u01d3\u01d4\u0005%\u0013\u0002\u01d4\u01d5",
    "\u0005\u001f\u0010\u0002\u01d5|\u0003\u0002\u0002\u0002\u01d6\u01d7",
    "\u0005;\u001e\u0002\u01d7\u01d8\u0005#\u0012\u0002\u01d8\u01d9\u0005",
    "\u001d\u000f\u0002\u01d9\u01da\u0005/\u0018\u0002\u01da~\u0003\u0002",
    "\u0002\u0002\u01db\u01dc\u0005\u001d\u000f\u0002\u01dc\u01dd\u0005+",
    "\u0016\u0002\u01dd\u01de\u00059\u001d\u0002\u01de\u01df\u0005\u001d",
    "\u000f\u0002\u01df\u0080\u0003\u0002\u0002\u0002\u01e0\u01e1\u0005\u001d",
    "\u000f\u0002\u01e1\u01e2\u0005/\u0018\u0002\u01e2\u01e3\u0005\u001b",
    "\u000e\u0002\u01e3\u01e4\u0005%\u0013\u0002\u01e4\u01e5\u0005\u001f",
    "\u0010\u0002\u01e5\u0082\u0003\u0002\u0002\u0002\u01e6\u01e7\u0005\u001d",
    "\u000f\u0002\u01e7\u01e8\u0005/\u0018\u0002\u01e8\u01ea\u0005\u001b",
    "\u000e\u0002\u01e9\u01eb\u0007\"\u0002\u0002\u01ea\u01e9\u0003\u0002",
    "\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002\u01ec\u01ea\u0003\u0002",
    "\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002",
    "\u0002\u0002\u01ee\u01ef\u0005%\u0013\u0002\u01ef\u01f0\u0005\u001f",
    "\u0010\u0002\u01f0\u0084\u0003\u0002\u0002\u0002\u01f1\u01f2\u00053",
    "\u001a\u0002\u01f2\u01f3\u00057\u001c\u0002\u01f3\u01f4\u00051\u0019",
    "\u0002\u01f4\u01f5\u0005\u0019\r\u0002\u01f5\u01f6\u0005\u001d\u000f",
    "\u0002\u01f6\u01f7\u0005\u001b\u000e\u0002\u01f7\u01f8\u0005=\u001f",
    "\u0002\u01f8\u01f9\u00057\u001c\u0002\u01f9\u01fa\u0005\u0015\u000b",
    "\u0002\u01fa\u01fb\u0005+\u0016\u0002\u01fb\u0086\u0003\u0002\u0002",
    "\u0002\u01fc\u01fd\u0007a\u0002\u0002\u01fd\u01fe\u0007a\u0002\u0002",
    "\u01fe\u01ff\u0003\u0002\u0002\u0002\u01ff\u0200\u0005;\u001e\u0002",
    "\u0200\u0201\u00057\u001c\u0002\u0201\u0202\u0005=\u001f\u0002\u0202",
    "\u0203\u0005\u001d\u000f\u0002\u0203\u0088\u0003\u0002\u0002\u0002\u0204",
    "\u0205\u0007a\u0002\u0002\u0205\u0206\u0007a\u0002\u0002\u0206\u0207",
    "\u0003\u0002\u0002\u0002\u0207\u0208\u0005\u001f\u0010\u0002\u0208\u0209",
    "\u0005\u0015\u000b\u0002\u0209\u020a\u0005+\u0016\u0002\u020a\u020b",
    "\u00059\u001d\u0002\u020b\u020c\u0005\u001d\u000f\u0002\u020c\u008a",
    "\u0003\u0002\u0002\u0002\u020d\u020e\u0007a\u0002\u0002\u020e\u020f",
    "\u0007a\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002\u0210\u0211",
    "\u0005/\u0018\u0002\u0211\u0212\u00051\u0019\u0002\u0212\u0213\u0005",
    ";\u001e\u0002\u0213\u008c\u0003\u0002\u0002\u0002\u0214\u0215\u0005",
    ";\u001e\u0002\u0215\u0216\u0005\u0015\u000b\u0002\u0216\u0217\u0005",
    "\u0017\f\u0002\u0217\u0218\u0005+\u0016\u0002\u0218\u0219\u0005\u001d",
    "\u000f\u0002\u0219\u008e\u0003\u0002\u0002\u0002\u021a\u021b\u00053",
    "\u001a\u0002\u021b\u021c\u0005\u0015\u000b\u0002\u021c\u021d\u00057",
    "\u001c\u0002\u021d\u021e\u0005\u0015\u000b\u0002\u021e\u021f\u0005-",
    "\u0017\u0002\u021f\u0220\u0005\u001d\u000f\u0002\u0220\u0221\u0005;",
    "\u001e\u0002\u0221\u0222\u0005\u001d\u000f\u0002\u0222\u0223\u00057",
    "\u001c\u0002\u0223\u0090\u0003\u0002\u0002\u0002\u0224\u0225\u0005\u001b",
    "\u000e\u0002\u0225\u0226\u00051\u0019\u0002\u0226\u0092\u0003\u0002",
    "\u0002\u0002\u0227\u0228\u0005\u0019\r\u0002\u0228\u0229\u00051\u0019",
    "\u0002\u0229\u022a\u0005/\u0018\u0002\u022a\u022b\u0005;\u001e\u0002",
    "\u022b\u022c\u0005%\u0013\u0002\u022c\u022d\u0005/\u0018\u0002\u022d",
    "\u022e\u0005=\u001f\u0002\u022e\u022f\u0005\u001d\u000f\u0002\u022f",
    "\u0094\u0003\u0002\u0002\u0002\u0230\u0231\u0005!\u0011\u0002\u0231",
    "\u0232\u00051\u0019\u0002\u0232\u0096\u0003\u0002\u0002\u0002\u0233",
    "\u0234\u0005;\u001e\u0002\u0234\u0235\u00051\u0019\u0002\u0235\u0098",
    "\u0003\u0002\u0002\u0002\u0236\u0237\u0005\u0019\r\u0002\u0237\u0238",
    "\u0005\u0015\u000b\u0002\u0238\u0239\u0005+\u0016\u0002\u0239\u023a",
    "\u0005+\u0016\u0002\u023a\u009a\u0003\u0002\u0002\u0002\u023b\u023c",
    "\u0005? \u0002\u023c\u023d\u0005\u0015\u000b\u0002\u023d\u023e\u0005",
    "7\u001c\u0002\u023e\u023f\u0005%\u0013\u0002\u023f\u0240\u0005\u0015",
    "\u000b\u0002\u0240\u0241\u0005\u0017\f\u0002\u0241\u0242\u0005+\u0016",
    "\u0002\u0242\u0243\u0005\u001d\u000f\u0002\u0243\u009c\u0003\u0002\u0002",
    "\u0002\u0244\u0245\u0005\u001b\u000e\u0002\u0245\u0246\u0005%\u0013",
    "\u0002\u0246\u0247\u0005-\u0017\u0002\u0247\u0248\u0005\u001d\u000f",
    "\u0002\u0248\u0249\u0005/\u0018\u0002\u0249\u024a\u00059\u001d\u0002",
    "\u024a\u024b\u0005%\u0013\u0002\u024b\u024c\u00051\u0019\u0002\u024c",
    "\u024d\u0005/\u0018\u0002\u024d\u009e\u0003\u0002\u0002\u0002\u024e",
    "\u024f\u00057\u001c\u0002\u024f\u0250\u0005\u001d\u000f\u0002\u0250",
    "\u0251\u0005\u0015\u000b\u0002\u0251\u0252\u0005+\u0016\u0002\u0252",
    "\u00a0\u0003\u0002\u0002\u0002\u0253\u0254\u0005\u001b\u000e\u0002\u0254",
    "\u0255\u00051\u0019\u0002\u0255\u0256\u0005=\u001f\u0002\u0256\u0257",
    "\u0005\u0017\f\u0002\u0257\u0258\u0005+\u0016\u0002\u0258\u0259\u0005",
    "\u001d\u000f\u0002\u0259\u025a\u00053\u001a\u0002\u025a\u025b\u0005",
    "7\u001c\u0002\u025b\u025c\u0005\u001d\u000f\u0002\u025c\u025d\u0005",
    "\u0019\r\u0002\u025d\u025e\u0005%\u0013\u0002\u025e\u025f\u00059\u001d",
    "\u0002\u025f\u0260\u0005%\u0013\u0002\u0260\u0261\u00051\u0019\u0002",
    "\u0261\u0262\u0005/\u0018\u0002\u0262\u00a2\u0003\u0002\u0002\u0002",
    "\u0263\u0264\u0005%\u0013\u0002\u0264\u0265\u0005/\u0018\u0002\u0265",
    "\u0266\u0005;\u001e\u0002\u0266\u0267\u0005\u001d\u000f\u0002\u0267",
    "\u0268\u0005!\u0011\u0002\u0268\u0269\u0005\u001d\u000f\u0002\u0269",
    "\u026a\u00057\u001c\u0002\u026a\u00a4\u0003\u0002\u0002\u0002\u026b",
    "\u026c\u0005+\u0016\u0002\u026c\u026d\u00051\u0019\u0002\u026d\u026e",
    "\u0005!\u0011\u0002\u026e\u026f\u0005%\u0013\u0002\u026f\u0270\u0005",
    "\u0019\r\u0002\u0270\u0271\u0005\u0015\u000b\u0002\u0271\u0272\u0005",
    "+\u0016\u0002\u0272\u00a6\u0003\u0002\u0002\u0002\u0273\u0274\u0005",
    "\u0019\r\u0002\u0274\u0275\u0005#\u0012\u0002\u0275\u0276\u0005\u0015",
    "\u000b\u0002\u0276\u0277\u00057\u001c\u0002\u0277\u0278\u0005\u0015",
    "\u000b\u0002\u0278\u0279\u0005\u0019\r\u0002\u0279\u027a\u0005;\u001e",
    "\u0002\u027a\u027b\u0005\u001d\u000f\u0002\u027b\u027c\u00057\u001c",
    "\u0002\u027c\u00a8\u0003\u0002\u0002\u0002\u027d\u0281\u0007)\u0002",
    "\u0002\u027e\u0280\n\u001c\u0002\u0002\u027f\u027e\u0003\u0002\u0002",
    "\u0002\u0280\u0283\u0003\u0002\u0002\u0002\u0281\u027f\u0003\u0002\u0002",
    "\u0002\u0281\u0282\u0003\u0002\u0002\u0002\u0282\u0284\u0003\u0002\u0002",
    "\u0002\u0283\u0281\u0003\u0002\u0002\u0002\u0284\u0285\u0007)\u0002",
    "\u0002\u0285\u00aa\u0003\u0002\u0002\u0002\u0286\u0288\u0005\u00b1Y",
    "\u0002\u0287\u0286\u0003\u0002\u0002\u0002\u0288\u0289\u0003\u0002\u0002",
    "\u0002\u0289\u0287\u0003\u0002\u0002\u0002\u0289\u028a\u0003\u0002\u0002",
    "\u0002\u028a\u00ac\u0003\u0002\u0002\u0002\u028b\u028d\u0005\u00b1Y",
    "\u0002\u028c\u028b\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002",
    "\u0002\u028e\u028c\u0003\u0002\u0002\u0002\u028e\u028f\u0003\u0002\u0002",
    "\u0002\u028f\u0290\u0003\u0002\u0002\u0002\u0290\u0294\u00070\u0002",
    "\u0002\u0291\u0293\u0005\u00b1Y\u0002\u0292\u0291\u0003\u0002\u0002",
    "\u0002\u0293\u0296\u0003\u0002\u0002\u0002\u0294\u0292\u0003\u0002\u0002",
    "\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295\u0298\u0003\u0002\u0002",
    "\u0002\u0296\u0294\u0003\u0002\u0002\u0002\u0297\u0299\u0005\u00b3Z",
    "\u0002\u0298\u0297\u0003\u0002\u0002\u0002\u0298\u0299\u0003\u0002\u0002",
    "\u0002\u0299\u02ab\u0003\u0002\u0002\u0002\u029a\u029c\u0005\u00b1Y",
    "\u0002\u029b\u029a\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002\u0002",
    "\u0002\u029d\u029b\u0003\u0002\u0002\u0002\u029d\u029e\u0003\u0002\u0002",
    "\u0002\u029e\u029f\u0003\u0002\u0002\u0002\u029f\u02a0\u0005\u00b3Z",
    "\u0002\u02a0\u02ab\u0003\u0002\u0002\u0002\u02a1\u02a3\u00070\u0002",
    "\u0002\u02a2\u02a4\u0005\u00b1Y\u0002\u02a3\u02a2\u0003\u0002\u0002",
    "\u0002\u02a4\u02a5\u0003\u0002\u0002\u0002\u02a5\u02a3\u0003\u0002\u0002",
    "\u0002\u02a5\u02a6\u0003\u0002\u0002\u0002\u02a6\u02a8\u0003\u0002\u0002",
    "\u0002\u02a7\u02a9\u0005\u00b3Z\u0002\u02a8\u02a7\u0003\u0002\u0002",
    "\u0002\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a9\u02ab\u0003\u0002\u0002",
    "\u0002\u02aa\u028c\u0003\u0002\u0002\u0002\u02aa\u029b\u0003\u0002\u0002",
    "\u0002\u02aa\u02a1\u0003\u0002\u0002\u0002\u02ab\u00ae\u0003\u0002\u0002",
    "\u0002\u02ac\u02af\u0005\u00b5[\u0002\u02ad\u02af\u0007a\u0002\u0002",
    "\u02ae\u02ac\u0003\u0002\u0002\u0002\u02ae\u02ad\u0003\u0002\u0002\u0002",
    "\u02af\u02b5\u0003\u0002\u0002\u0002\u02b0\u02b4\u0005\u00b5[\u0002",
    "\u02b1\u02b4\u0005\u00b1Y\u0002\u02b2\u02b4\u0007a\u0002\u0002\u02b3",
    "\u02b0\u0003\u0002\u0002\u0002\u02b3\u02b1\u0003\u0002\u0002\u0002\u02b3",
    "\u02b2\u0003\u0002\u0002\u0002\u02b4\u02b7\u0003\u0002\u0002\u0002\u02b5",
    "\u02b3\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002\u0002\u0002\u02b6",
    "\u02c2\u0003\u0002\u0002\u0002\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b8",
    "\u02be\u0005\u00b5[\u0002\u02b9\u02bd\u0005\u00b5[\u0002\u02ba\u02bd",
    "\u0005\u00b1Y\u0002\u02bb\u02bd\u0007a\u0002\u0002\u02bc\u02b9\u0003",
    "\u0002\u0002\u0002\u02bc\u02ba\u0003\u0002\u0002\u0002\u02bc\u02bb\u0003",
    "\u0002\u0002\u0002\u02bd\u02c0\u0003\u0002\u0002\u0002\u02be\u02bc\u0003",
    "\u0002\u0002\u0002\u02be\u02bf\u0003\u0002\u0002\u0002\u02bf\u02c2\u0003",
    "\u0002\u0002\u0002\u02c0\u02be\u0003\u0002\u0002\u0002\u02c1\u02ae\u0003",
    "\u0002\u0002\u0002\u02c1\u02b8\u0003\u0002\u0002\u0002\u02c2\u00b0\u0003",
    "\u0002\u0002\u0002\u02c3\u02c4\u00042;\u0002\u02c4\u00b2\u0003\u0002",
    "\u0002\u0002\u02c5\u02c7\t\u0006\u0002\u0002\u02c6\u02c8\t\u001d\u0002",
    "\u0002\u02c7\u02c6\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002",
    "\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9\u02ca\u0005\u00abV",
    "\u0002\u02ca\u00b4\u0003\u0002\u0002\u0002\u02cb\u02cc\t\u001e\u0002",
    "\u0002\u02cc\u00b6\u0003\u0002\u0002\u0002\u02cd\u02ce\u0007?\u0002",
    "\u0002\u02ce\u00b8\u0003\u0002\u0002\u0002\u02cf\u02d0\u0007>\u0002",
    "\u0002\u02d0\u00ba\u0003\u0002\u0002\u0002\u02d1\u02d2\u0007@\u0002",
    "\u0002\u02d2\u00bc\u0003\u0002\u0002\u0002\u02d3\u02d4\u0007.\u0002",
    "\u0002\u02d4\u00be\u0003\u0002\u0002\u0002\u02d5\u02d6\u00071\u0002",
    "\u0002\u02d6\u00c0\u0003\u0002\u0002\u0002\u02d7\u02db\u0007#\u0002",
    "\u0002\u02d8\u02da\n\u001f\u0002\u0002\u02d9\u02d8\u0003\u0002\u0002",
    "\u0002\u02da\u02dd\u0003\u0002\u0002\u0002\u02db\u02d9\u0003\u0002\u0002",
    "\u0002\u02db\u02dc\u0003\u0002\u0002\u0002\u02dc\u02df\u0003\u0002\u0002",
    "\u0002\u02dd\u02db\u0003\u0002\u0002\u0002\u02de\u02e0\u0007\u000f\u0002",
    "\u0002\u02df\u02de\u0003\u0002\u0002\u0002\u02df\u02e0\u0003\u0002\u0002",
    "\u0002\u02e0\u02e1\u0003\u0002\u0002\u0002\u02e1\u02e2\u0007\f\u0002",
    "\u0002\u02e2\u00c2\u0003\u0002\u0002\u0002\u02e3\u02e5\t \u0002\u0002",
    "\u02e4\u02e3\u0003\u0002\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002",
    "\u02e6\u02e4\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002",
    "\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8\u02e9\bb\u0002\u0002\u02e9",
    "\u00c4\u0003\u0002\u0002\u0002\u0019\u0002\u01a9\u01b8\u01ec\u0281\u0289",
    "\u028e\u0294\u0298\u029d\u02a5\u02a8\u02aa\u02ae\u02b3\u02b5\u02bc\u02be",
    "\u02c1\u02c7\u02db\u02df\u02e6\u0003\b\u0002\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function AcslLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    //return this;
}

AcslLexer.prototype = Object.create(antlr4.Lexer.prototype);
AcslLexer.prototype.constructor = AcslLexer;

AcslLexer.EOF = antlr4.Token.EOF;
AcslLexer.T__0 = 1;
AcslLexer.T__1 = 2;
AcslLexer.T__2 = 3;
AcslLexer.T__3 = 4;
AcslLexer.T__4 = 5;
AcslLexer.T__5 = 6;
AcslLexer.T__6 = 7;
AcslLexer.T__7 = 8;
AcslLexer.T__8 = 9;
AcslLexer.PROGRAM = 10;
AcslLexer.END = 11;
AcslLexer.DISCRETE = 12;
AcslLexer.INTERVAL = 13;
AcslLexer.SCHEDULE = 14;
AcslLexer.INITIAL = 15;
AcslLexer.TERMINAL = 16;
AcslLexer.CONSTANT = 17;
AcslLexer.DYNAMIC = 18;
AcslLexer.ALGORITHM = 19;
AcslLexer.MAXTERVAL = 20;
AcslLexer.MINTERVAL = 21;
AcslLexer.CINTERVAL = 22;
AcslLexer.NSTEPS = 23;
AcslLexer.DERIVATIVE = 24;
AcslLexer.AND = 25;
AcslLexer.EQ = 26;
AcslLexer.GE = 27;
AcslLexer.GT = 28;
AcslLexer.LE = 29;
AcslLexer.LT = 30;
AcslLexer.NE = 31;
AcslLexer.OR = 32;
AcslLexer.XOR = 33;
AcslLexer.AT = 34;
AcslLexer.IF = 35;
AcslLexer.THEN = 36;
AcslLexer.ELSE = 37;
AcslLexer.ENDIF = 38;
AcslLexer.ENDSPACEIF = 39;
AcslLexer.PROCEDURAL = 40;
AcslLexer.TRUE = 41;
AcslLexer.FALSE = 42;
AcslLexer.NOT = 43;
AcslLexer.TABLE = 44;
AcslLexer.PARAMETER = 45;
AcslLexer.DO = 46;
AcslLexer.CONTINUE = 47;
AcslLexer.GO = 48;
AcslLexer.TO = 49;
AcslLexer.CALL = 50;
AcslLexer.VARIABLE = 51;
AcslLexer.DIMENSION = 52;
AcslLexer.REAL = 53;
AcslLexer.DOUBLEPRECISION = 54;
AcslLexer.INTEGER = 55;
AcslLexer.LOGICAL = 56;
AcslLexer.CHARACTER = 57;
AcslLexer.STRING = 58;
AcslLexer.INT = 59;
AcslLexer.FLOAT = 60;
AcslLexer.ID = 61;
AcslLexer.EQUALS = 62;
AcslLexer.LESSTHAN = 63;
AcslLexer.GREATERTHAN = 64;
AcslLexer.COMMA = 65;
AcslLexer.SLASH = 66;
AcslLexer.COMMENT = 67;
AcslLexer.WS = 68;


AcslLexer.prototype.modeNames = [ "DEFAULT_MODE" ];

AcslLexer.prototype.literalNames = [ null, "'('", "')'", "';'", "':'", "'**'", 
                                     "'^'", "'-'", "'+'", "'*'", null, null, 
                                     null, null, null, null, null, null, 
                                     null, null, null, null, null, null, 
                                     null, null, null, null, null, null, 
                                     null, null, null, null, null, null, 
                                     null, null, null, null, null, null, 
                                     null, null, null, null, null, null, 
                                     null, null, null, null, null, null, 
                                     null, null, null, null, null, null, 
                                     null, null, "'='", "'<'", "'>'", "','", 
                                     "'/'" ];

AcslLexer.prototype.symbolicNames = [ null, null, null, null, null, null, 
                                      null, null, null, null, "PROGRAM", 
                                      "END", "DISCRETE", "INTERVAL", "SCHEDULE", 
                                      "INITIAL", "TERMINAL", "CONSTANT", 
                                      "DYNAMIC", "ALGORITHM", "MAXTERVAL", 
                                      "MINTERVAL", "CINTERVAL", "NSTEPS", 
                                      "DERIVATIVE", "AND", "EQ", "GE", "GT", 
                                      "LE", "LT", "NE", "OR", "XOR", "AT", 
                                      "IF", "THEN", "ELSE", "ENDIF", "ENDSPACEIF", 
                                      "PROCEDURAL", "TRUE", "FALSE", "NOT", 
                                      "TABLE", "PARAMETER", "DO", "CONTINUE", 
                                      "GO", "TO", "CALL", "VARIABLE", "DIMENSION", 
                                      "REAL", "DOUBLEPRECISION", "INTEGER", 
                                      "LOGICAL", "CHARACTER", "STRING", 
                                      "INT", "FLOAT", "ID", "EQUALS", "LESSTHAN", 
                                      "GREATERTHAN", "COMMA", "SLASH", "COMMENT", 
                                      "WS" ];

AcslLexer.prototype.ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", 
                                  "T__5", "T__6", "T__7", "T__8", "A", "B", 
                                  "C", "D", "E", "F", "G", "H", "I", "J", 
                                  "K", "L", "M", "N", "O", "P", "Q", "R", 
                                  "S", "T", "U", "V", "W", "X", "Y", "Z", 
                                  "PROGRAM", "END", "DISCRETE", "INTERVAL", 
                                  "SCHEDULE", "INITIAL", "TERMINAL", "CONSTANT", 
                                  "DYNAMIC", "ALGORITHM", "MAXTERVAL", "MINTERVAL", 
                                  "CINTERVAL", "NSTEPS", "DERIVATIVE", "AND", 
                                  "EQ", "GE", "GT", "LE", "LT", "NE", "OR", 
                                  "XOR", "AT", "IF", "THEN", "ELSE", "ENDIF", 
                                  "ENDSPACEIF", "PROCEDURAL", "TRUE", "FALSE", 
                                  "NOT", "TABLE", "PARAMETER", "DO", "CONTINUE", 
                                  "GO", "TO", "CALL", "VARIABLE", "DIMENSION", 
                                  "REAL", "DOUBLEPRECISION", "INTEGER", 
                                  "LOGICAL", "CHARACTER", "STRING", "INT", 
                                  "FLOAT", "ID", "DIGIT", "EXPONENT", "LETTER", 
                                  "EQUALS", "LESSTHAN", "GREATERTHAN", "COMMA", 
                                  "SLASH", "COMMENT", "WS" ];

AcslLexer.prototype.grammarFileName = "Acsl.g4";



module.exports.AcslLexer = AcslLexer;



/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

// Generated from Acsl.g4 by ANTLR 4.6
// jshint ignore: start
var antlr4 = __webpack_require__(25);
var AcslListener = __webpack_require__(73).AcslListener;
var AcslVisitor = __webpack_require__(74).AcslVisitor;

var grammarFileName = "Acsl.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003F\u02c6\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0003\u0002\u0006\u0002D\n\u0002",
    "\r\u0002\u000e\u0002E\u0003\u0002\u0003\u0002\u0007\u0002J\n\u0002\f",
    "\u0002\u000e\u0002M\u000b\u0002\u0003\u0002\u0003\u0002\u0006\u0002",
    "Q\n\u0002\r\u0002\u000e\u0002R\u0003\u0002\u0006\u0002V\n\u0002\r\u0002",
    "\u000e\u0002W\u0003\u0002\u0003\u0002\u0007\u0002\\\n\u0002\f\u0002",
    "\u000e\u0002_\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0007\u0002e\n\u0002\f\u0002\u000e\u0002h\u000b\u0002\u0003\u0002",
    "\u0003\u0002\u0006\u0002l\n\u0002\r\u0002\u000e\u0002m\u0003\u0002\u0003",
    "\u0002\u0007\u0002r\n\u0002\f\u0002\u000e\u0002u\u000b\u0002\u0003\u0002",
    "\u0005\u0002x\n\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0005\u0003\u0080\n\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u0094",
    "\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0007\u0005\u009d\n\u0005\f\u0005\u000e\u0005",
    "\u00a0\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00ab",
    "\n\u0005\f\u0005\u000e\u0005\u00ae\u000b\u0005\u0003\u0005\u0005\u0005",
    "\u00b1\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u00ba\n\u0007\f\u0007\u000e",
    "\u0007\u00bd\u000b\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0007\u0007\u00c5\n\u0007\f\u0007\u000e\u0007",
    "\u00c8\u000b\u0007\u0003\u0007\u0005\u0007\u00cb\n\u0007\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0007\b\u00d1\n\b\f\b\u000e\b\u00d4\u000b\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u00dc\n\b\f\b\u000e",
    "\b\u00df\u000b\b\u0003\b\u0005\b\u00e2\n\b\u0003\t\u0003\t\u0003\t\u0003",
    "\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u00f2\n\u000b",
    "\f\u000b\u000e\u000b\u00f5\u000b\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0007\u000b\u0101\n\u000b\f\u000b\u000e\u000b\u0104",
    "\u000b\u000b\u0003\u000b\u0005\u000b\u0107\n\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007",
    "\u0011\u011e\n\u0011\f\u0011\u000e\u0011\u0121\u000b\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0007\u0011\u012b\n\u0011\f\u0011\u000e\u0011\u012e\u000b",
    "\u0011\u0003\u0011\u0005\u0011\u0131\n\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0007\u0013\u0141\n\u0013\f\u0013\u000e\u0013\u0144\u000b\u0013\u0003",
    "\u0013\u0005\u0013\u0147\n\u0013\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u014b\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u0150",
    "\n\u0014\f\u0014\u000e\u0014\u0153\u000b\u0014\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0007\u0016\u0165\n\u0016\f\u0016\u000e\u0016",
    "\u0168\u000b\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u0171\n\u0017\f\u0017\u000e",
    "\u0017\u0174\u000b\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0178\n",
    "\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u0183\n\u0018",
    "\f\u0018\u000e\u0018\u0186\u000b\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u0193\n\u0018\f\u0018\u000e",
    "\u0018\u0196\u000b\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0005\u0018\u019c\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01aa\n\u001a\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u01b6\n\u001d\f\u001d",
    "\u000e\u001d\u01b9\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0007\u001d\u01bf\n\u001d\f\u001d\u000e\u001d\u01c2\u000b\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u01c8\n",
    "\u001d\f\u001d\u000e\u001d\u01cb\u000b\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0007\u001d\u01d1\n\u001d\f\u001d\u000e\u001d",
    "\u01d4\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007",
    "\u001d\u01da\n\u001d\f\u001d\u000e\u001d\u01dd\u000b\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u01e3\n\u001d\f\u001d",
    "\u000e\u001d\u01e6\u000b\u001d\u0005\u001d\u01e8\n\u001d\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0005\u001e\u01ed\n\u001e\u0003\u001e\u0003",
    "\u001e\u0007\u001e\u01f1\n\u001e\f\u001e\u000e\u001e\u01f4\u000b\u001e",
    "\u0003\u001e\u0005\u001e\u01f7\n\u001e\u0003\u001e\u0005\u001e\u01fa",
    "\n\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u01fe\n\u001e\f\u001e\u000e",
    "\u001e\u0201\u000b\u001e\u0003\u001e\u0005\u001e\u0204\n\u001e\u0003",
    "\u001e\u0003\u001e\u0007\u001e\u0208\n\u001e\f\u001e\u000e\u001e\u020b",
    "\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u0212\n\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u0216",
    "\n\u001e\f\u001e\u000e\u001e\u0219\u000b\u001e\u0003\u001e\u0005\u001e",
    "\u021c\n\u001e\u0003\u001e\u0005\u001e\u021f\n\u001e\u0003\u001e\u0003",
    "\u001e\u0007\u001e\u0223\n\u001e\f\u001e\u000e\u001e\u0226\u000b\u001e",
    "\u0003\u001e\u0005\u001e\u0229\n\u001e\u0003\u001e\u0003\u001e\u0007",
    "\u001e\u022d\n\u001e\f\u001e\u000e\u001e\u0230\u000b\u001e\u0003\u001e",
    "\u0005\u001e\u0233\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0007\u001f\u0239\n\u001f\f\u001f\u000e\u001f\u023c\u000b\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0007\u001f\u0244\n\u001f\f\u001f\u000e\u001f\u0247\u000b\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0007\u001f\u0250\n\u001f\f\u001f\u000e\u001f\u0253\u000b\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u025e\n\u001f\f\u001f",
    "\u000e\u001f\u0261\u000b\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u026f\n\u001f\f\u001f\u000e",
    "\u001f\u0272\u000b\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u0282\n",
    "\u001f\f\u001f\u000e\u001f\u0285\u000b\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f",
    "\u028e\n\u001f\f\u001f\u000e\u001f\u0291\u000b\u001f\u0003\u001f\u0005",
    "\u001f\u0294\n\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0007 \u02a1\n \f \u000e \u02a4\u000b",
    " \u0005 \u02a6\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0005 \u02b1\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0007 \u02bf\n \f \u000e \u02c2",
    "\u000b \u0003!\u0003!\u0003!\u0002\u0003>\"\u0002\u0004\u0006\b\n\f",
    "\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.0246",
    "8:<>@\u0002\b\u0004\u0002\r\r()\u0003\u0002\t\n\u0003\u0002+,\u0003",
    "\u0002\u0007\b\u0004\u0002\u000b\u000bDD\u0003\u0002\u001b$\u0343\u0002",
    "w\u0003\u0002\u0002\u0002\u0004\u007f\u0003\u0002\u0002\u0002\u0006",
    "\u0093\u0003\u0002\u0002\u0002\b\u00b0\u0003\u0002\u0002\u0002\n\u00b2",
    "\u0003\u0002\u0002\u0002\f\u00ca\u0003\u0002\u0002\u0002\u000e\u00e1",
    "\u0003\u0002\u0002\u0002\u0010\u00e3\u0003\u0002\u0002\u0002\u0012\u00e6",
    "\u0003\u0002\u0002\u0002\u0014\u0106\u0003\u0002\u0002\u0002\u0016\u0108",
    "\u0003\u0002\u0002\u0002\u0018\u010b\u0003\u0002\u0002\u0002\u001a\u010e",
    "\u0003\u0002\u0002\u0002\u001c\u0111\u0003\u0002\u0002\u0002\u001e\u0114",
    "\u0003\u0002\u0002\u0002 \u0130\u0003\u0002\u0002\u0002\"\u0132\u0003",
    "\u0002\u0002\u0002$\u0146\u0003\u0002\u0002\u0002&\u0148\u0003\u0002",
    "\u0002\u0002(\u0154\u0003\u0002\u0002\u0002*\u015a\u0003\u0002\u0002",
    "\u0002,\u016b\u0003\u0002\u0002\u0002.\u019b\u0003\u0002\u0002\u0002",
    "0\u019d\u0003\u0002\u0002\u00022\u01a9\u0003\u0002\u0002\u00024\u01ab",
    "\u0003\u0002\u0002\u00026\u01ae\u0003\u0002\u0002\u00028\u01e7\u0003",
    "\u0002\u0002\u0002:\u0232\u0003\u0002\u0002\u0002<\u0293\u0003\u0002",
    "\u0002\u0002>\u02b0\u0003\u0002\u0002\u0002@\u02c3\u0003\u0002\u0002",
    "\u0002BD\u0005@!\u0002CB\u0003\u0002\u0002\u0002DE\u0003\u0002\u0002",
    "\u0002EC\u0003\u0002\u0002\u0002EF\u0003\u0002\u0002\u0002FG\u0003\u0002",
    "\u0002\u0002GK\u0007\f\u0002\u0002HJ\u0005\u0004\u0003\u0002IH\u0003",
    "\u0002\u0002\u0002JM\u0003\u0002\u0002\u0002KI\u0003\u0002\u0002\u0002",
    "KL\u0003\u0002\u0002\u0002LN\u0003\u0002\u0002\u0002MK\u0003\u0002\u0002",
    "\u0002NP\u0007\r\u0002\u0002OQ\u0005@!\u0002PO\u0003\u0002\u0002\u0002",
    "QR\u0003\u0002\u0002\u0002RP\u0003\u0002\u0002\u0002RS\u0003\u0002\u0002",
    "\u0002Sx\u0003\u0002\u0002\u0002TV\u0005@!\u0002UT\u0003\u0002\u0002",
    "\u0002VW\u0003\u0002\u0002\u0002WU\u0003\u0002\u0002\u0002WX\u0003\u0002",
    "\u0002\u0002XY\u0003\u0002\u0002\u0002Y]\u0007\f\u0002\u0002Z\\\u0005",
    "\u0004\u0003\u0002[Z\u0003\u0002\u0002\u0002\\_\u0003\u0002\u0002\u0002",
    "][\u0003\u0002\u0002\u0002]^\u0003\u0002\u0002\u0002^`\u0003\u0002\u0002",
    "\u0002_]\u0003\u0002\u0002\u0002`a\u0007\r\u0002\u0002ax\u0003\u0002",
    "\u0002\u0002bf\u0007\f\u0002\u0002ce\u0005\u0004\u0003\u0002dc\u0003",
    "\u0002\u0002\u0002eh\u0003\u0002\u0002\u0002fd\u0003\u0002\u0002\u0002",
    "fg\u0003\u0002\u0002\u0002gi\u0003\u0002\u0002\u0002hf\u0003\u0002\u0002",
    "\u0002ik\u0007\r\u0002\u0002jl\u0005@!\u0002kj\u0003\u0002\u0002\u0002",
    "lm\u0003\u0002\u0002\u0002mk\u0003\u0002\u0002\u0002mn\u0003\u0002\u0002",
    "\u0002nx\u0003\u0002\u0002\u0002os\u0007\f\u0002\u0002pr\u0005\u0004",
    "\u0003\u0002qp\u0003\u0002\u0002\u0002ru\u0003\u0002\u0002\u0002sq\u0003",
    "\u0002\u0002\u0002st\u0003\u0002\u0002\u0002tv\u0003\u0002\u0002\u0002",
    "us\u0003\u0002\u0002\u0002vx\u0007\r\u0002\u0002wC\u0003\u0002\u0002",
    "\u0002wU\u0003\u0002\u0002\u0002wb\u0003\u0002\u0002\u0002wo\u0003\u0002",
    "\u0002\u0002x\u0003\u0003\u0002\u0002\u0002y\u0080\u0005\f\u0007\u0002",
    "z\u0080\u0005\u0014\u000b\u0002{\u0080\u0005\b\u0005\u0002|\u0080\u0005",
    "\u000e\b\u0002}\u0080\u0005\u0006\u0004\u0002~\u0080\u0005@!\u0002\u007f",
    "y\u0003\u0002\u0002\u0002\u007fz\u0003\u0002\u0002\u0002\u007f{\u0003",
    "\u0002\u0002\u0002\u007f|\u0003\u0002\u0002\u0002\u007f}\u0003\u0002",
    "\u0002\u0002\u007f~\u0003\u0002\u0002\u0002\u0080\u0005\u0003\u0002",
    "\u0002\u0002\u0081\u0094\u0005\u0010\t\u0002\u0082\u0094\u0005\u0012",
    "\n\u0002\u0083\u0094\u0005\n\u0006\u0002\u0084\u0094\u0005\u0016\f\u0002",
    "\u0085\u0094\u0005\u0018\r\u0002\u0086\u0094\u0005\u001a\u000e\u0002",
    "\u0087\u0094\u0005\u001c\u000f\u0002\u0088\u0094\u0005\u001e\u0010\u0002",
    "\u0089\u0094\u0005<\u001f\u0002\u008a\u0094\u0005\"\u0012\u0002\u008b",
    "\u0094\u0005(\u0015\u0002\u008c\u0094\u0005*\u0016\u0002\u008d\u0094",
    "\u00058\u001d\u0002\u008e\u0094\u0005,\u0017\u0002\u008f\u0094\u0005",
    ".\u0018\u0002\u0090\u0094\u00050\u0019\u0002\u0091\u0094\u00054\u001b",
    "\u0002\u0092\u0094\u00056\u001c\u0002\u0093\u0081\u0003\u0002\u0002",
    "\u0002\u0093\u0082\u0003\u0002\u0002\u0002\u0093\u0083\u0003\u0002\u0002",
    "\u0002\u0093\u0084\u0003\u0002\u0002\u0002\u0093\u0085\u0003\u0002\u0002",
    "\u0002\u0093\u0086\u0003\u0002\u0002\u0002\u0093\u0087\u0003\u0002\u0002",
    "\u0002\u0093\u0088\u0003\u0002\u0002\u0002\u0093\u0089\u0003\u0002\u0002",
    "\u0002\u0093\u008a\u0003\u0002\u0002\u0002\u0093\u008b\u0003\u0002\u0002",
    "\u0002\u0093\u008c\u0003\u0002\u0002\u0002\u0093\u008d\u0003\u0002\u0002",
    "\u0002\u0093\u008e\u0003\u0002\u0002\u0002\u0093\u008f\u0003\u0002\u0002",
    "\u0002\u0093\u0090\u0003\u0002\u0002\u0002\u0093\u0091\u0003\u0002\u0002",
    "\u0002\u0093\u0092\u0003\u0002\u0002\u0002\u0094\u0007\u0003\u0002\u0002",
    "\u0002\u0095\u0096\u0007\u000e\u0002\u0002\u0096\u009e\u0007?\u0002",
    "\u0002\u0097\u009d\u0005\f\u0007\u0002\u0098\u009d\u0005:\u001e\u0002",
    "\u0099\u009d\u0005\u0006\u0004\u0002\u009a\u009d\u00052\u001a\u0002",
    "\u009b\u009d\u0005@!\u0002\u009c\u0097\u0003\u0002\u0002\u0002\u009c",
    "\u0098\u0003\u0002\u0002\u0002\u009c\u0099\u0003\u0002\u0002\u0002\u009c",
    "\u009a\u0003\u0002\u0002\u0002\u009c\u009b\u0003\u0002\u0002\u0002\u009d",
    "\u00a0\u0003\u0002\u0002\u0002\u009e\u009c\u0003\u0002\u0002\u0002\u009e",
    "\u009f\u0003\u0002\u0002\u0002\u009f\u00a1\u0003\u0002\u0002\u0002\u00a0",
    "\u009e\u0003\u0002\u0002\u0002\u00a1\u00a2\u0007\r\u0002\u0002\u00a2",
    "\u00b1\u0005@!\u0002\u00a3\u00a4\u0007\u000e\u0002\u0002\u00a4\u00ac",
    "\u0007?\u0002\u0002\u00a5\u00ab\u0005\f\u0007\u0002\u00a6\u00ab\u0005",
    ":\u001e\u0002\u00a7\u00ab\u0005\u0006\u0004\u0002\u00a8\u00ab\u0005",
    "2\u001a\u0002\u00a9\u00ab\u0005@!\u0002\u00aa\u00a5\u0003\u0002\u0002",
    "\u0002\u00aa\u00a6\u0003\u0002\u0002\u0002\u00aa\u00a7\u0003\u0002\u0002",
    "\u0002\u00aa\u00a8\u0003\u0002\u0002\u0002\u00aa\u00a9\u0003\u0002\u0002",
    "\u0002\u00ab\u00ae\u0003\u0002\u0002\u0002\u00ac\u00aa\u0003\u0002\u0002",
    "\u0002\u00ac\u00ad\u0003\u0002\u0002\u0002\u00ad\u00af\u0003\u0002\u0002",
    "\u0002\u00ae\u00ac\u0003\u0002\u0002\u0002\u00af\u00b1\u0007\r\u0002",
    "\u0002\u00b0\u0095\u0003\u0002\u0002\u0002\u00b0\u00a3\u0003\u0002\u0002",
    "\u0002\u00b1\t\u0003\u0002\u0002\u0002\u00b2\u00b3\u0007\u000f\u0002",
    "\u0002\u00b3\u00b4\u0005<\u001f\u0002\u00b4\u000b\u0003\u0002\u0002",
    "\u0002\u00b5\u00bb\u0007\u0011\u0002\u0002\u00b6\u00ba\u0005\u0006\u0004",
    "\u0002\u00b7\u00ba\u00052\u001a\u0002\u00b8\u00ba\u0005@!\u0002\u00b9",
    "\u00b6\u0003\u0002\u0002\u0002\u00b9\u00b7\u0003\u0002\u0002\u0002\u00b9",
    "\u00b8\u0003\u0002\u0002\u0002\u00ba\u00bd\u0003\u0002\u0002\u0002\u00bb",
    "\u00b9\u0003\u0002\u0002\u0002\u00bb\u00bc\u0003\u0002\u0002\u0002\u00bc",
    "\u00be\u0003\u0002\u0002\u0002\u00bd\u00bb\u0003\u0002\u0002\u0002\u00be",
    "\u00bf\u0007\r\u0002\u0002\u00bf\u00cb\u0005@!\u0002\u00c0\u00c6\u0007",
    "\u0011\u0002\u0002\u00c1\u00c5\u0005\u0006\u0004\u0002\u00c2\u00c5\u0005",
    "2\u001a\u0002\u00c3\u00c5\u0005@!\u0002\u00c4\u00c1\u0003\u0002\u0002",
    "\u0002\u00c4\u00c2\u0003\u0002\u0002\u0002\u00c4\u00c3\u0003\u0002\u0002",
    "\u0002\u00c5\u00c8\u0003\u0002\u0002\u0002\u00c6\u00c4\u0003\u0002\u0002",
    "\u0002\u00c6\u00c7\u0003\u0002\u0002\u0002\u00c7\u00c9\u0003\u0002\u0002",
    "\u0002\u00c8\u00c6\u0003\u0002\u0002\u0002\u00c9\u00cb\u0007\r\u0002",
    "\u0002\u00ca\u00b5\u0003\u0002\u0002\u0002\u00ca\u00c0\u0003\u0002\u0002",
    "\u0002\u00cb\r\u0003\u0002\u0002\u0002\u00cc\u00d2\u0007\u0012\u0002",
    "\u0002\u00cd\u00d1\u0005\u0006\u0004\u0002\u00ce\u00d1\u00052\u001a",
    "\u0002\u00cf\u00d1\u0005@!\u0002\u00d0\u00cd\u0003\u0002\u0002\u0002",
    "\u00d0\u00ce\u0003\u0002\u0002\u0002\u00d0\u00cf\u0003\u0002\u0002\u0002",
    "\u00d1\u00d4\u0003\u0002\u0002\u0002\u00d2\u00d0\u0003\u0002\u0002\u0002",
    "\u00d2\u00d3\u0003\u0002\u0002\u0002\u00d3\u00d5\u0003\u0002\u0002\u0002",
    "\u00d4\u00d2\u0003\u0002\u0002\u0002\u00d5\u00d6\u0007\r\u0002\u0002",
    "\u00d6\u00e2\u0005@!\u0002\u00d7\u00dd\u0007\u0012\u0002\u0002\u00d8",
    "\u00dc\u0005\u0006\u0004\u0002\u00d9\u00dc\u00052\u001a\u0002\u00da",
    "\u00dc\u0005@!\u0002\u00db\u00d8\u0003\u0002\u0002\u0002\u00db\u00d9",
    "\u0003\u0002\u0002\u0002\u00db\u00da\u0003\u0002\u0002\u0002\u00dc\u00df",
    "\u0003\u0002\u0002\u0002\u00dd\u00db\u0003\u0002\u0002\u0002\u00dd\u00de",
    "\u0003\u0002\u0002\u0002\u00de\u00e0\u0003\u0002\u0002\u0002\u00df\u00dd",
    "\u0003\u0002\u0002\u0002\u00e0\u00e2\u0007\r\u0002\u0002\u00e1\u00cc",
    "\u0003\u0002\u0002\u0002\u00e1\u00d7\u0003\u0002\u0002\u0002\u00e2\u000f",
    "\u0003\u0002\u0002\u0002\u00e3\u00e4\u0007\u0013\u0002\u0002\u00e4\u00e5",
    "\u0005<\u001f\u0002\u00e5\u0011\u0003\u0002\u0002\u0002\u00e6\u00e7",
    "\u0007\u0010\u0002\u0002\u00e7\u00e8\u0005> \u0002\u00e8\u0013\u0003",
    "\u0002\u0002\u0002\u00e9\u00f3\u0007\u0014\u0002\u0002\u00ea\u00f2\u0005",
    "\f\u0007\u0002\u00eb\u00f2\u0005 \u0011\u0002\u00ec\u00f2\u0005\b\u0005",
    "\u0002\u00ed\u00f2\u0005:\u001e\u0002\u00ee\u00f2\u0005\u0006\u0004",
    "\u0002\u00ef\u00f2\u00052\u001a\u0002\u00f0\u00f2\u0005@!\u0002\u00f1",
    "\u00ea\u0003\u0002\u0002\u0002\u00f1\u00eb\u0003\u0002\u0002\u0002\u00f1",
    "\u00ec\u0003\u0002\u0002\u0002\u00f1\u00ed\u0003\u0002\u0002\u0002\u00f1",
    "\u00ee\u0003\u0002\u0002\u0002\u00f1\u00ef\u0003\u0002\u0002\u0002\u00f1",
    "\u00f0\u0003\u0002\u0002\u0002\u00f2\u00f5\u0003\u0002\u0002\u0002\u00f3",
    "\u00f1\u0003\u0002\u0002\u0002\u00f3\u00f4\u0003\u0002\u0002\u0002\u00f4",
    "\u00f6\u0003\u0002\u0002\u0002\u00f5\u00f3\u0003\u0002\u0002\u0002\u00f6",
    "\u00f7\u0007\r\u0002\u0002\u00f7\u0107\u0005@!\u0002\u00f8\u0102\u0007",
    "\u0014\u0002\u0002\u00f9\u0101\u0005\f\u0007\u0002\u00fa\u0101\u0005",
    " \u0011\u0002\u00fb\u0101\u0005\b\u0005\u0002\u00fc\u0101\u0005:\u001e",
    "\u0002\u00fd\u0101\u0005\u0006\u0004\u0002\u00fe\u0101\u00052\u001a",
    "\u0002\u00ff\u0101\u0005@!\u0002\u0100\u00f9\u0003\u0002\u0002\u0002",
    "\u0100\u00fa\u0003\u0002\u0002\u0002\u0100\u00fb\u0003\u0002\u0002\u0002",
    "\u0100\u00fc\u0003\u0002\u0002\u0002\u0100\u00fd\u0003\u0002\u0002\u0002",
    "\u0100\u00fe\u0003\u0002\u0002\u0002\u0100\u00ff\u0003\u0002\u0002\u0002",
    "\u0101\u0104\u0003\u0002\u0002\u0002\u0102\u0100\u0003\u0002\u0002\u0002",
    "\u0102\u0103\u0003\u0002\u0002\u0002\u0103\u0105\u0003\u0002\u0002\u0002",
    "\u0104\u0102\u0003\u0002\u0002\u0002\u0105\u0107\u0007\r\u0002\u0002",
    "\u0106\u00e9\u0003\u0002\u0002\u0002\u0106\u00f8\u0003\u0002\u0002\u0002",
    "\u0107\u0015\u0003\u0002\u0002\u0002\u0108\u0109\u0007\u0015\u0002\u0002",
    "\u0109\u010a\u0005<\u001f\u0002\u010a\u0017\u0003\u0002\u0002\u0002",
    "\u010b\u010c\u0007\u0016\u0002\u0002\u010c\u010d\u0005<\u001f\u0002",
    "\u010d\u0019\u0003\u0002\u0002\u0002\u010e\u010f\u0007\u0017\u0002\u0002",
    "\u010f\u0110\u0005<\u001f\u0002\u0110\u001b\u0003\u0002\u0002\u0002",
    "\u0111\u0112\u0007\u0018\u0002\u0002\u0112\u0113\u0005<\u001f\u0002",
    "\u0113\u001d\u0003\u0002\u0002\u0002\u0114\u0115\u0007\u0019\u0002\u0002",
    "\u0115\u0116\u0005<\u001f\u0002\u0116\u001f\u0003\u0002\u0002\u0002",
    "\u0117\u011f\u0007\u001a\u0002\u0002\u0118\u011e\u0005\f\u0007\u0002",
    "\u0119\u011e\u0005:\u001e\u0002\u011a\u011e\u0005\u0006\u0004\u0002",
    "\u011b\u011e\u00052\u001a\u0002\u011c\u011e\u0005@!\u0002\u011d\u0118",
    "\u0003\u0002\u0002\u0002\u011d\u0119\u0003\u0002\u0002\u0002\u011d\u011a",
    "\u0003\u0002\u0002\u0002\u011d\u011b\u0003\u0002\u0002\u0002\u011d\u011c",
    "\u0003\u0002\u0002\u0002\u011e\u0121\u0003\u0002\u0002\u0002\u011f\u011d",
    "\u0003\u0002\u0002\u0002\u011f\u0120\u0003\u0002\u0002\u0002\u0120\u0122",
    "\u0003\u0002\u0002\u0002\u0121\u011f\u0003\u0002\u0002\u0002\u0122\u0123",
    "\u0007\r\u0002\u0002\u0123\u0131\u0005@!\u0002\u0124\u012c\u0007\u001a",
    "\u0002\u0002\u0125\u012b\u0005\f\u0007\u0002\u0126\u012b\u0005:\u001e",
    "\u0002\u0127\u012b\u0005\u0006\u0004\u0002\u0128\u012b\u00052\u001a",
    "\u0002\u0129\u012b\u0005@!\u0002\u012a\u0125\u0003\u0002\u0002\u0002",
    "\u012a\u0126\u0003\u0002\u0002\u0002\u012a\u0127\u0003\u0002\u0002\u0002",
    "\u012a\u0128\u0003\u0002\u0002\u0002\u012a\u0129\u0003\u0002\u0002\u0002",
    "\u012b\u012e\u0003\u0002\u0002\u0002\u012c\u012a\u0003\u0002\u0002\u0002",
    "\u012c\u012d\u0003\u0002\u0002\u0002\u012d\u012f\u0003\u0002\u0002\u0002",
    "\u012e\u012c\u0003\u0002\u0002\u0002\u012f\u0131\u0007\r\u0002\u0002",
    "\u0130\u0117\u0003\u0002\u0002\u0002\u0130\u0124\u0003\u0002\u0002\u0002",
    "\u0131!\u0003\u0002\u0002\u0002\u0132\u0133\u0007%\u0002\u0002\u0133",
    "\u0134\u0007\u0003\u0002\u0002\u0134\u0135\u0005> \u0002\u0135\u0136",
    "\u0007\u0004\u0002\u0002\u0136\u0137\u0005&\u0014\u0002\u0137\u0138",
    "\u0005$\u0013\u0002\u0138#\u0003\u0002\u0002\u0002\u0139\u0147\t\u0002",
    "\u0002\u0002\u013a\u013b\u0007\'\u0002\u0002\u013b\u0147\u0005\"\u0012",
    "\u0002\u013c\u0142\u0007\'\u0002\u0002\u013d\u0141\u0005\u0006\u0004",
    "\u0002\u013e\u0141\u00052\u001a\u0002\u013f\u0141\u0005@!\u0002\u0140",
    "\u013d\u0003\u0002\u0002\u0002\u0140\u013e\u0003\u0002\u0002\u0002\u0140",
    "\u013f\u0003\u0002\u0002\u0002\u0141\u0144\u0003\u0002\u0002\u0002\u0142",
    "\u0140\u0003\u0002\u0002\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143",
    "\u0145\u0003\u0002\u0002\u0002\u0144\u0142\u0003\u0002\u0002\u0002\u0145",
    "\u0147\u0005$\u0013\u0002\u0146\u0139\u0003\u0002\u0002\u0002\u0146",
    "\u013a\u0003\u0002\u0002\u0002\u0146\u013c\u0003\u0002\u0002\u0002\u0147",
    "%\u0003\u0002\u0002\u0002\u0148\u014a\u0007&\u0002\u0002\u0149\u014b",
    "\u0007\u0005\u0002\u0002\u014a\u0149\u0003\u0002\u0002\u0002\u014a\u014b",
    "\u0003\u0002\u0002\u0002\u014b\u0151\u0003\u0002\u0002\u0002\u014c\u0150",
    "\u0005\u0006\u0004\u0002\u014d\u0150\u00052\u001a\u0002\u014e\u0150",
    "\u0005@!\u0002\u014f\u014c\u0003\u0002\u0002\u0002\u014f\u014d\u0003",
    "\u0002\u0002\u0002\u014f\u014e\u0003\u0002\u0002\u0002\u0150\u0153\u0003",
    "\u0002\u0002\u0002\u0151\u014f\u0003\u0002\u0002\u0002\u0151\u0152\u0003",
    "\u0002\u0002\u0002\u0152\'\u0003\u0002\u0002\u0002\u0153\u0151\u0003",
    "\u0002\u0002\u0002\u0154\u0155\u0007%\u0002\u0002\u0155\u0156\u0007",
    "\u0003\u0002\u0002\u0156\u0157\u0005> \u0002\u0157\u0158\u0007\u0004",
    "\u0002\u0002\u0158\u0159\u0005\u0006\u0004\u0002\u0159)\u0003\u0002",
    "\u0002\u0002\u015a\u015b\u0007.\u0002\u0002\u015b\u015c\u0005> \u0002",
    "\u015c\u015d\u0007C\u0002\u0002\u015d\u015e\u0005> \u0002\u015e\u015f",
    "\u0007C\u0002\u0002\u015f\u0160\u0005> \u0002\u0160\u0161\u0007D\u0002",
    "\u0002\u0161\u0166\u0005> \u0002\u0162\u0163\u0007C\u0002\u0002\u0163",
    "\u0165\u0005> \u0002\u0164\u0162\u0003\u0002\u0002\u0002\u0165\u0168",
    "\u0003\u0002\u0002\u0002\u0166\u0164\u0003\u0002\u0002\u0002\u0166\u0167",
    "\u0003\u0002\u0002\u0002\u0167\u0169\u0003\u0002\u0002\u0002\u0168\u0166",
    "\u0003\u0002\u0002\u0002\u0169\u016a\u0007D\u0002\u0002\u016a+\u0003",
    "\u0002\u0002\u0002\u016b\u016c\u0007/\u0002\u0002\u016c\u016d\u0007",
    "\u0003\u0002\u0002\u016d\u0172\u0005<\u001f\u0002\u016e\u016f\u0007",
    "C\u0002\u0002\u016f\u0171\u0005<\u001f\u0002\u0170\u016e\u0003\u0002",
    "\u0002\u0002\u0171\u0174\u0003\u0002\u0002\u0002\u0172\u0170\u0003\u0002",
    "\u0002\u0002\u0172\u0173\u0003\u0002\u0002\u0002\u0173\u0175\u0003\u0002",
    "\u0002\u0002\u0174\u0172\u0003\u0002\u0002\u0002\u0175\u0177\u0007\u0004",
    "\u0002\u0002\u0176\u0178\u0005@!\u0002\u0177\u0176\u0003\u0002\u0002",
    "\u0002\u0177\u0178\u0003\u0002\u0002\u0002\u0178-\u0003\u0002\u0002",
    "\u0002\u0179\u017a\u00070\u0002\u0002\u017a\u017b\u0005> \u0002\u017b",
    "\u017c\u0005<\u001f\u0002\u017c\u017d\u0007C\u0002\u0002\u017d\u017e",
    "\u0005> \u0002\u017e\u017f\u0007C\u0002\u0002\u017f\u0184\u0005> \u0002",
    "\u0180\u0183\u0005\u0006\u0004\u0002\u0181\u0183\u0005@!\u0002\u0182",
    "\u0180\u0003\u0002\u0002\u0002\u0182\u0181\u0003\u0002\u0002\u0002\u0183",
    "\u0186\u0003\u0002\u0002\u0002\u0184\u0182\u0003\u0002\u0002\u0002\u0184",
    "\u0185\u0003\u0002\u0002\u0002\u0185\u0187\u0003\u0002\u0002\u0002\u0186",
    "\u0184\u0003\u0002\u0002\u0002\u0187\u0188\u0005> \u0002\u0188\u0189",
    "\u0007\u0006\u0002\u0002\u0189\u018a\u00071\u0002\u0002\u018a\u019c",
    "\u0003\u0002\u0002\u0002\u018b\u018c\u00070\u0002\u0002\u018c\u018d",
    "\u0005> \u0002\u018d\u018e\u0005<\u001f\u0002\u018e\u018f\u0007C\u0002",
    "\u0002\u018f\u0194\u0005> \u0002\u0190\u0193\u0005\u0006\u0004\u0002",
    "\u0191\u0193\u0005@!\u0002\u0192\u0190\u0003\u0002\u0002\u0002\u0192",
    "\u0191\u0003\u0002\u0002\u0002\u0193\u0196\u0003\u0002\u0002\u0002\u0194",
    "\u0192\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195",
    "\u0197\u0003\u0002\u0002\u0002\u0196\u0194\u0003\u0002\u0002\u0002\u0197",
    "\u0198\u0005> \u0002\u0198\u0199\u0007\u0006\u0002\u0002\u0199\u019a",
    "\u00071\u0002\u0002\u019a\u019c\u0003\u0002\u0002\u0002\u019b\u0179",
    "\u0003\u0002\u0002\u0002\u019b\u018b\u0003\u0002\u0002\u0002\u019c/",
    "\u0003\u0002\u0002\u0002\u019d\u019e\u00072\u0002\u0002\u019e\u019f",
    "\u00073\u0002\u0002\u019f\u01a0\u0005> \u0002\u01a01\u0003\u0002\u0002",
    "\u0002\u01a1\u01a2\u0005> \u0002\u01a2\u01a3\u0007\u0006\u0002\u0002",
    "\u01a3\u01a4\u0005\u0006\u0004\u0002\u01a4\u01aa\u0003\u0002\u0002\u0002",
    "\u01a5\u01a6\u0005> \u0002\u01a6\u01a7\u0007\u0006\u0002\u0002\u01a7",
    "\u01a8\u00071\u0002\u0002\u01a8\u01aa\u0003\u0002\u0002\u0002\u01a9",
    "\u01a1\u0003\u0002\u0002\u0002\u01a9\u01a5\u0003\u0002\u0002\u0002\u01aa",
    "3\u0003\u0002\u0002\u0002\u01ab\u01ac\u00074\u0002\u0002\u01ac\u01ad",
    "\u0005<\u001f\u0002\u01ad5\u0003\u0002\u0002\u0002\u01ae\u01af\u0007",
    "5\u0002\u0002\u01af\u01b0\u0005<\u001f\u0002\u01b07\u0003\u0002\u0002",
    "\u0002\u01b1\u01b2\u00076\u0002\u0002\u01b2\u01b7\u0005> \u0002\u01b3",
    "\u01b4\u0007C\u0002\u0002\u01b4\u01b6\u0005> \u0002\u01b5\u01b3\u0003",
    "\u0002\u0002\u0002\u01b6\u01b9\u0003\u0002\u0002\u0002\u01b7\u01b5\u0003",
    "\u0002\u0002\u0002\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8\u01e8\u0003",
    "\u0002\u0002\u0002\u01b9\u01b7\u0003\u0002\u0002\u0002\u01ba\u01bb\u0007",
    "7\u0002\u0002\u01bb\u01c0\u0005> \u0002\u01bc\u01bd\u0007C\u0002\u0002",
    "\u01bd\u01bf\u0005> \u0002\u01be\u01bc\u0003\u0002\u0002\u0002\u01bf",
    "\u01c2\u0003\u0002\u0002\u0002\u01c0\u01be\u0003\u0002\u0002\u0002\u01c0",
    "\u01c1\u0003\u0002\u0002\u0002\u01c1\u01e8\u0003\u0002\u0002\u0002\u01c2",
    "\u01c0\u0003\u0002\u0002\u0002\u01c3\u01c4\u00078\u0002\u0002\u01c4",
    "\u01c9\u0005> \u0002\u01c5\u01c6\u0007C\u0002\u0002\u01c6\u01c8\u0005",
    "> \u0002\u01c7\u01c5\u0003\u0002\u0002\u0002\u01c8\u01cb\u0003\u0002",
    "\u0002\u0002\u01c9\u01c7\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002",
    "\u0002\u0002\u01ca\u01e8\u0003\u0002\u0002\u0002\u01cb\u01c9\u0003\u0002",
    "\u0002\u0002\u01cc\u01cd\u00079\u0002\u0002\u01cd\u01d2\u0005> \u0002",
    "\u01ce\u01cf\u0007C\u0002\u0002\u01cf\u01d1\u0005> \u0002\u01d0\u01ce",
    "\u0003\u0002\u0002\u0002\u01d1\u01d4\u0003\u0002\u0002\u0002\u01d2\u01d0",
    "\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01e8",
    "\u0003\u0002\u0002\u0002\u01d4\u01d2\u0003\u0002\u0002\u0002\u01d5\u01d6",
    "\u0007:\u0002\u0002\u01d6\u01db\u0005> \u0002\u01d7\u01d8\u0007C\u0002",
    "\u0002\u01d8\u01da\u0005> \u0002\u01d9\u01d7\u0003\u0002\u0002\u0002",
    "\u01da\u01dd\u0003\u0002\u0002\u0002\u01db\u01d9\u0003\u0002\u0002\u0002",
    "\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc\u01e8\u0003\u0002\u0002\u0002",
    "\u01dd\u01db\u0003\u0002\u0002\u0002\u01de\u01df\u0007;\u0002\u0002",
    "\u01df\u01e4\u0005> \u0002\u01e0\u01e1\u0007C\u0002\u0002\u01e1\u01e3",
    "\u0005> \u0002\u01e2\u01e0\u0003\u0002\u0002\u0002\u01e3\u01e6\u0003",
    "\u0002\u0002\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003",
    "\u0002\u0002\u0002\u01e5\u01e8\u0003\u0002\u0002\u0002\u01e6\u01e4\u0003",
    "\u0002\u0002\u0002\u01e7\u01b1\u0003\u0002\u0002\u0002\u01e7\u01ba\u0003",
    "\u0002\u0002\u0002\u01e7\u01c3\u0003\u0002\u0002\u0002\u01e7\u01cc\u0003",
    "\u0002\u0002\u0002\u01e7\u01d5\u0003\u0002\u0002\u0002\u01e7\u01de\u0003",
    "\u0002\u0002\u0002\u01e89\u0003\u0002\u0002\u0002\u01e9\u0203\u0007",
    "*\u0002\u0002\u01ea\u01ec\u0007\u0003\u0002\u0002\u01eb\u01ed\u0007",
    "?\u0002\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003",
    "\u0002\u0002\u0002\u01ed\u01f2\u0003\u0002\u0002\u0002\u01ee\u01ef\u0007",
    "C\u0002\u0002\u01ef\u01f1\u0007?\u0002\u0002\u01f0\u01ee\u0003\u0002",
    "\u0002\u0002\u01f1\u01f4\u0003\u0002\u0002\u0002\u01f2\u01f0\u0003\u0002",
    "\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3\u01f6\u0003\u0002",
    "\u0002\u0002\u01f4\u01f2\u0003\u0002\u0002\u0002\u01f5\u01f7\u0007@",
    "\u0002\u0002\u01f6\u01f5\u0003\u0002\u0002\u0002\u01f6\u01f7\u0003\u0002",
    "\u0002\u0002\u01f7\u01f9\u0003\u0002\u0002\u0002\u01f8\u01fa\u0007?",
    "\u0002\u0002\u01f9\u01f8\u0003\u0002\u0002\u0002\u01f9\u01fa\u0003\u0002",
    "\u0002\u0002\u01fa\u01ff\u0003\u0002\u0002\u0002\u01fb\u01fc\u0007C",
    "\u0002\u0002\u01fc\u01fe\u0007?\u0002\u0002\u01fd\u01fb\u0003\u0002",
    "\u0002\u0002\u01fe\u0201\u0003\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002",
    "\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u0202\u0003\u0002",
    "\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0202\u0204\u0007\u0004",
    "\u0002\u0002\u0203\u01ea\u0003\u0002\u0002\u0002\u0203\u0204\u0003\u0002",
    "\u0002\u0002\u0204\u0209\u0003\u0002\u0002\u0002\u0205\u0208\u0005\u0006",
    "\u0004\u0002\u0206\u0208\u0005@!\u0002\u0207\u0205\u0003\u0002\u0002",
    "\u0002\u0207\u0206\u0003\u0002\u0002\u0002\u0208\u020b\u0003\u0002\u0002",
    "\u0002\u0209\u0207\u0003\u0002\u0002\u0002\u0209\u020a\u0003\u0002\u0002",
    "\u0002\u020a\u020c\u0003\u0002\u0002\u0002\u020b\u0209\u0003\u0002\u0002",
    "\u0002\u020c\u020d\u0007\r\u0002\u0002\u020d\u0233\u0005@!\u0002\u020e",
    "\u0228\u0007*\u0002\u0002\u020f\u0211\u0007\u0003\u0002\u0002\u0210",
    "\u0212\u0007?\u0002\u0002\u0211\u0210\u0003\u0002\u0002\u0002\u0211",
    "\u0212\u0003\u0002\u0002\u0002\u0212\u0217\u0003\u0002\u0002\u0002\u0213",
    "\u0214\u0007C\u0002\u0002\u0214\u0216\u0007?\u0002\u0002\u0215\u0213",
    "\u0003\u0002\u0002\u0002\u0216\u0219\u0003\u0002\u0002\u0002\u0217\u0215",
    "\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218\u021b",
    "\u0003\u0002\u0002\u0002\u0219\u0217\u0003\u0002\u0002\u0002\u021a\u021c",
    "\u0007@\u0002\u0002\u021b\u021a\u0003\u0002\u0002\u0002\u021b\u021c",
    "\u0003\u0002\u0002\u0002\u021c\u021e\u0003\u0002\u0002\u0002\u021d\u021f",
    "\u0007?\u0002\u0002\u021e\u021d\u0003\u0002\u0002\u0002\u021e\u021f",
    "\u0003\u0002\u0002\u0002\u021f\u0224\u0003\u0002\u0002\u0002\u0220\u0221",
    "\u0007C\u0002\u0002\u0221\u0223\u0007?\u0002\u0002\u0222\u0220\u0003",
    "\u0002\u0002\u0002\u0223\u0226\u0003\u0002\u0002\u0002\u0224\u0222\u0003",
    "\u0002\u0002\u0002\u0224\u0225\u0003\u0002\u0002\u0002\u0225\u0227\u0003",
    "\u0002\u0002\u0002\u0226\u0224\u0003\u0002\u0002\u0002\u0227\u0229\u0007",
    "\u0004\u0002\u0002\u0228\u020f\u0003\u0002\u0002\u0002\u0228\u0229\u0003",
    "\u0002\u0002\u0002\u0229\u022e\u0003\u0002\u0002\u0002\u022a\u022d\u0005",
    "\u0006\u0004\u0002\u022b\u022d\u0005@!\u0002\u022c\u022a\u0003\u0002",
    "\u0002\u0002\u022c\u022b\u0003\u0002\u0002\u0002\u022d\u0230\u0003\u0002",
    "\u0002\u0002\u022e\u022c\u0003\u0002\u0002\u0002\u022e\u022f\u0003\u0002",
    "\u0002\u0002\u022f\u0231\u0003\u0002\u0002\u0002\u0230\u022e\u0003\u0002",
    "\u0002\u0002\u0231\u0233\u0007\r\u0002\u0002\u0232\u01e9\u0003\u0002",
    "\u0002\u0002\u0232\u020e\u0003\u0002\u0002\u0002\u0233;\u0003\u0002",
    "\u0002\u0002\u0234\u0235\u0005> \u0002\u0235\u0236\u0007@\u0002\u0002",
    "\u0236\u023a\u0005<\u001f\u0002\u0237\u0239\u0007\u0005\u0002\u0002",
    "\u0238\u0237\u0003\u0002\u0002\u0002\u0239\u023c\u0003\u0002\u0002\u0002",
    "\u023a\u0238\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002\u0002\u0002",
    "\u023b\u023d\u0003\u0002\u0002\u0002\u023c\u023a\u0003\u0002\u0002\u0002",
    "\u023d\u023e\u0005@!\u0002\u023e\u0294\u0003\u0002\u0002\u0002\u023f",
    "\u0240\u0005> \u0002\u0240\u0241\u0007@\u0002\u0002\u0241\u0245\u0005",
    "<\u001f\u0002\u0242\u0244\u0007\u0005\u0002\u0002\u0243\u0242\u0003",
    "\u0002\u0002\u0002\u0244\u0247\u0003\u0002\u0002\u0002\u0245\u0243\u0003",
    "\u0002\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246\u0294\u0003",
    "\u0002\u0002\u0002\u0247\u0245\u0003\u0002\u0002\u0002\u0248\u0249\u0005",
    "> \u0002\u0249\u024a\u0007@\u0002\u0002\u024a\u024b\u0005> \u0002\u024b",
    "\u024c\u0007C\u0002\u0002\u024c\u0251\u0005> \u0002\u024d\u024e\u0007",
    "C\u0002\u0002\u024e\u0250\u0005> \u0002\u024f\u024d\u0003\u0002\u0002",
    "\u0002\u0250\u0253\u0003\u0002\u0002\u0002\u0251\u024f\u0003\u0002\u0002",
    "\u0002\u0251\u0252\u0003\u0002\u0002\u0002\u0252\u0254\u0003\u0002\u0002",
    "\u0002\u0253\u0251\u0003\u0002\u0002\u0002\u0254\u0255\u0005@!\u0002",
    "\u0255\u0294\u0003\u0002\u0002\u0002\u0256\u0257\u0005> \u0002\u0257",
    "\u0258\u0007@\u0002\u0002\u0258\u0259\u0005> \u0002\u0259\u025a\u0007",
    "C\u0002\u0002\u025a\u025f\u0005> \u0002\u025b\u025c\u0007C\u0002\u0002",
    "\u025c\u025e\u0005> \u0002\u025d\u025b\u0003\u0002\u0002\u0002\u025e",
    "\u0261\u0003\u0002\u0002\u0002\u025f\u025d\u0003\u0002\u0002\u0002\u025f",
    "\u0260\u0003\u0002\u0002\u0002\u0260\u0294\u0003\u0002\u0002\u0002\u0261",
    "\u025f\u0003\u0002\u0002\u0002\u0262\u0263\u0005> \u0002\u0263\u0264",
    "\u0007@\u0002\u0002\u0264\u0265\u0005> \u0002\u0265\u0266\u0007C\u0002",
    "\u0002\u0266\u0267\u0005> \u0002\u0267\u0268\u0007@\u0002\u0002\u0268",
    "\u0270\u0005> \u0002\u0269\u026a\u0007C\u0002\u0002\u026a\u026b\u0005",
    "> \u0002\u026b\u026c\u0007@\u0002\u0002\u026c\u026d\u0005> \u0002\u026d",
    "\u026f\u0003\u0002\u0002\u0002\u026e\u0269\u0003\u0002\u0002\u0002\u026f",
    "\u0272\u0003\u0002\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002\u0270",
    "\u0271\u0003\u0002\u0002\u0002\u0271\u0273\u0003\u0002\u0002\u0002\u0272",
    "\u0270\u0003\u0002\u0002\u0002\u0273\u0274\u0005@!\u0002\u0274\u0294",
    "\u0003\u0002\u0002\u0002\u0275\u0276\u0005> \u0002\u0276\u0277\u0007",
    "@\u0002\u0002\u0277\u0278\u0005> \u0002\u0278\u0279\u0007C\u0002\u0002",
    "\u0279\u027a\u0005> \u0002\u027a\u027b\u0007@\u0002\u0002\u027b\u0283",
    "\u0005> \u0002\u027c\u027d\u0007C\u0002\u0002\u027d\u027e\u0005> \u0002",
    "\u027e\u027f\u0007@\u0002\u0002\u027f\u0280\u0005> \u0002\u0280\u0282",
    "\u0003\u0002\u0002\u0002\u0281\u027c\u0003\u0002\u0002\u0002\u0282\u0285",
    "\u0003\u0002\u0002\u0002\u0283\u0281\u0003\u0002\u0002\u0002\u0283\u0284",
    "\u0003\u0002\u0002\u0002\u0284\u0294\u0003\u0002\u0002\u0002\u0285\u0283",
    "\u0003\u0002\u0002\u0002\u0286\u0287\u0005> \u0002\u0287\u0288\u0007",
    "@\u0002\u0002\u0288\u0289\u0005> \u0002\u0289\u028a\u0007C\u0002\u0002",
    "\u028a\u028f\u0005> \u0002\u028b\u028c\u0007C\u0002\u0002\u028c\u028e",
    "\u0005> \u0002\u028d\u028b\u0003\u0002\u0002\u0002\u028e\u0291\u0003",
    "\u0002\u0002\u0002\u028f\u028d\u0003\u0002\u0002\u0002\u028f\u0290\u0003",
    "\u0002\u0002\u0002\u0290\u0294\u0003\u0002\u0002\u0002\u0291\u028f\u0003",
    "\u0002\u0002\u0002\u0292\u0294\u0005> \u0002\u0293\u0234\u0003\u0002",
    "\u0002\u0002\u0293\u023f\u0003\u0002\u0002\u0002\u0293\u0248\u0003\u0002",
    "\u0002\u0002\u0293\u0256\u0003\u0002\u0002\u0002\u0293\u0262\u0003\u0002",
    "\u0002\u0002\u0293\u0275\u0003\u0002\u0002\u0002\u0293\u0286\u0003\u0002",
    "\u0002\u0002\u0293\u0292\u0003\u0002\u0002\u0002\u0294=\u0003\u0002",
    "\u0002\u0002\u0295\u0296\b \u0001\u0002\u0296\u0297\t\u0003\u0002\u0002",
    "\u0297\u02b1\u0005> \u000e\u0298\u0299\u0007-\u0002\u0002\u0299\u02b1",
    "\u0005> \u000b\u029a\u02b1\t\u0004\u0002\u0002\u029b\u029c\u0007?\u0002",
    "\u0002\u029c\u02a5\u0007\u0003\u0002\u0002\u029d\u02a2\u0005> \u0002",
    "\u029e\u029f\u0007C\u0002\u0002\u029f\u02a1\u0005> \u0002\u02a0\u029e",
    "\u0003\u0002\u0002\u0002\u02a1\u02a4\u0003\u0002\u0002\u0002\u02a2\u02a0",
    "\u0003\u0002\u0002\u0002\u02a2\u02a3\u0003\u0002\u0002\u0002\u02a3\u02a6",
    "\u0003\u0002\u0002\u0002\u02a4\u02a2\u0003\u0002\u0002\u0002\u02a5\u029d",
    "\u0003\u0002\u0002\u0002\u02a5\u02a6\u0003\u0002\u0002\u0002\u02a6\u02a7",
    "\u0003\u0002\u0002\u0002\u02a7\u02b1\u0007\u0004\u0002\u0002\u02a8\u02a9",
    "\u0007\u0003\u0002\u0002\u02a9\u02aa\u0005> \u0002\u02aa\u02ab\u0007",
    "\u0004\u0002\u0002\u02ab\u02b1\u0003\u0002\u0002\u0002\u02ac\u02b1\u0007",
    "<\u0002\u0002\u02ad\u02b1\u0007?\u0002\u0002\u02ae\u02b1\u0007=\u0002",
    "\u0002\u02af\u02b1\u0007>\u0002\u0002\u02b0\u0295\u0003\u0002\u0002",
    "\u0002\u02b0\u0298\u0003\u0002\u0002\u0002\u02b0\u029a\u0003\u0002\u0002",
    "\u0002\u02b0\u029b\u0003\u0002\u0002\u0002\u02b0\u02a8\u0003\u0002\u0002",
    "\u0002\u02b0\u02ac\u0003\u0002\u0002\u0002\u02b0\u02ad\u0003\u0002\u0002",
    "\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b0\u02af\u0003\u0002\u0002",
    "\u0002\u02b1\u02c0\u0003\u0002\u0002\u0002\u02b2\u02b3\f\u000f\u0002",
    "\u0002\u02b3\u02b4\t\u0005\u0002\u0002\u02b4\u02bf\u0005> \u000f\u02b5",
    "\u02b6\f\r\u0002\u0002\u02b6\u02b7\t\u0006\u0002\u0002\u02b7\u02bf\u0005",
    "> \u000e\u02b8\u02b9\f\f\u0002\u0002\u02b9\u02ba\t\u0003\u0002\u0002",
    "\u02ba\u02bf\u0005> \r\u02bb\u02bc\f\t\u0002\u0002\u02bc\u02bd\t\u0007",
    "\u0002\u0002\u02bd\u02bf\u0005> \n\u02be\u02b2\u0003\u0002\u0002\u0002",
    "\u02be\u02b5\u0003\u0002\u0002\u0002\u02be\u02b8\u0003\u0002\u0002\u0002",
    "\u02be\u02bb\u0003\u0002\u0002\u0002\u02bf\u02c2\u0003\u0002\u0002\u0002",
    "\u02c0\u02be\u0003\u0002\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002",
    "\u02c1?\u0003\u0002\u0002\u0002\u02c2\u02c0\u0003\u0002\u0002\u0002",
    "\u02c3\u02c4\u0007E\u0002\u0002\u02c4A\u0003\u0002\u0002\u0002ZEKRW",
    "]fmsw\u007f\u0093\u009c\u009e\u00aa\u00ac\u00b0\u00b9\u00bb\u00c4\u00c6",
    "\u00ca\u00d0\u00d2\u00db\u00dd\u00e1\u00f1\u00f3\u0100\u0102\u0106\u011d",
    "\u011f\u012a\u012c\u0130\u0140\u0142\u0146\u014a\u014f\u0151\u0166\u0172",
    "\u0177\u0182\u0184\u0192\u0194\u019b\u01a9\u01b7\u01c0\u01c9\u01d2\u01db",
    "\u01e4\u01e7\u01ec\u01f2\u01f6\u01f9\u01ff\u0203\u0207\u0209\u0211\u0217",
    "\u021b\u021e\u0224\u0228\u022c\u022e\u0232\u023a\u0245\u0251\u025f\u0270",
    "\u0283\u028f\u0293\u02a2\u02a5\u02b0\u02be\u02c0"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'('", "')'", "';'", "':'", "'**'", "'^'", "'-'", 
                     "'+'", "'*'", null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     "'='", "'<'", "'>'", "','", "'/'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, "PROGRAM", "END", "DISCRETE", "INTERVAL", "SCHEDULE", 
                      "INITIAL", "TERMINAL", "CONSTANT", "DYNAMIC", "ALGORITHM", 
                      "MAXTERVAL", "MINTERVAL", "CINTERVAL", "NSTEPS", "DERIVATIVE", 
                      "AND", "EQ", "GE", "GT", "LE", "LT", "NE", "OR", "XOR", 
                      "AT", "IF", "THEN", "ELSE", "ENDIF", "ENDSPACEIF", 
                      "PROCEDURAL", "TRUE", "FALSE", "NOT", "TABLE", "PARAMETER", 
                      "DO", "CONTINUE", "GO", "TO", "CALL", "VARIABLE", 
                      "DIMENSION", "REAL", "DOUBLEPRECISION", "INTEGER", 
                      "LOGICAL", "CHARACTER", "STRING", "INT", "FLOAT", 
                      "ID", "EQUALS", "LESSTHAN", "GREATERTHAN", "COMMA", 
                      "SLASH", "COMMENT", "WS" ];

var ruleNames =  [ "acsl", "program", "statement", "discrete", "interval", 
                   "initial", "terminal", "constant", "schedule", "dynamic", 
                   "algorithm", "maxterval", "minterval", "cinterval", "nsteps", 
                   "derivative", "if_block", "else_if_end_block", "then_block", 
                   "if_logical", "table", "parameter", "do_continue", "go_to", 
                   "label", "call", "variable", "type", "procedural", "expr_or_assign", 
                   "expr", "comment" ];

function AcslParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    //return this;
}

AcslParser.prototype = Object.create(antlr4.Parser.prototype);
AcslParser.prototype.constructor = AcslParser;

Object.defineProperty(AcslParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

AcslParser.EOF = antlr4.Token.EOF;
AcslParser.T__0 = 1;
AcslParser.T__1 = 2;
AcslParser.T__2 = 3;
AcslParser.T__3 = 4;
AcslParser.T__4 = 5;
AcslParser.T__5 = 6;
AcslParser.T__6 = 7;
AcslParser.T__7 = 8;
AcslParser.T__8 = 9;
AcslParser.PROGRAM = 10;
AcslParser.END = 11;
AcslParser.DISCRETE = 12;
AcslParser.INTERVAL = 13;
AcslParser.SCHEDULE = 14;
AcslParser.INITIAL = 15;
AcslParser.TERMINAL = 16;
AcslParser.CONSTANT = 17;
AcslParser.DYNAMIC = 18;
AcslParser.ALGORITHM = 19;
AcslParser.MAXTERVAL = 20;
AcslParser.MINTERVAL = 21;
AcslParser.CINTERVAL = 22;
AcslParser.NSTEPS = 23;
AcslParser.DERIVATIVE = 24;
AcslParser.AND = 25;
AcslParser.EQ = 26;
AcslParser.GE = 27;
AcslParser.GT = 28;
AcslParser.LE = 29;
AcslParser.LT = 30;
AcslParser.NE = 31;
AcslParser.OR = 32;
AcslParser.XOR = 33;
AcslParser.AT = 34;
AcslParser.IF = 35;
AcslParser.THEN = 36;
AcslParser.ELSE = 37;
AcslParser.ENDIF = 38;
AcslParser.ENDSPACEIF = 39;
AcslParser.PROCEDURAL = 40;
AcslParser.TRUE = 41;
AcslParser.FALSE = 42;
AcslParser.NOT = 43;
AcslParser.TABLE = 44;
AcslParser.PARAMETER = 45;
AcslParser.DO = 46;
AcslParser.CONTINUE = 47;
AcslParser.GO = 48;
AcslParser.TO = 49;
AcslParser.CALL = 50;
AcslParser.VARIABLE = 51;
AcslParser.DIMENSION = 52;
AcslParser.REAL = 53;
AcslParser.DOUBLEPRECISION = 54;
AcslParser.INTEGER = 55;
AcslParser.LOGICAL = 56;
AcslParser.CHARACTER = 57;
AcslParser.STRING = 58;
AcslParser.INT = 59;
AcslParser.FLOAT = 60;
AcslParser.ID = 61;
AcslParser.EQUALS = 62;
AcslParser.LESSTHAN = 63;
AcslParser.GREATERTHAN = 64;
AcslParser.COMMA = 65;
AcslParser.SLASH = 66;
AcslParser.COMMENT = 67;
AcslParser.WS = 68;

AcslParser.RULE_acsl = 0;
AcslParser.RULE_program = 1;
AcslParser.RULE_statement = 2;
AcslParser.RULE_discrete = 3;
AcslParser.RULE_interval = 4;
AcslParser.RULE_initial = 5;
AcslParser.RULE_terminal = 6;
AcslParser.RULE_constant = 7;
AcslParser.RULE_schedule = 8;
AcslParser.RULE_dynamic = 9;
AcslParser.RULE_algorithm = 10;
AcslParser.RULE_maxterval = 11;
AcslParser.RULE_minterval = 12;
AcslParser.RULE_cinterval = 13;
AcslParser.RULE_nsteps = 14;
AcslParser.RULE_derivative = 15;
AcslParser.RULE_if_block = 16;
AcslParser.RULE_else_if_end_block = 17;
AcslParser.RULE_then_block = 18;
AcslParser.RULE_if_logical = 19;
AcslParser.RULE_table = 20;
AcslParser.RULE_parameter = 21;
AcslParser.RULE_do_continue = 22;
AcslParser.RULE_go_to = 23;
AcslParser.RULE_label = 24;
AcslParser.RULE_call = 25;
AcslParser.RULE_variable = 26;
AcslParser.RULE_type = 27;
AcslParser.RULE_procedural = 28;
AcslParser.RULE_expr_or_assign = 29;
AcslParser.RULE_expr = 30;
AcslParser.RULE_comment = 31;

function AcslContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_acsl;
    return this;
}

AcslContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AcslContext.prototype.constructor = AcslContext;


 
AcslContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ProgramWithCommentsContext(parser, ctx) {
	AcslContext.call(this, parser);
    AcslContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgramWithCommentsContext.prototype = Object.create(AcslContext.prototype);
ProgramWithCommentsContext.prototype.constructor = ProgramWithCommentsContext;

AcslParser.ProgramWithCommentsContext = ProgramWithCommentsContext;

ProgramWithCommentsContext.prototype.PROGRAM = function() {
    return this.getToken(AcslParser.PROGRAM, 0);
};

ProgramWithCommentsContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

ProgramWithCommentsContext.prototype.program = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgramContext);
    } else {
        return this.getTypedRuleContext(ProgramContext,i);
    }
};

ProgramWithCommentsContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};
ProgramWithCommentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterProgramWithComments(this);
	}
};

ProgramWithCommentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitProgramWithComments(this);
	}
};

ProgramWithCommentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitProgramWithComments(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ProgramWithoutCommentsContext(parser, ctx) {
	AcslContext.call(this, parser);
    AcslContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProgramWithoutCommentsContext.prototype = Object.create(AcslContext.prototype);
ProgramWithoutCommentsContext.prototype.constructor = ProgramWithoutCommentsContext;

AcslParser.ProgramWithoutCommentsContext = ProgramWithoutCommentsContext;

ProgramWithoutCommentsContext.prototype.PROGRAM = function() {
    return this.getToken(AcslParser.PROGRAM, 0);
};

ProgramWithoutCommentsContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

ProgramWithoutCommentsContext.prototype.program = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgramContext);
    } else {
        return this.getTypedRuleContext(ProgramContext,i);
    }
};
ProgramWithoutCommentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterProgramWithoutComments(this);
	}
};

ProgramWithoutCommentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitProgramWithoutComments(this);
	}
};

ProgramWithoutCommentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitProgramWithoutComments(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HeadedProgramWithCommentsContext(parser, ctx) {
	AcslContext.call(this, parser);
    AcslContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HeadedProgramWithCommentsContext.prototype = Object.create(AcslContext.prototype);
HeadedProgramWithCommentsContext.prototype.constructor = HeadedProgramWithCommentsContext;

AcslParser.HeadedProgramWithCommentsContext = HeadedProgramWithCommentsContext;

HeadedProgramWithCommentsContext.prototype.PROGRAM = function() {
    return this.getToken(AcslParser.PROGRAM, 0);
};

HeadedProgramWithCommentsContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

HeadedProgramWithCommentsContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

HeadedProgramWithCommentsContext.prototype.program = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgramContext);
    } else {
        return this.getTypedRuleContext(ProgramContext,i);
    }
};
HeadedProgramWithCommentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterHeadedProgramWithComments(this);
	}
};

HeadedProgramWithCommentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitHeadedProgramWithComments(this);
	}
};

HeadedProgramWithCommentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitHeadedProgramWithComments(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HeadedProgramWithoutCommentsContext(parser, ctx) {
	AcslContext.call(this, parser);
    AcslContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HeadedProgramWithoutCommentsContext.prototype = Object.create(AcslContext.prototype);
HeadedProgramWithoutCommentsContext.prototype.constructor = HeadedProgramWithoutCommentsContext;

AcslParser.HeadedProgramWithoutCommentsContext = HeadedProgramWithoutCommentsContext;

HeadedProgramWithoutCommentsContext.prototype.PROGRAM = function() {
    return this.getToken(AcslParser.PROGRAM, 0);
};

HeadedProgramWithoutCommentsContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

HeadedProgramWithoutCommentsContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

HeadedProgramWithoutCommentsContext.prototype.program = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgramContext);
    } else {
        return this.getTypedRuleContext(ProgramContext,i);
    }
};
HeadedProgramWithoutCommentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterHeadedProgramWithoutComments(this);
	}
};

HeadedProgramWithoutCommentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitHeadedProgramWithoutComments(this);
	}
};

HeadedProgramWithoutCommentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitHeadedProgramWithoutComments(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.AcslContext = AcslContext;

AcslParser.prototype.acsl = function() {

    var localctx = new AcslContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, AcslParser.RULE_acsl);
    var _la = 0; // Token type
    try {
        this.state = 117;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            localctx = new HeadedProgramWithCommentsContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 65; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 64;
                this.comment();
                this.state = 67; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===AcslParser.COMMENT);
            this.state = 69;
            this.match(AcslParser.PROGRAM);
            this.state = 73;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.DISCRETE) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.INITIAL) | (1 << AcslParser.TERMINAL) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.DYNAMIC) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 70;
                this.program();
                this.state = 75;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 76;
            this.match(AcslParser.END);
            this.state = 78; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 77;
                this.comment();
                this.state = 80; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===AcslParser.COMMENT);
            break;

        case 2:
            localctx = new HeadedProgramWithoutCommentsContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 83; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 82;
                this.comment();
                this.state = 85; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===AcslParser.COMMENT);
            this.state = 87;
            this.match(AcslParser.PROGRAM);
            this.state = 91;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.DISCRETE) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.INITIAL) | (1 << AcslParser.TERMINAL) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.DYNAMIC) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 88;
                this.program();
                this.state = 93;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 94;
            this.match(AcslParser.END);
            break;

        case 3:
            localctx = new ProgramWithCommentsContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 96;
            this.match(AcslParser.PROGRAM);
            this.state = 100;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.DISCRETE) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.INITIAL) | (1 << AcslParser.TERMINAL) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.DYNAMIC) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 97;
                this.program();
                this.state = 102;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 103;
            this.match(AcslParser.END);
            this.state = 105; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 104;
                this.comment();
                this.state = 107; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===AcslParser.COMMENT);
            break;

        case 4:
            localctx = new ProgramWithoutCommentsContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 109;
            this.match(AcslParser.PROGRAM);
            this.state = 113;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.DISCRETE) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.INITIAL) | (1 << AcslParser.TERMINAL) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.DYNAMIC) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 110;
                this.program();
                this.state = 115;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 116;
            this.match(AcslParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_program;
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.initial = function() {
    return this.getTypedRuleContext(InitialContext,0);
};

ProgramContext.prototype.dynamic = function() {
    return this.getTypedRuleContext(DynamicContext,0);
};

ProgramContext.prototype.discrete = function() {
    return this.getTypedRuleContext(DiscreteContext,0);
};

ProgramContext.prototype.terminal = function() {
    return this.getTypedRuleContext(TerminalContext,0);
};

ProgramContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ProgramContext.prototype.comment = function() {
    return this.getTypedRuleContext(CommentContext,0);
};

ProgramContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterProgram(this);
	}
};

ProgramContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitProgram(this);
	}
};

ProgramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitProgram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.ProgramContext = ProgramContext;

AcslParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, AcslParser.RULE_program);
    try {
        this.state = 125;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case AcslParser.INITIAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 119;
            this.initial();
            break;
        case AcslParser.DYNAMIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 120;
            this.dynamic();
            break;
        case AcslParser.DISCRETE:
            this.enterOuterAlt(localctx, 3);
            this.state = 121;
            this.discrete();
            break;
        case AcslParser.TERMINAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 122;
            this.terminal();
            break;
        case AcslParser.T__0:
        case AcslParser.T__6:
        case AcslParser.T__7:
        case AcslParser.INTERVAL:
        case AcslParser.SCHEDULE:
        case AcslParser.CONSTANT:
        case AcslParser.ALGORITHM:
        case AcslParser.MAXTERVAL:
        case AcslParser.MINTERVAL:
        case AcslParser.CINTERVAL:
        case AcslParser.NSTEPS:
        case AcslParser.IF:
        case AcslParser.TRUE:
        case AcslParser.FALSE:
        case AcslParser.NOT:
        case AcslParser.TABLE:
        case AcslParser.PARAMETER:
        case AcslParser.DO:
        case AcslParser.GO:
        case AcslParser.CALL:
        case AcslParser.VARIABLE:
        case AcslParser.DIMENSION:
        case AcslParser.REAL:
        case AcslParser.DOUBLEPRECISION:
        case AcslParser.INTEGER:
        case AcslParser.LOGICAL:
        case AcslParser.CHARACTER:
        case AcslParser.STRING:
        case AcslParser.INT:
        case AcslParser.FLOAT:
        case AcslParser.ID:
            this.enterOuterAlt(localctx, 5);
            this.state = 123;
            this.statement();
            break;
        case AcslParser.COMMENT:
            this.enterOuterAlt(localctx, 6);
            this.state = 124;
            this.comment();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

StatementContext.prototype.schedule = function() {
    return this.getTypedRuleContext(ScheduleContext,0);
};

StatementContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};

StatementContext.prototype.algorithm = function() {
    return this.getTypedRuleContext(AlgorithmContext,0);
};

StatementContext.prototype.maxterval = function() {
    return this.getTypedRuleContext(MaxtervalContext,0);
};

StatementContext.prototype.minterval = function() {
    return this.getTypedRuleContext(MintervalContext,0);
};

StatementContext.prototype.cinterval = function() {
    return this.getTypedRuleContext(CintervalContext,0);
};

StatementContext.prototype.nsteps = function() {
    return this.getTypedRuleContext(NstepsContext,0);
};

StatementContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

StatementContext.prototype.if_block = function() {
    return this.getTypedRuleContext(If_blockContext,0);
};

StatementContext.prototype.if_logical = function() {
    return this.getTypedRuleContext(If_logicalContext,0);
};

StatementContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

StatementContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

StatementContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

StatementContext.prototype.do_continue = function() {
    return this.getTypedRuleContext(Do_continueContext,0);
};

StatementContext.prototype.go_to = function() {
    return this.getTypedRuleContext(Go_toContext,0);
};

StatementContext.prototype.call = function() {
    return this.getTypedRuleContext(CallContext,0);
};

StatementContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.StatementContext = StatementContext;

AcslParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, AcslParser.RULE_statement);
    try {
        this.state = 145;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 127;
            this.constant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 128;
            this.schedule();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 129;
            this.interval();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 130;
            this.algorithm();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 131;
            this.maxterval();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 132;
            this.minterval();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 133;
            this.cinterval();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 134;
            this.nsteps();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 135;
            this.expr_or_assign();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 136;
            this.if_block();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 137;
            this.if_logical();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 138;
            this.table();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 139;
            this.type();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 140;
            this.parameter();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 141;
            this.do_continue();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 142;
            this.go_to();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 143;
            this.call();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 144;
            this.variable();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DiscreteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_discrete;
    return this;
}

DiscreteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DiscreteContext.prototype.constructor = DiscreteContext;


 
DiscreteContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DiscreteWithoutCommmentContext(parser, ctx) {
	DiscreteContext.call(this, parser);
    DiscreteContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DiscreteWithoutCommmentContext.prototype = Object.create(DiscreteContext.prototype);
DiscreteWithoutCommmentContext.prototype.constructor = DiscreteWithoutCommmentContext;

AcslParser.DiscreteWithoutCommmentContext = DiscreteWithoutCommmentContext;

DiscreteWithoutCommmentContext.prototype.DISCRETE = function() {
    return this.getToken(AcslParser.DISCRETE, 0);
};

DiscreteWithoutCommmentContext.prototype.ID = function() {
    return this.getToken(AcslParser.ID, 0);
};

DiscreteWithoutCommmentContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

DiscreteWithoutCommmentContext.prototype.initial = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitialContext);
    } else {
        return this.getTypedRuleContext(InitialContext,i);
    }
};

DiscreteWithoutCommmentContext.prototype.procedural = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProceduralContext);
    } else {
        return this.getTypedRuleContext(ProceduralContext,i);
    }
};

DiscreteWithoutCommmentContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

DiscreteWithoutCommmentContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};

DiscreteWithoutCommmentContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};
DiscreteWithoutCommmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterDiscreteWithoutCommment(this);
	}
};

DiscreteWithoutCommmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitDiscreteWithoutCommment(this);
	}
};

DiscreteWithoutCommmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitDiscreteWithoutCommment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DiscreteWithCommentContext(parser, ctx) {
	DiscreteContext.call(this, parser);
    DiscreteContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DiscreteWithCommentContext.prototype = Object.create(DiscreteContext.prototype);
DiscreteWithCommentContext.prototype.constructor = DiscreteWithCommentContext;

AcslParser.DiscreteWithCommentContext = DiscreteWithCommentContext;

DiscreteWithCommentContext.prototype.DISCRETE = function() {
    return this.getToken(AcslParser.DISCRETE, 0);
};

DiscreteWithCommentContext.prototype.ID = function() {
    return this.getToken(AcslParser.ID, 0);
};

DiscreteWithCommentContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

DiscreteWithCommentContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

DiscreteWithCommentContext.prototype.initial = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitialContext);
    } else {
        return this.getTypedRuleContext(InitialContext,i);
    }
};

DiscreteWithCommentContext.prototype.procedural = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProceduralContext);
    } else {
        return this.getTypedRuleContext(ProceduralContext,i);
    }
};

DiscreteWithCommentContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

DiscreteWithCommentContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};
DiscreteWithCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterDiscreteWithComment(this);
	}
};

DiscreteWithCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitDiscreteWithComment(this);
	}
};

DiscreteWithCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitDiscreteWithComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.DiscreteContext = DiscreteContext;

AcslParser.prototype.discrete = function() {

    var localctx = new DiscreteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, AcslParser.RULE_discrete);
    var _la = 0; // Token type
    try {
        this.state = 174;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DiscreteWithCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 147;
            this.match(AcslParser.DISCRETE);
            this.state = 148;
            this.match(AcslParser.ID);
            this.state = 156;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.INITIAL) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.PROCEDURAL - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 154;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 149;
                    this.initial();
                    break;

                case 2:
                    this.state = 150;
                    this.procedural();
                    break;

                case 3:
                    this.state = 151;
                    this.statement();
                    break;

                case 4:
                    this.state = 152;
                    this.label();
                    break;

                case 5:
                    this.state = 153;
                    this.comment();
                    break;

                }
                this.state = 158;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 159;
            this.match(AcslParser.END);
            this.state = 160;
            this.comment();
            break;

        case 2:
            localctx = new DiscreteWithoutCommmentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 161;
            this.match(AcslParser.DISCRETE);
            this.state = 162;
            this.match(AcslParser.ID);
            this.state = 170;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.INITIAL) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.PROCEDURAL - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 168;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 163;
                    this.initial();
                    break;

                case 2:
                    this.state = 164;
                    this.procedural();
                    break;

                case 3:
                    this.state = 165;
                    this.statement();
                    break;

                case 4:
                    this.state = 166;
                    this.label();
                    break;

                case 5:
                    this.state = 167;
                    this.comment();
                    break;

                }
                this.state = 172;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 173;
            this.match(AcslParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_interval;
    return this;
}

IntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalContext.prototype.constructor = IntervalContext;

IntervalContext.prototype.INTERVAL = function() {
    return this.getToken(AcslParser.INTERVAL, 0);
};

IntervalContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

IntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterInterval(this);
	}
};

IntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitInterval(this);
	}
};

IntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.IntervalContext = IntervalContext;

AcslParser.prototype.interval = function() {

    var localctx = new IntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, AcslParser.RULE_interval);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 176;
        this.match(AcslParser.INTERVAL);
        this.state = 177;
        this.expr_or_assign();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitialContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_initial;
    return this;
}

InitialContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitialContext.prototype.constructor = InitialContext;


 
InitialContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function InitialWithoutCommentContext(parser, ctx) {
	InitialContext.call(this, parser);
    InitialContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InitialWithoutCommentContext.prototype = Object.create(InitialContext.prototype);
InitialWithoutCommentContext.prototype.constructor = InitialWithoutCommentContext;

AcslParser.InitialWithoutCommentContext = InitialWithoutCommentContext;

InitialWithoutCommentContext.prototype.INITIAL = function() {
    return this.getToken(AcslParser.INITIAL, 0);
};

InitialWithoutCommentContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

InitialWithoutCommentContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

InitialWithoutCommentContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};

InitialWithoutCommentContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};
InitialWithoutCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterInitialWithoutComment(this);
	}
};

InitialWithoutCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitInitialWithoutComment(this);
	}
};

InitialWithoutCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitInitialWithoutComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InitialWithCommentContext(parser, ctx) {
	InitialContext.call(this, parser);
    InitialContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InitialWithCommentContext.prototype = Object.create(InitialContext.prototype);
InitialWithCommentContext.prototype.constructor = InitialWithCommentContext;

AcslParser.InitialWithCommentContext = InitialWithCommentContext;

InitialWithCommentContext.prototype.INITIAL = function() {
    return this.getToken(AcslParser.INITIAL, 0);
};

InitialWithCommentContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

InitialWithCommentContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

InitialWithCommentContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

InitialWithCommentContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};
InitialWithCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterInitialWithComment(this);
	}
};

InitialWithCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitInitialWithComment(this);
	}
};

InitialWithCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitInitialWithComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.InitialContext = InitialContext;

AcslParser.prototype.initial = function() {

    var localctx = new InitialContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, AcslParser.RULE_initial);
    var _la = 0; // Token type
    try {
        this.state = 200;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        switch(la_) {
        case 1:
            localctx = new InitialWithCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 179;
            this.match(AcslParser.INITIAL);
            this.state = 185;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 183;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 180;
                    this.statement();
                    break;

                case 2:
                    this.state = 181;
                    this.label();
                    break;

                case 3:
                    this.state = 182;
                    this.comment();
                    break;

                }
                this.state = 187;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 188;
            this.match(AcslParser.END);
            this.state = 189;
            this.comment();
            break;

        case 2:
            localctx = new InitialWithoutCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 190;
            this.match(AcslParser.INITIAL);
            this.state = 196;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 194;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 191;
                    this.statement();
                    break;

                case 2:
                    this.state = 192;
                    this.label();
                    break;

                case 3:
                    this.state = 193;
                    this.comment();
                    break;

                }
                this.state = 198;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 199;
            this.match(AcslParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TerminalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_terminal;
    return this;
}

TerminalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TerminalContext.prototype.constructor = TerminalContext;


 
TerminalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TerminalWithCommentContext(parser, ctx) {
	TerminalContext.call(this, parser);
    TerminalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TerminalWithCommentContext.prototype = Object.create(TerminalContext.prototype);
TerminalWithCommentContext.prototype.constructor = TerminalWithCommentContext;

AcslParser.TerminalWithCommentContext = TerminalWithCommentContext;

TerminalWithCommentContext.prototype.TERMINAL = function() {
    return this.getToken(AcslParser.TERMINAL, 0);
};

TerminalWithCommentContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

TerminalWithCommentContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

TerminalWithCommentContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

TerminalWithCommentContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};
TerminalWithCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterTerminalWithComment(this);
	}
};

TerminalWithCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitTerminalWithComment(this);
	}
};

TerminalWithCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitTerminalWithComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TerminalWithoutCommentContext(parser, ctx) {
	TerminalContext.call(this, parser);
    TerminalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TerminalWithoutCommentContext.prototype = Object.create(TerminalContext.prototype);
TerminalWithoutCommentContext.prototype.constructor = TerminalWithoutCommentContext;

AcslParser.TerminalWithoutCommentContext = TerminalWithoutCommentContext;

TerminalWithoutCommentContext.prototype.TERMINAL = function() {
    return this.getToken(AcslParser.TERMINAL, 0);
};

TerminalWithoutCommentContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

TerminalWithoutCommentContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

TerminalWithoutCommentContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};

TerminalWithoutCommentContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};
TerminalWithoutCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterTerminalWithoutComment(this);
	}
};

TerminalWithoutCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitTerminalWithoutComment(this);
	}
};

TerminalWithoutCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitTerminalWithoutComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.TerminalContext = TerminalContext;

AcslParser.prototype.terminal = function() {

    var localctx = new TerminalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, AcslParser.RULE_terminal);
    var _la = 0; // Token type
    try {
        this.state = 223;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TerminalWithCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 202;
            this.match(AcslParser.TERMINAL);
            this.state = 208;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 206;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 203;
                    this.statement();
                    break;

                case 2:
                    this.state = 204;
                    this.label();
                    break;

                case 3:
                    this.state = 205;
                    this.comment();
                    break;

                }
                this.state = 210;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 211;
            this.match(AcslParser.END);
            this.state = 212;
            this.comment();
            break;

        case 2:
            localctx = new TerminalWithoutCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 213;
            this.match(AcslParser.TERMINAL);
            this.state = 219;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 217;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 214;
                    this.statement();
                    break;

                case 2:
                    this.state = 215;
                    this.label();
                    break;

                case 3:
                    this.state = 216;
                    this.comment();
                    break;

                }
                this.state = 221;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 222;
            this.match(AcslParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.CONSTANT = function() {
    return this.getToken(AcslParser.CONSTANT, 0);
};

ConstantContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitConstant(this);
	}
};

ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.ConstantContext = ConstantContext;

AcslParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, AcslParser.RULE_constant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 225;
        this.match(AcslParser.CONSTANT);
        this.state = 226;
        this.expr_or_assign();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ScheduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_schedule;
    return this;
}

ScheduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScheduleContext.prototype.constructor = ScheduleContext;

ScheduleContext.prototype.SCHEDULE = function() {
    return this.getToken(AcslParser.SCHEDULE, 0);
};

ScheduleContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ScheduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterSchedule(this);
	}
};

ScheduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitSchedule(this);
	}
};

ScheduleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitSchedule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.ScheduleContext = ScheduleContext;

AcslParser.prototype.schedule = function() {

    var localctx = new ScheduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, AcslParser.RULE_schedule);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 228;
        this.match(AcslParser.SCHEDULE);
        this.state = 229;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DynamicContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_dynamic;
    return this;
}

DynamicContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DynamicContext.prototype.constructor = DynamicContext;


 
DynamicContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DynamicWithCommentContext(parser, ctx) {
	DynamicContext.call(this, parser);
    DynamicContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DynamicWithCommentContext.prototype = Object.create(DynamicContext.prototype);
DynamicWithCommentContext.prototype.constructor = DynamicWithCommentContext;

AcslParser.DynamicWithCommentContext = DynamicWithCommentContext;

DynamicWithCommentContext.prototype.DYNAMIC = function() {
    return this.getToken(AcslParser.DYNAMIC, 0);
};

DynamicWithCommentContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

DynamicWithCommentContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

DynamicWithCommentContext.prototype.initial = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitialContext);
    } else {
        return this.getTypedRuleContext(InitialContext,i);
    }
};

DynamicWithCommentContext.prototype.derivative = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DerivativeContext);
    } else {
        return this.getTypedRuleContext(DerivativeContext,i);
    }
};

DynamicWithCommentContext.prototype.discrete = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DiscreteContext);
    } else {
        return this.getTypedRuleContext(DiscreteContext,i);
    }
};

DynamicWithCommentContext.prototype.procedural = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProceduralContext);
    } else {
        return this.getTypedRuleContext(ProceduralContext,i);
    }
};

DynamicWithCommentContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

DynamicWithCommentContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};
DynamicWithCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterDynamicWithComment(this);
	}
};

DynamicWithCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitDynamicWithComment(this);
	}
};

DynamicWithCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitDynamicWithComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DynamicWithoutCommentContext(parser, ctx) {
	DynamicContext.call(this, parser);
    DynamicContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DynamicWithoutCommentContext.prototype = Object.create(DynamicContext.prototype);
DynamicWithoutCommentContext.prototype.constructor = DynamicWithoutCommentContext;

AcslParser.DynamicWithoutCommentContext = DynamicWithoutCommentContext;

DynamicWithoutCommentContext.prototype.DYNAMIC = function() {
    return this.getToken(AcslParser.DYNAMIC, 0);
};

DynamicWithoutCommentContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

DynamicWithoutCommentContext.prototype.initial = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitialContext);
    } else {
        return this.getTypedRuleContext(InitialContext,i);
    }
};

DynamicWithoutCommentContext.prototype.derivative = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DerivativeContext);
    } else {
        return this.getTypedRuleContext(DerivativeContext,i);
    }
};

DynamicWithoutCommentContext.prototype.discrete = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DiscreteContext);
    } else {
        return this.getTypedRuleContext(DiscreteContext,i);
    }
};

DynamicWithoutCommentContext.prototype.procedural = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProceduralContext);
    } else {
        return this.getTypedRuleContext(ProceduralContext,i);
    }
};

DynamicWithoutCommentContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

DynamicWithoutCommentContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};

DynamicWithoutCommentContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};
DynamicWithoutCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterDynamicWithoutComment(this);
	}
};

DynamicWithoutCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitDynamicWithoutComment(this);
	}
};

DynamicWithoutCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitDynamicWithoutComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.DynamicContext = DynamicContext;

AcslParser.prototype.dynamic = function() {

    var localctx = new DynamicContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, AcslParser.RULE_dynamic);
    var _la = 0; // Token type
    try {
        this.state = 260;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DynamicWithCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 231;
            this.match(AcslParser.DYNAMIC);
            this.state = 241;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.DISCRETE) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.INITIAL) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS) | (1 << AcslParser.DERIVATIVE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.PROCEDURAL - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 239;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 232;
                    this.initial();
                    break;

                case 2:
                    this.state = 233;
                    this.derivative();
                    break;

                case 3:
                    this.state = 234;
                    this.discrete();
                    break;

                case 4:
                    this.state = 235;
                    this.procedural();
                    break;

                case 5:
                    this.state = 236;
                    this.statement();
                    break;

                case 6:
                    this.state = 237;
                    this.label();
                    break;

                case 7:
                    this.state = 238;
                    this.comment();
                    break;

                }
                this.state = 243;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 244;
            this.match(AcslParser.END);
            this.state = 245;
            this.comment();
            break;

        case 2:
            localctx = new DynamicWithoutCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 246;
            this.match(AcslParser.DYNAMIC);
            this.state = 256;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.DISCRETE) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.INITIAL) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS) | (1 << AcslParser.DERIVATIVE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.PROCEDURAL - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 254;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 247;
                    this.initial();
                    break;

                case 2:
                    this.state = 248;
                    this.derivative();
                    break;

                case 3:
                    this.state = 249;
                    this.discrete();
                    break;

                case 4:
                    this.state = 250;
                    this.procedural();
                    break;

                case 5:
                    this.state = 251;
                    this.statement();
                    break;

                case 6:
                    this.state = 252;
                    this.label();
                    break;

                case 7:
                    this.state = 253;
                    this.comment();
                    break;

                }
                this.state = 258;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 259;
            this.match(AcslParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlgorithmContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_algorithm;
    return this;
}

AlgorithmContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlgorithmContext.prototype.constructor = AlgorithmContext;

AlgorithmContext.prototype.ALGORITHM = function() {
    return this.getToken(AcslParser.ALGORITHM, 0);
};

AlgorithmContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

AlgorithmContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterAlgorithm(this);
	}
};

AlgorithmContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitAlgorithm(this);
	}
};

AlgorithmContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitAlgorithm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.AlgorithmContext = AlgorithmContext;

AcslParser.prototype.algorithm = function() {

    var localctx = new AlgorithmContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, AcslParser.RULE_algorithm);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 262;
        this.match(AcslParser.ALGORITHM);
        this.state = 263;
        this.expr_or_assign();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaxtervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_maxterval;
    return this;
}

MaxtervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaxtervalContext.prototype.constructor = MaxtervalContext;

MaxtervalContext.prototype.MAXTERVAL = function() {
    return this.getToken(AcslParser.MAXTERVAL, 0);
};

MaxtervalContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

MaxtervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterMaxterval(this);
	}
};

MaxtervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitMaxterval(this);
	}
};

MaxtervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitMaxterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.MaxtervalContext = MaxtervalContext;

AcslParser.prototype.maxterval = function() {

    var localctx = new MaxtervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, AcslParser.RULE_maxterval);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 265;
        this.match(AcslParser.MAXTERVAL);
        this.state = 266;
        this.expr_or_assign();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MintervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_minterval;
    return this;
}

MintervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MintervalContext.prototype.constructor = MintervalContext;

MintervalContext.prototype.MINTERVAL = function() {
    return this.getToken(AcslParser.MINTERVAL, 0);
};

MintervalContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

MintervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterMinterval(this);
	}
};

MintervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitMinterval(this);
	}
};

MintervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitMinterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.MintervalContext = MintervalContext;

AcslParser.prototype.minterval = function() {

    var localctx = new MintervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, AcslParser.RULE_minterval);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 268;
        this.match(AcslParser.MINTERVAL);
        this.state = 269;
        this.expr_or_assign();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CintervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_cinterval;
    return this;
}

CintervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CintervalContext.prototype.constructor = CintervalContext;

CintervalContext.prototype.CINTERVAL = function() {
    return this.getToken(AcslParser.CINTERVAL, 0);
};

CintervalContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

CintervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterCinterval(this);
	}
};

CintervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitCinterval(this);
	}
};

CintervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitCinterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.CintervalContext = CintervalContext;

AcslParser.prototype.cinterval = function() {

    var localctx = new CintervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, AcslParser.RULE_cinterval);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 271;
        this.match(AcslParser.CINTERVAL);
        this.state = 272;
        this.expr_or_assign();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NstepsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_nsteps;
    return this;
}

NstepsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NstepsContext.prototype.constructor = NstepsContext;

NstepsContext.prototype.NSTEPS = function() {
    return this.getToken(AcslParser.NSTEPS, 0);
};

NstepsContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

NstepsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterNsteps(this);
	}
};

NstepsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitNsteps(this);
	}
};

NstepsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitNsteps(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.NstepsContext = NstepsContext;

AcslParser.prototype.nsteps = function() {

    var localctx = new NstepsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, AcslParser.RULE_nsteps);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 274;
        this.match(AcslParser.NSTEPS);
        this.state = 275;
        this.expr_or_assign();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DerivativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_derivative;
    return this;
}

DerivativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DerivativeContext.prototype.constructor = DerivativeContext;


 
DerivativeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DerivativeWithCommentContext(parser, ctx) {
	DerivativeContext.call(this, parser);
    DerivativeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DerivativeWithCommentContext.prototype = Object.create(DerivativeContext.prototype);
DerivativeWithCommentContext.prototype.constructor = DerivativeWithCommentContext;

AcslParser.DerivativeWithCommentContext = DerivativeWithCommentContext;

DerivativeWithCommentContext.prototype.DERIVATIVE = function() {
    return this.getToken(AcslParser.DERIVATIVE, 0);
};

DerivativeWithCommentContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

DerivativeWithCommentContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

DerivativeWithCommentContext.prototype.initial = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitialContext);
    } else {
        return this.getTypedRuleContext(InitialContext,i);
    }
};

DerivativeWithCommentContext.prototype.procedural = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProceduralContext);
    } else {
        return this.getTypedRuleContext(ProceduralContext,i);
    }
};

DerivativeWithCommentContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

DerivativeWithCommentContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};
DerivativeWithCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterDerivativeWithComment(this);
	}
};

DerivativeWithCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitDerivativeWithComment(this);
	}
};

DerivativeWithCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitDerivativeWithComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DerivativeWithoutCommentContext(parser, ctx) {
	DerivativeContext.call(this, parser);
    DerivativeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DerivativeWithoutCommentContext.prototype = Object.create(DerivativeContext.prototype);
DerivativeWithoutCommentContext.prototype.constructor = DerivativeWithoutCommentContext;

AcslParser.DerivativeWithoutCommentContext = DerivativeWithoutCommentContext;

DerivativeWithoutCommentContext.prototype.DERIVATIVE = function() {
    return this.getToken(AcslParser.DERIVATIVE, 0);
};

DerivativeWithoutCommentContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

DerivativeWithoutCommentContext.prototype.initial = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitialContext);
    } else {
        return this.getTypedRuleContext(InitialContext,i);
    }
};

DerivativeWithoutCommentContext.prototype.procedural = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProceduralContext);
    } else {
        return this.getTypedRuleContext(ProceduralContext,i);
    }
};

DerivativeWithoutCommentContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

DerivativeWithoutCommentContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};

DerivativeWithoutCommentContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};
DerivativeWithoutCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterDerivativeWithoutComment(this);
	}
};

DerivativeWithoutCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitDerivativeWithoutComment(this);
	}
};

DerivativeWithoutCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitDerivativeWithoutComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.DerivativeContext = DerivativeContext;

AcslParser.prototype.derivative = function() {

    var localctx = new DerivativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, AcslParser.RULE_derivative);
    var _la = 0; // Token type
    try {
        this.state = 302;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DerivativeWithCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 277;
            this.match(AcslParser.DERIVATIVE);
            this.state = 285;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.INITIAL) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.PROCEDURAL - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 283;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 278;
                    this.initial();
                    break;

                case 2:
                    this.state = 279;
                    this.procedural();
                    break;

                case 3:
                    this.state = 280;
                    this.statement();
                    break;

                case 4:
                    this.state = 281;
                    this.label();
                    break;

                case 5:
                    this.state = 282;
                    this.comment();
                    break;

                }
                this.state = 287;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 288;
            this.match(AcslParser.END);
            this.state = 289;
            this.comment();
            break;

        case 2:
            localctx = new DerivativeWithoutCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 290;
            this.match(AcslParser.DERIVATIVE);
            this.state = 298;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.INITIAL) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.PROCEDURAL - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 296;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 291;
                    this.initial();
                    break;

                case 2:
                    this.state = 292;
                    this.procedural();
                    break;

                case 3:
                    this.state = 293;
                    this.statement();
                    break;

                case 4:
                    this.state = 294;
                    this.label();
                    break;

                case 5:
                    this.state = 295;
                    this.comment();
                    break;

                }
                this.state = 300;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 301;
            this.match(AcslParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_if_block;
    return this;
}

If_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_blockContext.prototype.constructor = If_blockContext;


 
If_blockContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IfBlockContext(parser, ctx) {
	If_blockContext.call(this, parser);
    If_blockContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfBlockContext.prototype = Object.create(If_blockContext.prototype);
IfBlockContext.prototype.constructor = IfBlockContext;

AcslParser.IfBlockContext = IfBlockContext;

IfBlockContext.prototype.IF = function() {
    return this.getToken(AcslParser.IF, 0);
};

IfBlockContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

IfBlockContext.prototype.then_block = function() {
    return this.getTypedRuleContext(Then_blockContext,0);
};

IfBlockContext.prototype.else_if_end_block = function() {
    return this.getTypedRuleContext(Else_if_end_blockContext,0);
};
IfBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterIfBlock(this);
	}
};

IfBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitIfBlock(this);
	}
};

IfBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitIfBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.If_blockContext = If_blockContext;

AcslParser.prototype.if_block = function() {

    var localctx = new If_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, AcslParser.RULE_if_block);
    try {
        localctx = new IfBlockContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 304;
        this.match(AcslParser.IF);
        this.state = 305;
        this.match(AcslParser.T__0);
        this.state = 306;
        this.expr(0);
        this.state = 307;
        this.match(AcslParser.T__1);
        this.state = 308;
        this.then_block();
        this.state = 309;
        this.else_if_end_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Else_if_end_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_else_if_end_block;
    return this;
}

Else_if_end_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_if_end_blockContext.prototype.constructor = Else_if_end_blockContext;


 
Else_if_end_blockContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ElseIfEndBlockEndContext(parser, ctx) {
	Else_if_end_blockContext.call(this, parser);
    Else_if_end_blockContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfEndBlockEndContext.prototype = Object.create(Else_if_end_blockContext.prototype);
ElseIfEndBlockEndContext.prototype.constructor = ElseIfEndBlockEndContext;

AcslParser.ElseIfEndBlockEndContext = ElseIfEndBlockEndContext;

ElseIfEndBlockEndContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

ElseIfEndBlockEndContext.prototype.ENDIF = function() {
    return this.getToken(AcslParser.ENDIF, 0);
};

ElseIfEndBlockEndContext.prototype.ENDSPACEIF = function() {
    return this.getToken(AcslParser.ENDSPACEIF, 0);
};
ElseIfEndBlockEndContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterElseIfEndBlockEnd(this);
	}
};

ElseIfEndBlockEndContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitElseIfEndBlockEnd(this);
	}
};

ElseIfEndBlockEndContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitElseIfEndBlockEnd(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ElseIfEndBlockElseIfContext(parser, ctx) {
	Else_if_end_blockContext.call(this, parser);
    Else_if_end_blockContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfEndBlockElseIfContext.prototype = Object.create(Else_if_end_blockContext.prototype);
ElseIfEndBlockElseIfContext.prototype.constructor = ElseIfEndBlockElseIfContext;

AcslParser.ElseIfEndBlockElseIfContext = ElseIfEndBlockElseIfContext;

ElseIfEndBlockElseIfContext.prototype.ELSE = function() {
    return this.getToken(AcslParser.ELSE, 0);
};

ElseIfEndBlockElseIfContext.prototype.if_block = function() {
    return this.getTypedRuleContext(If_blockContext,0);
};
ElseIfEndBlockElseIfContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterElseIfEndBlockElseIf(this);
	}
};

ElseIfEndBlockElseIfContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitElseIfEndBlockElseIf(this);
	}
};

ElseIfEndBlockElseIfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitElseIfEndBlockElseIf(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ElseIfEndBlockElseContext(parser, ctx) {
	Else_if_end_blockContext.call(this, parser);
    Else_if_end_blockContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfEndBlockElseContext.prototype = Object.create(Else_if_end_blockContext.prototype);
ElseIfEndBlockElseContext.prototype.constructor = ElseIfEndBlockElseContext;

AcslParser.ElseIfEndBlockElseContext = ElseIfEndBlockElseContext;

ElseIfEndBlockElseContext.prototype.ELSE = function() {
    return this.getToken(AcslParser.ELSE, 0);
};

ElseIfEndBlockElseContext.prototype.else_if_end_block = function() {
    return this.getTypedRuleContext(Else_if_end_blockContext,0);
};

ElseIfEndBlockElseContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

ElseIfEndBlockElseContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};

ElseIfEndBlockElseContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};
ElseIfEndBlockElseContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterElseIfEndBlockElse(this);
	}
};

ElseIfEndBlockElseContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitElseIfEndBlockElse(this);
	}
};

ElseIfEndBlockElseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitElseIfEndBlockElse(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.Else_if_end_blockContext = Else_if_end_blockContext;

AcslParser.prototype.else_if_end_block = function() {

    var localctx = new Else_if_end_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, AcslParser.RULE_else_if_end_block);
    var _la = 0; // Token type
    try {
        this.state = 324;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ElseIfEndBlockEndContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 311;
            _la = this._input.LA(1);
            if(!(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (AcslParser.END - 11)) | (1 << (AcslParser.ENDIF - 11)) | (1 << (AcslParser.ENDSPACEIF - 11)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            localctx = new ElseIfEndBlockElseIfContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 312;
            this.match(AcslParser.ELSE);
            this.state = 313;
            this.if_block();
            break;

        case 3:
            localctx = new ElseIfEndBlockElseContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 314;
            this.match(AcslParser.ELSE);
            this.state = 320;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 318;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 315;
                    this.statement();
                    break;

                case 2:
                    this.state = 316;
                    this.label();
                    break;

                case 3:
                    this.state = 317;
                    this.comment();
                    break;

                }
                this.state = 322;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 323;
            this.else_if_end_block();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Then_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_then_block;
    return this;
}

Then_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Then_blockContext.prototype.constructor = Then_blockContext;


 
Then_blockContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ThenBlockContext(parser, ctx) {
	Then_blockContext.call(this, parser);
    Then_blockContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThenBlockContext.prototype = Object.create(Then_blockContext.prototype);
ThenBlockContext.prototype.constructor = ThenBlockContext;

AcslParser.ThenBlockContext = ThenBlockContext;

ThenBlockContext.prototype.THEN = function() {
    return this.getToken(AcslParser.THEN, 0);
};

ThenBlockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

ThenBlockContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};

ThenBlockContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};
ThenBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterThenBlock(this);
	}
};

ThenBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitThenBlock(this);
	}
};

ThenBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitThenBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.Then_blockContext = Then_blockContext;

AcslParser.prototype.then_block = function() {

    var localctx = new Then_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, AcslParser.RULE_then_block);
    var _la = 0; // Token type
    try {
        localctx = new ThenBlockContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this.match(AcslParser.THEN);
        this.state = 328;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===AcslParser.T__2) {
            this.state = 327;
            this.match(AcslParser.T__2);
        }

        this.state = 335;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
            this.state = 333;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
            switch(la_) {
            case 1:
                this.state = 330;
                this.statement();
                break;

            case 2:
                this.state = 331;
                this.label();
                break;

            case 3:
                this.state = 332;
                this.comment();
                break;

            }
            this.state = 337;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_logicalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_if_logical;
    return this;
}

If_logicalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_logicalContext.prototype.constructor = If_logicalContext;


 
If_logicalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IfLogicalContext(parser, ctx) {
	If_logicalContext.call(this, parser);
    If_logicalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfLogicalContext.prototype = Object.create(If_logicalContext.prototype);
IfLogicalContext.prototype.constructor = IfLogicalContext;

AcslParser.IfLogicalContext = IfLogicalContext;

IfLogicalContext.prototype.IF = function() {
    return this.getToken(AcslParser.IF, 0);
};

IfLogicalContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

IfLogicalContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};
IfLogicalContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterIfLogical(this);
	}
};

IfLogicalContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitIfLogical(this);
	}
};

IfLogicalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitIfLogical(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.If_logicalContext = If_logicalContext;

AcslParser.prototype.if_logical = function() {

    var localctx = new If_logicalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, AcslParser.RULE_if_logical);
    try {
        localctx = new IfLogicalContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 338;
        this.match(AcslParser.IF);
        this.state = 339;
        this.match(AcslParser.T__0);
        this.state = 340;
        this.expr(0);
        this.state = 341;
        this.match(AcslParser.T__1);
        this.state = 342;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_table;
    return this;
}

TableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableContext.prototype.constructor = TableContext;

TableContext.prototype.TABLE = function() {
    return this.getToken(AcslParser.TABLE, 0);
};

TableContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

TableContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};


TableContext.prototype.SLASH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.SLASH);
    } else {
        return this.getToken(AcslParser.SLASH, i);
    }
};


TableContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterTable(this);
	}
};

TableContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitTable(this);
	}
};

TableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.TableContext = TableContext;

AcslParser.prototype.table = function() {

    var localctx = new TableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, AcslParser.RULE_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 344;
        this.match(AcslParser.TABLE);
        this.state = 345;
        this.expr(0);
        this.state = 346;
        this.match(AcslParser.COMMA);
        this.state = 347;
        this.expr(0);
        this.state = 348;
        this.match(AcslParser.COMMA);
        this.state = 349;
        this.expr(0);
        this.state = 350;
        this.match(AcslParser.SLASH);
        this.state = 351;
        this.expr(0);
        this.state = 356;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AcslParser.COMMA) {
            this.state = 352;
            this.match(AcslParser.COMMA);
            this.state = 353;
            this.expr(0);
            this.state = 358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 359;
        this.match(AcslParser.SLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.PARAMETER = function() {
    return this.getToken(AcslParser.PARAMETER, 0);
};

ParameterContext.prototype.expr_or_assign = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_or_assignContext);
    } else {
        return this.getTypedRuleContext(Expr_or_assignContext,i);
    }
};

ParameterContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};


ParameterContext.prototype.comment = function() {
    return this.getTypedRuleContext(CommentContext,0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitParameter(this);
	}
};

ParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.ParameterContext = ParameterContext;

AcslParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, AcslParser.RULE_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 361;
        this.match(AcslParser.PARAMETER);
        this.state = 362;
        this.match(AcslParser.T__0);
        this.state = 363;
        this.expr_or_assign();
        this.state = 368;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AcslParser.COMMA) {
            this.state = 364;
            this.match(AcslParser.COMMA);
            this.state = 365;
            this.expr_or_assign();
            this.state = 370;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 371;
        this.match(AcslParser.T__1);
        this.state = 373;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        if(la_===1) {
            this.state = 372;
            this.comment();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Do_continueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_do_continue;
    return this;
}

Do_continueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Do_continueContext.prototype.constructor = Do_continueContext;


 
Do_continueContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DoContinueIncrContext(parser, ctx) {
	Do_continueContext.call(this, parser);
    Do_continueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoContinueIncrContext.prototype = Object.create(Do_continueContext.prototype);
DoContinueIncrContext.prototype.constructor = DoContinueIncrContext;

AcslParser.DoContinueIncrContext = DoContinueIncrContext;

DoContinueIncrContext.prototype.DO = function() {
    return this.getToken(AcslParser.DO, 0);
};

DoContinueIncrContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

DoContinueIncrContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

DoContinueIncrContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};


DoContinueIncrContext.prototype.CONTINUE = function() {
    return this.getToken(AcslParser.CONTINUE, 0);
};

DoContinueIncrContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

DoContinueIncrContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};
DoContinueIncrContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterDoContinueIncr(this);
	}
};

DoContinueIncrContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitDoContinueIncr(this);
	}
};

DoContinueIncrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitDoContinueIncr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DoContinueContext(parser, ctx) {
	Do_continueContext.call(this, parser);
    Do_continueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoContinueContext.prototype = Object.create(Do_continueContext.prototype);
DoContinueContext.prototype.constructor = DoContinueContext;

AcslParser.DoContinueContext = DoContinueContext;

DoContinueContext.prototype.DO = function() {
    return this.getToken(AcslParser.DO, 0);
};

DoContinueContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

DoContinueContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

DoContinueContext.prototype.COMMA = function() {
    return this.getToken(AcslParser.COMMA, 0);
};

DoContinueContext.prototype.CONTINUE = function() {
    return this.getToken(AcslParser.CONTINUE, 0);
};

DoContinueContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

DoContinueContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};
DoContinueContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterDoContinue(this);
	}
};

DoContinueContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitDoContinue(this);
	}
};

DoContinueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitDoContinue(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.Do_continueContext = Do_continueContext;

AcslParser.prototype.do_continue = function() {

    var localctx = new Do_continueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, AcslParser.RULE_do_continue);
    try {
        this.state = 409;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DoContinueIncrContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 375;
            this.match(AcslParser.DO);
            this.state = 376;
            this.expr(0);
            this.state = 377;
            this.expr_or_assign();
            this.state = 378;
            this.match(AcslParser.COMMA);
            this.state = 379;
            this.expr(0);
            this.state = 380;
            this.match(AcslParser.COMMA);
            this.state = 381;
            this.expr(0);
            this.state = 386;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 384;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case AcslParser.T__0:
                    case AcslParser.T__6:
                    case AcslParser.T__7:
                    case AcslParser.INTERVAL:
                    case AcslParser.SCHEDULE:
                    case AcslParser.CONSTANT:
                    case AcslParser.ALGORITHM:
                    case AcslParser.MAXTERVAL:
                    case AcslParser.MINTERVAL:
                    case AcslParser.CINTERVAL:
                    case AcslParser.NSTEPS:
                    case AcslParser.IF:
                    case AcslParser.TRUE:
                    case AcslParser.FALSE:
                    case AcslParser.NOT:
                    case AcslParser.TABLE:
                    case AcslParser.PARAMETER:
                    case AcslParser.DO:
                    case AcslParser.GO:
                    case AcslParser.CALL:
                    case AcslParser.VARIABLE:
                    case AcslParser.DIMENSION:
                    case AcslParser.REAL:
                    case AcslParser.DOUBLEPRECISION:
                    case AcslParser.INTEGER:
                    case AcslParser.LOGICAL:
                    case AcslParser.CHARACTER:
                    case AcslParser.STRING:
                    case AcslParser.INT:
                    case AcslParser.FLOAT:
                    case AcslParser.ID:
                        this.state = 382;
                        this.statement();
                        break;
                    case AcslParser.COMMENT:
                        this.state = 383;
                        this.comment();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 388;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
            }

            this.state = 389;
            this.expr(0);
            this.state = 390;
            this.match(AcslParser.T__3);
            this.state = 391;
            this.match(AcslParser.CONTINUE);
            break;

        case 2:
            localctx = new DoContinueContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 393;
            this.match(AcslParser.DO);
            this.state = 394;
            this.expr(0);
            this.state = 395;
            this.expr_or_assign();
            this.state = 396;
            this.match(AcslParser.COMMA);
            this.state = 397;
            this.expr(0);
            this.state = 402;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 400;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case AcslParser.T__0:
                    case AcslParser.T__6:
                    case AcslParser.T__7:
                    case AcslParser.INTERVAL:
                    case AcslParser.SCHEDULE:
                    case AcslParser.CONSTANT:
                    case AcslParser.ALGORITHM:
                    case AcslParser.MAXTERVAL:
                    case AcslParser.MINTERVAL:
                    case AcslParser.CINTERVAL:
                    case AcslParser.NSTEPS:
                    case AcslParser.IF:
                    case AcslParser.TRUE:
                    case AcslParser.FALSE:
                    case AcslParser.NOT:
                    case AcslParser.TABLE:
                    case AcslParser.PARAMETER:
                    case AcslParser.DO:
                    case AcslParser.GO:
                    case AcslParser.CALL:
                    case AcslParser.VARIABLE:
                    case AcslParser.DIMENSION:
                    case AcslParser.REAL:
                    case AcslParser.DOUBLEPRECISION:
                    case AcslParser.INTEGER:
                    case AcslParser.LOGICAL:
                    case AcslParser.CHARACTER:
                    case AcslParser.STRING:
                    case AcslParser.INT:
                    case AcslParser.FLOAT:
                    case AcslParser.ID:
                        this.state = 398;
                        this.statement();
                        break;
                    case AcslParser.COMMENT:
                        this.state = 399;
                        this.comment();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 404;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
            }

            this.state = 405;
            this.expr(0);
            this.state = 406;
            this.match(AcslParser.T__3);
            this.state = 407;
            this.match(AcslParser.CONTINUE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Go_toContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_go_to;
    return this;
}

Go_toContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Go_toContext.prototype.constructor = Go_toContext;


 
Go_toContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function GoToContext(parser, ctx) {
	Go_toContext.call(this, parser);
    Go_toContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GoToContext.prototype = Object.create(Go_toContext.prototype);
GoToContext.prototype.constructor = GoToContext;

AcslParser.GoToContext = GoToContext;

GoToContext.prototype.GO = function() {
    return this.getToken(AcslParser.GO, 0);
};

GoToContext.prototype.TO = function() {
    return this.getToken(AcslParser.TO, 0);
};

GoToContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
GoToContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterGoTo(this);
	}
};

GoToContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitGoTo(this);
	}
};

GoToContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitGoTo(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.Go_toContext = Go_toContext;

AcslParser.prototype.go_to = function() {

    var localctx = new Go_toContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, AcslParser.RULE_go_to);
    try {
        localctx = new GoToContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 411;
        this.match(AcslParser.GO);
        this.state = 412;
        this.match(AcslParser.TO);
        this.state = 413;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_label;
    return this;
}

LabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelContext.prototype.constructor = LabelContext;


 
LabelContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LabelStatementContext(parser, ctx) {
	LabelContext.call(this, parser);
    LabelContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LabelStatementContext.prototype = Object.create(LabelContext.prototype);
LabelStatementContext.prototype.constructor = LabelStatementContext;

AcslParser.LabelStatementContext = LabelStatementContext;

LabelStatementContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

LabelStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};
LabelStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterLabelStatement(this);
	}
};

LabelStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitLabelStatement(this);
	}
};

LabelStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitLabelStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LabelContinueContext(parser, ctx) {
	LabelContext.call(this, parser);
    LabelContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LabelContinueContext.prototype = Object.create(LabelContext.prototype);
LabelContinueContext.prototype.constructor = LabelContinueContext;

AcslParser.LabelContinueContext = LabelContinueContext;

LabelContinueContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

LabelContinueContext.prototype.CONTINUE = function() {
    return this.getToken(AcslParser.CONTINUE, 0);
};
LabelContinueContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterLabelContinue(this);
	}
};

LabelContinueContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitLabelContinue(this);
	}
};

LabelContinueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitLabelContinue(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.LabelContext = LabelContext;

AcslParser.prototype.label = function() {

    var localctx = new LabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, AcslParser.RULE_label);
    try {
        this.state = 423;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LabelStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 415;
            this.expr(0);
            this.state = 416;
            this.match(AcslParser.T__3);
            this.state = 417;
            this.statement();
            break;

        case 2:
            localctx = new LabelContinueContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 419;
            this.expr(0);
            this.state = 420;
            this.match(AcslParser.T__3);
            this.state = 421;
            this.match(AcslParser.CONTINUE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_call;
    return this;
}

CallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallContext.prototype.constructor = CallContext;

CallContext.prototype.CALL = function() {
    return this.getToken(AcslParser.CALL, 0);
};

CallContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

CallContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterCall(this);
	}
};

CallContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitCall(this);
	}
};

CallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.CallContext = CallContext;

AcslParser.prototype.call = function() {

    var localctx = new CallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, AcslParser.RULE_call);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 425;
        this.match(AcslParser.CALL);
        this.state = 426;
        this.expr_or_assign();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_variable;
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.VARIABLE = function() {
    return this.getToken(AcslParser.VARIABLE, 0);
};

VariableContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

VariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterVariable(this);
	}
};

VariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitVariable(this);
	}
};

VariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.VariableContext = VariableContext;

AcslParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, AcslParser.RULE_variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 428;
        this.match(AcslParser.VARIABLE);
        this.state = 429;
        this.expr_or_assign();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;


 
TypeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IntegerTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerTypeContext.prototype = Object.create(TypeContext.prototype);
IntegerTypeContext.prototype.constructor = IntegerTypeContext;

AcslParser.IntegerTypeContext = IntegerTypeContext;

IntegerTypeContext.prototype.INTEGER = function() {
    return this.getToken(AcslParser.INTEGER, 0);
};

IntegerTypeContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

IntegerTypeContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};

IntegerTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterIntegerType(this);
	}
};

IntegerTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitIntegerType(this);
	}
};

IntegerTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitIntegerType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DimensionTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DimensionTypeContext.prototype = Object.create(TypeContext.prototype);
DimensionTypeContext.prototype.constructor = DimensionTypeContext;

AcslParser.DimensionTypeContext = DimensionTypeContext;

DimensionTypeContext.prototype.DIMENSION = function() {
    return this.getToken(AcslParser.DIMENSION, 0);
};

DimensionTypeContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

DimensionTypeContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};

DimensionTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterDimensionType(this);
	}
};

DimensionTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitDimensionType(this);
	}
};

DimensionTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitDimensionType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DoublePrecisionTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoublePrecisionTypeContext.prototype = Object.create(TypeContext.prototype);
DoublePrecisionTypeContext.prototype.constructor = DoublePrecisionTypeContext;

AcslParser.DoublePrecisionTypeContext = DoublePrecisionTypeContext;

DoublePrecisionTypeContext.prototype.DOUBLEPRECISION = function() {
    return this.getToken(AcslParser.DOUBLEPRECISION, 0);
};

DoublePrecisionTypeContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

DoublePrecisionTypeContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};

DoublePrecisionTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterDoublePrecisionType(this);
	}
};

DoublePrecisionTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitDoublePrecisionType(this);
	}
};

DoublePrecisionTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitDoublePrecisionType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalTypeContext.prototype = Object.create(TypeContext.prototype);
LogicalTypeContext.prototype.constructor = LogicalTypeContext;

AcslParser.LogicalTypeContext = LogicalTypeContext;

LogicalTypeContext.prototype.LOGICAL = function() {
    return this.getToken(AcslParser.LOGICAL, 0);
};

LogicalTypeContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

LogicalTypeContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};

LogicalTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterLogicalType(this);
	}
};

LogicalTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitLogicalType(this);
	}
};

LogicalTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitLogicalType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CharacterTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacterTypeContext.prototype = Object.create(TypeContext.prototype);
CharacterTypeContext.prototype.constructor = CharacterTypeContext;

AcslParser.CharacterTypeContext = CharacterTypeContext;

CharacterTypeContext.prototype.CHARACTER = function() {
    return this.getToken(AcslParser.CHARACTER, 0);
};

CharacterTypeContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

CharacterTypeContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};

CharacterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterCharacterType(this);
	}
};

CharacterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitCharacterType(this);
	}
};

CharacterTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitCharacterType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RealTypeContext(parser, ctx) {
	TypeContext.call(this, parser);
    TypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RealTypeContext.prototype = Object.create(TypeContext.prototype);
RealTypeContext.prototype.constructor = RealTypeContext;

AcslParser.RealTypeContext = RealTypeContext;

RealTypeContext.prototype.REAL = function() {
    return this.getToken(AcslParser.REAL, 0);
};

RealTypeContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

RealTypeContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};

RealTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterRealType(this);
	}
};

RealTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitRealType(this);
	}
};

RealTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitRealType(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.TypeContext = TypeContext;

AcslParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, AcslParser.RULE_type);
    var _la = 0; // Token type
    try {
        this.state = 485;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case AcslParser.DIMENSION:
            localctx = new DimensionTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 431;
            this.match(AcslParser.DIMENSION);
            this.state = 432;
            this.expr(0);
            this.state = 437;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AcslParser.COMMA) {
                this.state = 433;
                this.match(AcslParser.COMMA);
                this.state = 434;
                this.expr(0);
                this.state = 439;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case AcslParser.REAL:
            localctx = new RealTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 440;
            this.match(AcslParser.REAL);
            this.state = 441;
            this.expr(0);
            this.state = 446;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AcslParser.COMMA) {
                this.state = 442;
                this.match(AcslParser.COMMA);
                this.state = 443;
                this.expr(0);
                this.state = 448;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case AcslParser.DOUBLEPRECISION:
            localctx = new DoublePrecisionTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 449;
            this.match(AcslParser.DOUBLEPRECISION);
            this.state = 450;
            this.expr(0);
            this.state = 455;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AcslParser.COMMA) {
                this.state = 451;
                this.match(AcslParser.COMMA);
                this.state = 452;
                this.expr(0);
                this.state = 457;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case AcslParser.INTEGER:
            localctx = new IntegerTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 458;
            this.match(AcslParser.INTEGER);
            this.state = 459;
            this.expr(0);
            this.state = 464;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AcslParser.COMMA) {
                this.state = 460;
                this.match(AcslParser.COMMA);
                this.state = 461;
                this.expr(0);
                this.state = 466;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case AcslParser.LOGICAL:
            localctx = new LogicalTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 467;
            this.match(AcslParser.LOGICAL);
            this.state = 468;
            this.expr(0);
            this.state = 473;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AcslParser.COMMA) {
                this.state = 469;
                this.match(AcslParser.COMMA);
                this.state = 470;
                this.expr(0);
                this.state = 475;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case AcslParser.CHARACTER:
            localctx = new CharacterTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 476;
            this.match(AcslParser.CHARACTER);
            this.state = 477;
            this.expr(0);
            this.state = 482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AcslParser.COMMA) {
                this.state = 478;
                this.match(AcslParser.COMMA);
                this.state = 479;
                this.expr(0);
                this.state = 484;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProceduralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_procedural;
    return this;
}

ProceduralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProceduralContext.prototype.constructor = ProceduralContext;


 
ProceduralContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ProceduralWithCommentContext(parser, ctx) {
	ProceduralContext.call(this, parser);
    ProceduralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProceduralWithCommentContext.prototype = Object.create(ProceduralContext.prototype);
ProceduralWithCommentContext.prototype.constructor = ProceduralWithCommentContext;

AcslParser.ProceduralWithCommentContext = ProceduralWithCommentContext;

ProceduralWithCommentContext.prototype.PROCEDURAL = function() {
    return this.getToken(AcslParser.PROCEDURAL, 0);
};

ProceduralWithCommentContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

ProceduralWithCommentContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

ProceduralWithCommentContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

ProceduralWithCommentContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.ID);
    } else {
        return this.getToken(AcslParser.ID, i);
    }
};


ProceduralWithCommentContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};


ProceduralWithCommentContext.prototype.EQUALS = function() {
    return this.getToken(AcslParser.EQUALS, 0);
};
ProceduralWithCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterProceduralWithComment(this);
	}
};

ProceduralWithCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitProceduralWithComment(this);
	}
};

ProceduralWithCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitProceduralWithComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ProceduralWithoutCommentContext(parser, ctx) {
	ProceduralContext.call(this, parser);
    ProceduralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ProceduralWithoutCommentContext.prototype = Object.create(ProceduralContext.prototype);
ProceduralWithoutCommentContext.prototype.constructor = ProceduralWithoutCommentContext;

AcslParser.ProceduralWithoutCommentContext = ProceduralWithoutCommentContext;

ProceduralWithoutCommentContext.prototype.PROCEDURAL = function() {
    return this.getToken(AcslParser.PROCEDURAL, 0);
};

ProceduralWithoutCommentContext.prototype.END = function() {
    return this.getToken(AcslParser.END, 0);
};

ProceduralWithoutCommentContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

ProceduralWithoutCommentContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

ProceduralWithoutCommentContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.ID);
    } else {
        return this.getToken(AcslParser.ID, i);
    }
};


ProceduralWithoutCommentContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};


ProceduralWithoutCommentContext.prototype.EQUALS = function() {
    return this.getToken(AcslParser.EQUALS, 0);
};
ProceduralWithoutCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterProceduralWithoutComment(this);
	}
};

ProceduralWithoutCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitProceduralWithoutComment(this);
	}
};

ProceduralWithoutCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitProceduralWithoutComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.ProceduralContext = ProceduralContext;

AcslParser.prototype.procedural = function() {

    var localctx = new ProceduralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, AcslParser.RULE_procedural);
    var _la = 0; // Token type
    try {
        this.state = 560;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ProceduralWithCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 487;
            this.match(AcslParser.PROCEDURAL);
            this.state = 513;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
            if(la_===1) {
                this.state = 488;
                this.match(AcslParser.T__0);
                this.state = 490;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
                if(la_===1) {
                    this.state = 489;
                    this.match(AcslParser.ID);

                }
                this.state = 496;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 492;
                        this.match(AcslParser.COMMA);
                        this.state = 493;
                        this.match(AcslParser.ID); 
                    }
                    this.state = 498;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
                }

                this.state = 500;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===AcslParser.EQUALS) {
                    this.state = 499;
                    this.match(AcslParser.EQUALS);
                }

                this.state = 503;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===AcslParser.ID) {
                    this.state = 502;
                    this.match(AcslParser.ID);
                }

                this.state = 509;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===AcslParser.COMMA) {
                    this.state = 505;
                    this.match(AcslParser.COMMA);
                    this.state = 506;
                    this.match(AcslParser.ID);
                    this.state = 511;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 512;
                this.match(AcslParser.T__1);

            }
            this.state = 519;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 517;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case AcslParser.T__0:
                case AcslParser.T__6:
                case AcslParser.T__7:
                case AcslParser.INTERVAL:
                case AcslParser.SCHEDULE:
                case AcslParser.CONSTANT:
                case AcslParser.ALGORITHM:
                case AcslParser.MAXTERVAL:
                case AcslParser.MINTERVAL:
                case AcslParser.CINTERVAL:
                case AcslParser.NSTEPS:
                case AcslParser.IF:
                case AcslParser.TRUE:
                case AcslParser.FALSE:
                case AcslParser.NOT:
                case AcslParser.TABLE:
                case AcslParser.PARAMETER:
                case AcslParser.DO:
                case AcslParser.GO:
                case AcslParser.CALL:
                case AcslParser.VARIABLE:
                case AcslParser.DIMENSION:
                case AcslParser.REAL:
                case AcslParser.DOUBLEPRECISION:
                case AcslParser.INTEGER:
                case AcslParser.LOGICAL:
                case AcslParser.CHARACTER:
                case AcslParser.STRING:
                case AcslParser.INT:
                case AcslParser.FLOAT:
                case AcslParser.ID:
                    this.state = 515;
                    this.statement();
                    break;
                case AcslParser.COMMENT:
                    this.state = 516;
                    this.comment();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 521;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 522;
            this.match(AcslParser.END);
            this.state = 523;
            this.comment();
            break;

        case 2:
            localctx = new ProceduralWithoutCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 524;
            this.match(AcslParser.PROCEDURAL);
            this.state = 550;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
            if(la_===1) {
                this.state = 525;
                this.match(AcslParser.T__0);
                this.state = 527;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
                if(la_===1) {
                    this.state = 526;
                    this.match(AcslParser.ID);

                }
                this.state = 533;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 529;
                        this.match(AcslParser.COMMA);
                        this.state = 530;
                        this.match(AcslParser.ID); 
                    }
                    this.state = 535;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
                }

                this.state = 537;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===AcslParser.EQUALS) {
                    this.state = 536;
                    this.match(AcslParser.EQUALS);
                }

                this.state = 540;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===AcslParser.ID) {
                    this.state = 539;
                    this.match(AcslParser.ID);
                }

                this.state = 546;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===AcslParser.COMMA) {
                    this.state = 542;
                    this.match(AcslParser.COMMA);
                    this.state = 543;
                    this.match(AcslParser.ID);
                    this.state = 548;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 549;
                this.match(AcslParser.T__1);

            }
            this.state = 556;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7) | (1 << AcslParser.INTERVAL) | (1 << AcslParser.SCHEDULE) | (1 << AcslParser.CONSTANT) | (1 << AcslParser.ALGORITHM) | (1 << AcslParser.MAXTERVAL) | (1 << AcslParser.MINTERVAL) | (1 << AcslParser.CINTERVAL) | (1 << AcslParser.NSTEPS))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (AcslParser.IF - 35)) | (1 << (AcslParser.TRUE - 35)) | (1 << (AcslParser.FALSE - 35)) | (1 << (AcslParser.NOT - 35)) | (1 << (AcslParser.TABLE - 35)) | (1 << (AcslParser.PARAMETER - 35)) | (1 << (AcslParser.DO - 35)) | (1 << (AcslParser.GO - 35)) | (1 << (AcslParser.CALL - 35)) | (1 << (AcslParser.VARIABLE - 35)) | (1 << (AcslParser.DIMENSION - 35)) | (1 << (AcslParser.REAL - 35)) | (1 << (AcslParser.DOUBLEPRECISION - 35)) | (1 << (AcslParser.INTEGER - 35)) | (1 << (AcslParser.LOGICAL - 35)) | (1 << (AcslParser.CHARACTER - 35)) | (1 << (AcslParser.STRING - 35)) | (1 << (AcslParser.INT - 35)) | (1 << (AcslParser.FLOAT - 35)) | (1 << (AcslParser.ID - 35)))) !== 0) || _la===AcslParser.COMMENT) {
                this.state = 554;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case AcslParser.T__0:
                case AcslParser.T__6:
                case AcslParser.T__7:
                case AcslParser.INTERVAL:
                case AcslParser.SCHEDULE:
                case AcslParser.CONSTANT:
                case AcslParser.ALGORITHM:
                case AcslParser.MAXTERVAL:
                case AcslParser.MINTERVAL:
                case AcslParser.CINTERVAL:
                case AcslParser.NSTEPS:
                case AcslParser.IF:
                case AcslParser.TRUE:
                case AcslParser.FALSE:
                case AcslParser.NOT:
                case AcslParser.TABLE:
                case AcslParser.PARAMETER:
                case AcslParser.DO:
                case AcslParser.GO:
                case AcslParser.CALL:
                case AcslParser.VARIABLE:
                case AcslParser.DIMENSION:
                case AcslParser.REAL:
                case AcslParser.DOUBLEPRECISION:
                case AcslParser.INTEGER:
                case AcslParser.LOGICAL:
                case AcslParser.CHARACTER:
                case AcslParser.STRING:
                case AcslParser.INT:
                case AcslParser.FLOAT:
                case AcslParser.ID:
                    this.state = 552;
                    this.statement();
                    break;
                case AcslParser.COMMENT:
                    this.state = 553;
                    this.comment();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 558;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 559;
            this.match(AcslParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expr_or_assignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_expr_or_assign;
    return this;
}

Expr_or_assignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr_or_assignContext.prototype.constructor = Expr_or_assignContext;


 
Expr_or_assignContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ListExprOrAssignContext(parser, ctx) {
	Expr_or_assignContext.call(this, parser);
    Expr_or_assignContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListExprOrAssignContext.prototype = Object.create(Expr_or_assignContext.prototype);
ListExprOrAssignContext.prototype.constructor = ListExprOrAssignContext;

AcslParser.ListExprOrAssignContext = ListExprOrAssignContext;

ListExprOrAssignContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ListExprOrAssignContext.prototype.EQUALS = function() {
    return this.getToken(AcslParser.EQUALS, 0);
};

ListExprOrAssignContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};

ListExprOrAssignContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterListExprOrAssign(this);
	}
};

ListExprOrAssignContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitListExprOrAssign(this);
	}
};

ListExprOrAssignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitListExprOrAssign(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MultipleExprOrAssignWithCommentContext(parser, ctx) {
	Expr_or_assignContext.call(this, parser);
    Expr_or_assignContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultipleExprOrAssignWithCommentContext.prototype = Object.create(Expr_or_assignContext.prototype);
MultipleExprOrAssignWithCommentContext.prototype.constructor = MultipleExprOrAssignWithCommentContext;

AcslParser.MultipleExprOrAssignWithCommentContext = MultipleExprOrAssignWithCommentContext;

MultipleExprOrAssignWithCommentContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

MultipleExprOrAssignWithCommentContext.prototype.EQUALS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.EQUALS);
    } else {
        return this.getToken(AcslParser.EQUALS, i);
    }
};


MultipleExprOrAssignWithCommentContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};


MultipleExprOrAssignWithCommentContext.prototype.comment = function() {
    return this.getTypedRuleContext(CommentContext,0);
};
MultipleExprOrAssignWithCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterMultipleExprOrAssignWithComment(this);
	}
};

MultipleExprOrAssignWithCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitMultipleExprOrAssignWithComment(this);
	}
};

MultipleExprOrAssignWithCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitMultipleExprOrAssignWithComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ListExprOrAssignWithCommentContext(parser, ctx) {
	Expr_or_assignContext.call(this, parser);
    Expr_or_assignContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListExprOrAssignWithCommentContext.prototype = Object.create(Expr_or_assignContext.prototype);
ListExprOrAssignWithCommentContext.prototype.constructor = ListExprOrAssignWithCommentContext;

AcslParser.ListExprOrAssignWithCommentContext = ListExprOrAssignWithCommentContext;

ListExprOrAssignWithCommentContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ListExprOrAssignWithCommentContext.prototype.EQUALS = function() {
    return this.getToken(AcslParser.EQUALS, 0);
};

ListExprOrAssignWithCommentContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};


ListExprOrAssignWithCommentContext.prototype.comment = function() {
    return this.getTypedRuleContext(CommentContext,0);
};
ListExprOrAssignWithCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterListExprOrAssignWithComment(this);
	}
};

ListExprOrAssignWithCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitListExprOrAssignWithComment(this);
	}
};

ListExprOrAssignWithCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitListExprOrAssignWithComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AssignExprOrAssignContext(parser, ctx) {
	Expr_or_assignContext.call(this, parser);
    Expr_or_assignContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignExprOrAssignContext.prototype = Object.create(Expr_or_assignContext.prototype);
AssignExprOrAssignContext.prototype.constructor = AssignExprOrAssignContext;

AcslParser.AssignExprOrAssignContext = AssignExprOrAssignContext;

AssignExprOrAssignContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

AssignExprOrAssignContext.prototype.EQUALS = function() {
    return this.getToken(AcslParser.EQUALS, 0);
};

AssignExprOrAssignContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};
AssignExprOrAssignContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterAssignExprOrAssign(this);
	}
};

AssignExprOrAssignContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitAssignExprOrAssign(this);
	}
};

AssignExprOrAssignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitAssignExprOrAssign(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExprExprOrAssignContext(parser, ctx) {
	Expr_or_assignContext.call(this, parser);
    Expr_or_assignContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprExprOrAssignContext.prototype = Object.create(Expr_or_assignContext.prototype);
ExprExprOrAssignContext.prototype.constructor = ExprExprOrAssignContext;

AcslParser.ExprExprOrAssignContext = ExprExprOrAssignContext;

ExprExprOrAssignContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
ExprExprOrAssignContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterExprExprOrAssign(this);
	}
};

ExprExprOrAssignContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitExprExprOrAssign(this);
	}
};

ExprExprOrAssignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitExprExprOrAssign(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MultipleExprOrAssignContext(parser, ctx) {
	Expr_or_assignContext.call(this, parser);
    Expr_or_assignContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultipleExprOrAssignContext.prototype = Object.create(Expr_or_assignContext.prototype);
MultipleExprOrAssignContext.prototype.constructor = MultipleExprOrAssignContext;

AcslParser.MultipleExprOrAssignContext = MultipleExprOrAssignContext;

MultipleExprOrAssignContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

MultipleExprOrAssignContext.prototype.EQUALS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.EQUALS);
    } else {
        return this.getToken(AcslParser.EQUALS, i);
    }
};


MultipleExprOrAssignContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};

MultipleExprOrAssignContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterMultipleExprOrAssign(this);
	}
};

MultipleExprOrAssignContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitMultipleExprOrAssign(this);
	}
};

MultipleExprOrAssignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitMultipleExprOrAssign(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AssignExprOrAssignWithCommentContext(parser, ctx) {
	Expr_or_assignContext.call(this, parser);
    Expr_or_assignContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignExprOrAssignWithCommentContext.prototype = Object.create(Expr_or_assignContext.prototype);
AssignExprOrAssignWithCommentContext.prototype.constructor = AssignExprOrAssignWithCommentContext;

AcslParser.AssignExprOrAssignWithCommentContext = AssignExprOrAssignWithCommentContext;

AssignExprOrAssignWithCommentContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

AssignExprOrAssignWithCommentContext.prototype.EQUALS = function() {
    return this.getToken(AcslParser.EQUALS, 0);
};

AssignExprOrAssignWithCommentContext.prototype.expr_or_assign = function() {
    return this.getTypedRuleContext(Expr_or_assignContext,0);
};

AssignExprOrAssignWithCommentContext.prototype.comment = function() {
    return this.getTypedRuleContext(CommentContext,0);
};
AssignExprOrAssignWithCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterAssignExprOrAssignWithComment(this);
	}
};

AssignExprOrAssignWithCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitAssignExprOrAssignWithComment(this);
	}
};

AssignExprOrAssignWithCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitAssignExprOrAssignWithComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.Expr_or_assignContext = Expr_or_assignContext;

AcslParser.prototype.expr_or_assign = function() {

    var localctx = new Expr_or_assignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, AcslParser.RULE_expr_or_assign);
    var _la = 0; // Token type
    try {
        this.state = 657;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AssignExprOrAssignWithCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 562;
            this.expr(0);
            this.state = 563;
            this.match(AcslParser.EQUALS);
            this.state = 564;
            this.expr_or_assign();
            this.state = 568;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AcslParser.T__2) {
                this.state = 565;
                this.match(AcslParser.T__2);
                this.state = 570;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 571;
            this.comment();
            break;

        case 2:
            localctx = new AssignExprOrAssignContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 573;
            this.expr(0);
            this.state = 574;
            this.match(AcslParser.EQUALS);
            this.state = 575;
            this.expr_or_assign();
            this.state = 579;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 576;
                    this.match(AcslParser.T__2); 
                }
                this.state = 581;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
            }

            break;

        case 3:
            localctx = new ListExprOrAssignWithCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 582;
            this.expr(0);
            this.state = 583;
            this.match(AcslParser.EQUALS);
            this.state = 584;
            this.expr(0);
            this.state = 585;
            this.match(AcslParser.COMMA);
            this.state = 586;
            this.expr(0);
            this.state = 591;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AcslParser.COMMA) {
                this.state = 587;
                this.match(AcslParser.COMMA);
                this.state = 588;
                this.expr(0);
                this.state = 593;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 594;
            this.comment();
            break;

        case 4:
            localctx = new ListExprOrAssignContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 596;
            this.expr(0);
            this.state = 597;
            this.match(AcslParser.EQUALS);
            this.state = 598;
            this.expr(0);
            this.state = 599;
            this.match(AcslParser.COMMA);
            this.state = 600;
            this.expr(0);
            this.state = 605;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 601;
                    this.match(AcslParser.COMMA);
                    this.state = 602;
                    this.expr(0); 
                }
                this.state = 607;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
            }

            break;

        case 5:
            localctx = new MultipleExprOrAssignWithCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 608;
            this.expr(0);
            this.state = 609;
            this.match(AcslParser.EQUALS);
            this.state = 610;
            this.expr(0);
            this.state = 611;
            this.match(AcslParser.COMMA);
            this.state = 612;
            this.expr(0);
            this.state = 613;
            this.match(AcslParser.EQUALS);
            this.state = 614;
            this.expr(0);
            this.state = 622;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AcslParser.COMMA) {
                this.state = 615;
                this.match(AcslParser.COMMA);
                this.state = 616;
                this.expr(0);
                this.state = 617;
                this.match(AcslParser.EQUALS);
                this.state = 618;
                this.expr(0);
                this.state = 624;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 625;
            this.comment();
            break;

        case 6:
            localctx = new MultipleExprOrAssignContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 627;
            this.expr(0);
            this.state = 628;
            this.match(AcslParser.EQUALS);
            this.state = 629;
            this.expr(0);
            this.state = 630;
            this.match(AcslParser.COMMA);
            this.state = 631;
            this.expr(0);
            this.state = 632;
            this.match(AcslParser.EQUALS);
            this.state = 633;
            this.expr(0);
            this.state = 641;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 634;
                    this.match(AcslParser.COMMA);
                    this.state = 635;
                    this.expr(0);
                    this.state = 636;
                    this.match(AcslParser.EQUALS);
                    this.state = 637;
                    this.expr(0); 
                }
                this.state = 643;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
            }

            break;

        case 7:
            localctx = new ListExprOrAssignContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 644;
            this.expr(0);
            this.state = 645;
            this.match(AcslParser.EQUALS);
            this.state = 646;
            this.expr(0);
            this.state = 647;
            this.match(AcslParser.COMMA);
            this.state = 648;
            this.expr(0);
            this.state = 653;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 649;
                    this.match(AcslParser.COMMA);
                    this.state = 650;
                    this.expr(0); 
                }
                this.state = 655;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
            }

            break;

        case 8:
            localctx = new ExprExprOrAssignContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 656;
            this.expr(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;


 
ExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function BoolExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BoolExprContext.prototype = Object.create(ExprContext.prototype);
BoolExprContext.prototype.constructor = BoolExprContext;

AcslParser.BoolExprContext = BoolExprContext;

BoolExprContext.prototype.TRUE = function() {
    return this.getToken(AcslParser.TRUE, 0);
};

BoolExprContext.prototype.FALSE = function() {
    return this.getToken(AcslParser.FALSE, 0);
};
BoolExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterBoolExpr(this);
	}
};

BoolExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitBoolExpr(this);
	}
};

BoolExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitBoolExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FloatExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FloatExprContext.prototype = Object.create(ExprContext.prototype);
FloatExprContext.prototype.constructor = FloatExprContext;

AcslParser.FloatExprContext = FloatExprContext;

FloatExprContext.prototype.FLOAT = function() {
    return this.getToken(AcslParser.FLOAT, 0);
};
FloatExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterFloatExpr(this);
	}
};

FloatExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitFloatExpr(this);
	}
};

FloatExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitFloatExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IdExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdExprContext.prototype = Object.create(ExprContext.prototype);
IdExprContext.prototype.constructor = IdExprContext;

AcslParser.IdExprContext = IdExprContext;

IdExprContext.prototype.ID = function() {
    return this.getToken(AcslParser.ID, 0);
};
IdExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterIdExpr(this);
	}
};

IdExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitIdExpr(this);
	}
};

IdExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitIdExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubExprContext.prototype = Object.create(ExprContext.prototype);
SubExprContext.prototype.constructor = SubExprContext;

AcslParser.SubExprContext = SubExprContext;

SubExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
SubExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterSubExpr(this);
	}
};

SubExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitSubExpr(this);
	}
};

SubExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitSubExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExpExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExpExprContext.prototype = Object.create(ExprContext.prototype);
ExpExprContext.prototype.constructor = ExpExprContext;

AcslParser.ExpExprContext = ExpExprContext;

ExpExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};
ExpExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterExpExpr(this);
	}
};

ExpExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitExpExpr(this);
	}
};

ExpExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitExpExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InfixExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InfixExprContext.prototype = Object.create(ExprContext.prototype);
InfixExprContext.prototype.constructor = InfixExprContext;

AcslParser.InfixExprContext = InfixExprContext;

InfixExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

InfixExprContext.prototype.AND = function() {
    return this.getToken(AcslParser.AND, 0);
};

InfixExprContext.prototype.EQ = function() {
    return this.getToken(AcslParser.EQ, 0);
};

InfixExprContext.prototype.GE = function() {
    return this.getToken(AcslParser.GE, 0);
};

InfixExprContext.prototype.GT = function() {
    return this.getToken(AcslParser.GT, 0);
};

InfixExprContext.prototype.LE = function() {
    return this.getToken(AcslParser.LE, 0);
};

InfixExprContext.prototype.LT = function() {
    return this.getToken(AcslParser.LT, 0);
};

InfixExprContext.prototype.NE = function() {
    return this.getToken(AcslParser.NE, 0);
};

InfixExprContext.prototype.OR = function() {
    return this.getToken(AcslParser.OR, 0);
};

InfixExprContext.prototype.XOR = function() {
    return this.getToken(AcslParser.XOR, 0);
};

InfixExprContext.prototype.AT = function() {
    return this.getToken(AcslParser.AT, 0);
};
InfixExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterInfixExpr(this);
	}
};

InfixExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitInfixExpr(this);
	}
};

InfixExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitInfixExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExprContext.prototype = Object.create(ExprContext.prototype);
UnaryExprContext.prototype.constructor = UnaryExprContext;

AcslParser.UnaryExprContext = UnaryExprContext;

UnaryExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
UnaryExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterUnaryExpr(this);
	}
};

UnaryExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitUnaryExpr(this);
	}
};

UnaryExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitUnaryExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MulDivExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MulDivExprContext.prototype = Object.create(ExprContext.prototype);
MulDivExprContext.prototype.constructor = MulDivExprContext;

AcslParser.MulDivExprContext = MulDivExprContext;

MulDivExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};
MulDivExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterMulDivExpr(this);
	}
};

MulDivExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitMulDivExpr(this);
	}
};

MulDivExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitMulDivExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StrExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StrExprContext.prototype = Object.create(ExprContext.prototype);
StrExprContext.prototype.constructor = StrExprContext;

AcslParser.StrExprContext = StrExprContext;

StrExprContext.prototype.STRING = function() {
    return this.getToken(AcslParser.STRING, 0);
};
StrExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterStrExpr(this);
	}
};

StrExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitStrExpr(this);
	}
};

StrExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitStrExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NotExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExprContext.prototype = Object.create(ExprContext.prototype);
NotExprContext.prototype.constructor = NotExprContext;

AcslParser.NotExprContext = NotExprContext;

NotExprContext.prototype.NOT = function() {
    return this.getToken(AcslParser.NOT, 0);
};

NotExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
NotExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterNotExpr(this);
	}
};

NotExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitNotExpr(this);
	}
};

NotExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitNotExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IntExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntExprContext.prototype = Object.create(ExprContext.prototype);
IntExprContext.prototype.constructor = IntExprContext;

AcslParser.IntExprContext = IntExprContext;

IntExprContext.prototype.INT = function() {
    return this.getToken(AcslParser.INT, 0);
};
IntExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterIntExpr(this);
	}
};

IntExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitIntExpr(this);
	}
};

IntExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitIntExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AddSubExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddSubExprContext.prototype = Object.create(ExprContext.prototype);
AddSubExprContext.prototype.constructor = AddSubExprContext;

AcslParser.AddSubExprContext = AddSubExprContext;

AddSubExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};
AddSubExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterAddSubExpr(this);
	}
};

AddSubExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitAddSubExpr(this);
	}
};

AddSubExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitAddSubExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FnExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FnExprContext.prototype = Object.create(ExprContext.prototype);
FnExprContext.prototype.constructor = FnExprContext;

AcslParser.FnExprContext = FnExprContext;

FnExprContext.prototype.ID = function() {
    return this.getToken(AcslParser.ID, 0);
};

FnExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

FnExprContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AcslParser.COMMA);
    } else {
        return this.getToken(AcslParser.COMMA, i);
    }
};

FnExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterFnExpr(this);
	}
};

FnExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitFnExpr(this);
	}
};

FnExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitFnExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};



AcslParser.prototype.expr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 60;
    this.enterRecursionRule(localctx, 60, AcslParser.RULE_expr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 686;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 660;
            _la = this._input.LA(1);
            if(!(_la===AcslParser.T__6 || _la===AcslParser.T__7)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 661;
            this.expr(12);
            break;

        case 2:
            localctx = new NotExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 662;
            this.match(AcslParser.NOT);
            this.state = 663;
            this.expr(9);
            break;

        case 3:
            localctx = new BoolExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 664;
            _la = this._input.LA(1);
            if(!(_la===AcslParser.TRUE || _la===AcslParser.FALSE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 4:
            localctx = new FnExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 665;
            this.match(AcslParser.ID);
            this.state = 666;
            this.match(AcslParser.T__0);
            this.state = 675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AcslParser.T__0) | (1 << AcslParser.T__6) | (1 << AcslParser.T__7))) !== 0) || ((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (AcslParser.TRUE - 41)) | (1 << (AcslParser.FALSE - 41)) | (1 << (AcslParser.NOT - 41)) | (1 << (AcslParser.STRING - 41)) | (1 << (AcslParser.INT - 41)) | (1 << (AcslParser.FLOAT - 41)) | (1 << (AcslParser.ID - 41)))) !== 0)) {
                this.state = 667;
                this.expr(0);
                this.state = 672;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===AcslParser.COMMA) {
                    this.state = 668;
                    this.match(AcslParser.COMMA);
                    this.state = 669;
                    this.expr(0);
                    this.state = 674;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 677;
            this.match(AcslParser.T__1);
            break;

        case 5:
            localctx = new SubExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 678;
            this.match(AcslParser.T__0);
            this.state = 679;
            this.expr(0);
            this.state = 680;
            this.match(AcslParser.T__1);
            break;

        case 6:
            localctx = new StrExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 682;
            this.match(AcslParser.STRING);
            break;

        case 7:
            localctx = new IdExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 683;
            this.match(AcslParser.ID);
            break;

        case 8:
            localctx = new IntExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 684;
            this.match(AcslParser.INT);
            break;

        case 9:
            localctx = new FloatExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 685;
            this.match(AcslParser.FLOAT);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 702;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 700;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, AcslParser.RULE_expr);
                    this.state = 688;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 689;
                    _la = this._input.LA(1);
                    if(!(_la===AcslParser.T__4 || _la===AcslParser.T__5)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 690;
                    this.expr(13);
                    break;

                case 2:
                    localctx = new MulDivExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, AcslParser.RULE_expr);
                    this.state = 691;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 692;
                    _la = this._input.LA(1);
                    if(!(_la===AcslParser.T__8 || _la===AcslParser.SLASH)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 693;
                    this.expr(12);
                    break;

                case 3:
                    localctx = new AddSubExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, AcslParser.RULE_expr);
                    this.state = 694;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 695;
                    _la = this._input.LA(1);
                    if(!(_la===AcslParser.T__6 || _la===AcslParser.T__7)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 696;
                    this.expr(11);
                    break;

                case 4:
                    localctx = new InfixExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, AcslParser.RULE_expr);
                    this.state = 697;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 698;
                    _la = this._input.LA(1);
                    if(!(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (AcslParser.AND - 25)) | (1 << (AcslParser.EQ - 25)) | (1 << (AcslParser.GE - 25)) | (1 << (AcslParser.GT - 25)) | (1 << (AcslParser.LE - 25)) | (1 << (AcslParser.LT - 25)) | (1 << (AcslParser.NE - 25)) | (1 << (AcslParser.OR - 25)) | (1 << (AcslParser.XOR - 25)) | (1 << (AcslParser.AT - 25)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 699;
                    this.expr(8);
                    break;

                } 
            }
            this.state = 704;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function CommentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AcslParser.RULE_comment;
    return this;
}

CommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommentContext.prototype.constructor = CommentContext;

CommentContext.prototype.COMMENT = function() {
    return this.getToken(AcslParser.COMMENT, 0);
};

CommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.enterComment(this);
	}
};

CommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AcslListener ) {
        listener.exitComment(this);
	}
};

CommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof AcslVisitor ) {
        return visitor.visitComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




AcslParser.CommentContext = CommentContext;

AcslParser.prototype.comment = function() {

    var localctx = new CommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, AcslParser.RULE_comment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 705;
        this.match(AcslParser.COMMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


AcslParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 30:
			return this.expr_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

AcslParser.prototype.expr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 13);
		case 1:
			return this.precpred(this._ctx, 11);
		case 2:
			return this.precpred(this._ctx, 10);
		case 3:
			return this.precpred(this._ctx, 7);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


module.exports.AcslParser = AcslParser;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// This implementation of {@link TokenStream} loads tokens from a
// {@link TokenSource} on-demand, and places the tokens in a buffer to provide
// access to any previous token by index.
//
// <p>
// This token stream ignores the value of {@link Token//getChannel}. If your
// parser requires the token stream filter tokens to only those on a particular
// channel, such as {@link Token//DEFAULT_CHANNEL} or
// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
// {@link CommonTokenStream}.</p>

var Token = __webpack_require__(4).Token;
var Lexer = __webpack_require__(32).Lexer;
var Interval = __webpack_require__(7).Interval;

// this is just to keep meaningful parameter types to Parser
function TokenStream() {
	return this;
}

function BufferedTokenStream(tokenSource) {

	TokenStream.call(this);
	// The {@link TokenSource} from which tokens for this stream are fetched.
	this.tokenSource = tokenSource;

	// A collection of all tokens fetched from the token source. The list is
	// considered a complete view of the input once {@link //fetchedEOF} is set
	// to {@code true}.
	this.tokens = [];

	// The index into {@link //tokens} of the current token (next token to
	// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
	// be
	// {@link //LT LT(1)}.
	//
	// <p>This field is set to -1 when the stream is first constructed or when
	// {@link //setTokenSource} is called, indicating that the first token has
	// not yet been fetched from the token source. For additional information,
	// see the documentation of {@link IntStream} for a description of
	// Initializing Methods.</p>
	this.index = -1;

	// Indicates whether the {@link Token//EOF} token has been fetched from
	// {@link //tokenSource} and added to {@link //tokens}. This field improves
	// performance for the following cases:
	//
	// <ul>
	// <li>{@link //consume}: The lookahead check in {@link //consume} to
	// prevent
	// consuming the EOF symbol is optimized by checking the values of
	// {@link //fetchedEOF} and {@link //p} instead of calling {@link
	// //LA}.</li>
	// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
	// into
	// {@link //tokens} is trivial with this field.</li>
	// <ul>
	this.fetchedEOF = false;
	return this;
}

BufferedTokenStream.prototype = Object.create(TokenStream.prototype);
BufferedTokenStream.prototype.constructor = BufferedTokenStream;

BufferedTokenStream.prototype.mark = function() {
	return 0;
};

BufferedTokenStream.prototype.release = function(marker) {
	// no resources to release
};

BufferedTokenStream.prototype.reset = function() {
	this.seek(0);
};

BufferedTokenStream.prototype.seek = function(index) {
	this.lazyInit();
	this.index = this.adjustSeekIndex(index);
};

BufferedTokenStream.prototype.get = function(index) {
	this.lazyInit();
	return this.tokens[index];
};

BufferedTokenStream.prototype.consume = function() {
	var skipEofCheck = false;
	if (this.index >= 0) {
		if (this.fetchedEOF) {
			// the last token in tokens is EOF. skip check if p indexes any
			// fetched token except the last.
			skipEofCheck = this.index < this.tokens.length - 1;
		} else {
			// no EOF token in tokens. skip check if p indexes a fetched token.
			skipEofCheck = this.index < this.tokens.length;
		}
	} else {
		// not yet initialized
		skipEofCheck = false;
	}
	if (!skipEofCheck && this.LA(1) === Token.EOF) {
		throw "cannot consume EOF";
	}
	if (this.sync(this.index + 1)) {
		this.index = this.adjustSeekIndex(this.index + 1);
	}
};

// Make sure index {@code i} in tokens has a token.
//
// @return {@code true} if a token is located at index {@code i}, otherwise
// {@code false}.
// @see //get(int i)
// /
BufferedTokenStream.prototype.sync = function(i) {
	var n = i - this.tokens.length + 1; // how many more elements we need?
	if (n > 0) {
		var fetched = this.fetch(n);
		return fetched >= n;
	}
	return true;
};

// Add {@code n} elements to buffer.
//
// @return The actual number of elements added to the buffer.
// /
BufferedTokenStream.prototype.fetch = function(n) {
	if (this.fetchedEOF) {
		return 0;
	}
	for (var i = 0; i < n; i++) {
		var t = this.tokenSource.nextToken();
		t.tokenIndex = this.tokens.length;
		this.tokens.push(t);
		if (t.type === Token.EOF) {
			this.fetchedEOF = true;
			return i + 1;
		}
	}
	return n;
};

// Get all tokens from start..stop inclusively///
BufferedTokenStream.prototype.getTokens = function(start, stop, types) {
	if (types === undefined) {
		types = null;
	}
	if (start < 0 || stop < 0) {
		return null;
	}
	this.lazyInit();
	var subset = [];
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	for (var i = start; i < stop; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		if (types === null || types.contains(t.type)) {
			subset.push(t);
		}
	}
	return subset;
};

BufferedTokenStream.prototype.LA = function(i) {
	return this.LT(i).type;
};

BufferedTokenStream.prototype.LB = function(k) {
	if (this.index - k < 0) {
		return null;
	}
	return this.tokens[this.index - k];
};

BufferedTokenStream.prototype.LT = function(k) {
	this.lazyInit();
	if (k === 0) {
		return null;
	}
	if (k < 0) {
		return this.LB(-k);
	}
	var i = this.index + k - 1;
	this.sync(i);
	if (i >= this.tokens.length) { // return EOF token
		// EOF must be last token
		return this.tokens[this.tokens.length - 1];
	}
	return this.tokens[i];
};

// Allowed derived classes to modify the behavior of operations which change
// the current stream position by adjusting the target token index of a seek
// operation. The default implementation simply returns {@code i}. If an
// exception is thrown in this method, the current stream index should not be
// changed.
//
// <p>For example, {@link CommonTokenStream} overrides this method to ensure
// that
// the seek target is always an on-channel token.</p>
//
// @param i The target token index.
// @return The adjusted target token index.

BufferedTokenStream.prototype.adjustSeekIndex = function(i) {
	return i;
};

BufferedTokenStream.prototype.lazyInit = function() {
	if (this.index === -1) {
		this.setup();
	}
};

BufferedTokenStream.prototype.setup = function() {
	this.sync(0);
	this.index = this.adjustSeekIndex(0);
};

// Reset this token stream by setting its token source.///
BufferedTokenStream.prototype.setTokenSource = function(tokenSource) {
	this.tokenSource = tokenSource;
	this.tokens = [];
	this.index = -1;
};


// Given a starting index, return the index of the next token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and EOF.
// /
BufferedTokenStream.prototype.nextTokenOnChannel = function(i, channel) {
	this.sync(i);
	if (i >= this.tokens.length) {
		return -1;
	}
	var token = this.tokens[i];
	while (token.channel !== this.channel) {
		if (token.type === Token.EOF) {
			return -1;
		}
		i += 1;
		this.sync(i);
		token = this.tokens[i];
	}
	return i;
};

// Given a starting index, return the index of the previous token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and 0.
BufferedTokenStream.prototype.previousTokenOnChannel = function(i, channel) {
	while (i >= 0 && this.tokens[i].channel !== channel) {
		i -= 1;
	}
	return i;
};

// Collect all tokens on specified channel to the right of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
// EOF. If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToRight = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1,
			Lexer.DEFAULT_TOKEN_CHANNEL);
	var from_ = tokenIndex + 1;
	// if none onchannel to right, nextOnChannel=-1 so set to = last token
	var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
	return this.filterForChannel(from_, to, channel);
};

// Collect all tokens on specified channel to the left of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
// If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToLeft = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1,
			Lexer.DEFAULT_TOKEN_CHANNEL);
	if (prevOnChannel === tokenIndex - 1) {
		return null;
	}
	// if none on channel to left, prevOnChannel=-1 then from=0
	var from_ = prevOnChannel + 1;
	var to = tokenIndex - 1;
	return this.filterForChannel(from_, to, channel);
};

BufferedTokenStream.prototype.filterForChannel = function(left, right, channel) {
	var hidden = [];
	for (var i = left; i < right + 1; i++) {
		var t = this.tokens[i];
		if (channel === -1) {
			if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
				hidden.push(t);
			}
		} else if (t.channel === channel) {
			hidden.push(t);
		}
	}
	if (hidden.length === 0) {
		return null;
	}
	return hidden;
};

BufferedTokenStream.prototype.getSourceName = function() {
	return this.tokenSource.getSourceName();
};

// Get the text of all tokens in this buffer.///
BufferedTokenStream.prototype.getText = function(interval) {
	this.lazyInit();
	this.fill();
	if (interval === undefined || interval === null) {
		interval = new Interval(0, this.tokens.length - 1);
	}
	var start = interval.start;
	if (start instanceof Token) {
		start = start.tokenIndex;
	}
	var stop = interval.stop;
	if (stop instanceof Token) {
		stop = stop.tokenIndex;
	}
	if (start === null || stop === null || start < 0 || stop < 0) {
		return "";
	}
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	var s = "";
	for (var i = start; i < stop + 1; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		s = s + t.text;
	}
	return s;
};

// Get all tokens from lexer until EOF///
BufferedTokenStream.prototype.fill = function() {
	this.lazyInit();
	while (this.fetch(1000) === 1000) {
		continue;
	}
};

exports.BufferedTokenStream = BufferedTokenStream;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This default implementation of {@link TokenFactory} creates
// {@link CommonToken} objects.
//

var CommonToken = __webpack_require__(4).CommonToken;

function TokenFactory() {
	return this;
}

function CommonTokenFactory(copyText) {
	TokenFactory.call(this);
    // Indicates whether {@link CommonToken//setText} should be called after
    // constructing tokens to explicitly set the text. This is useful for cases
    // where the input stream might not be able to provide arbitrary substrings
    // of text from the input after the lexer creates a token (e.g. the
    // implementation of {@link CharStream//getText} in
    // {@link UnbufferedCharStream} throws an
    // {@link UnsupportedOperationException}). Explicitly setting the token text
    // allows {@link Token//getText} to be called at any time regardless of the
    // input stream implementation.
    //
    // <p>
    // The default value is {@code false} to avoid the performance and memory
    // overhead of copying text for every token unless explicitly requested.</p>
    //
    this.copyText = copyText===undefined ? false : copyText;
	return this;
}

CommonTokenFactory.prototype = Object.create(TokenFactory.prototype);
CommonTokenFactory.prototype.constructor = CommonTokenFactory;

//
// The default {@link CommonTokenFactory} instance.
//
// <p>
// This token factory does not explicitly copy token text when constructing
// tokens.</p>
//
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

CommonTokenFactory.prototype.create = function(source, type, text, channel, start, stop, line, column) {
    var t = new CommonToken(source, type, channel, start, stop);
    t.line = line;
    t.column = column;
    if (text !==null) {
        t.text = text;
    } else if (this.copyText && source[1] !==null) {
        t.text = source[1].getText(start,stop);
    }
    return t;
};

CommonTokenFactory.prototype.createThin = function(type, text) {
    var t = new CommonToken(null, type);
    t.text = text;
    return t;
};

exports.CommonTokenFactory = CommonTokenFactory;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//
// This class extends {@link BufferedTokenStream} with functionality to filter
// token streams to tokens on a particular channel (tokens where
// {@link Token//getChannel} returns a particular value).
//
// <p>
// This token stream provides access to all tokens by index or when calling
// methods like {@link //getText}. The channel filtering is only used for code
// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
// {@link //LB}.</p>
//
// <p>
// By default, tokens are placed on the default channel
// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
// call {@link Lexer//setChannel}.
// </p>
//
// <p>
// Note: lexer rules which use the {@code ->skip} lexer command or call
// {@link Lexer//skip} do not produce tokens at all, so input text matched by
// such a rule will not be available as part of the token stream, regardless of
// channel.</p>
///

var Token = __webpack_require__(4).Token;
var BufferedTokenStream = __webpack_require__(152).BufferedTokenStream;

function CommonTokenStream(lexer, channel) {
	BufferedTokenStream.call(this, lexer);
    this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    return this;
}

CommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);
CommonTokenStream.prototype.constructor = CommonTokenStream;

CommonTokenStream.prototype.adjustSeekIndex = function(i) {
    return this.nextTokenOnChannel(i, this.channel);
};

CommonTokenStream.prototype.LB = function(k) {
    if (k===0 || this.index-k<0) {
        return null;
    }
    var i = this.index;
    var n = 1;
    // find k good tokens looking backwards
    while (n <= k) {
        // skip off-channel tokens
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
    }
    if (i < 0) {
        return null;
    }
    return this.tokens[i];
};

CommonTokenStream.prototype.LT = function(k) {
    this.lazyInit();
    if (k === 0) {
        return null;
    }
    if (k < 0) {
        return this.LB(-k);
    }
    var i = this.index;
    var n = 1; // we know tokens[pos] is a good one
    // find k good tokens
    while (n < k) {
        // skip off-channel tokens, but make sure to not look past EOF
        if (this.sync(i + 1)) {
            i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n += 1;
    }
    return this.tokens[i];
};

// Count EOF just once.///
CommonTokenStream.prototype.getNumberOfOnChannelTokens = function() {
    var n = 0;
    this.fill();
    for (var i =0; i< this.tokens.length;i++) {
        var t = this.tokens[i];
        if( t.channel===this.channel) {
            n += 1;
        }
        if( t.type===Token.EOF) {
            break;
        }
    }
    return n;
};

exports.CommonTokenStream = CommonTokenStream;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
//  This is an InputStream that is loaded from a file all at once
//  when you construct the object.
//
var InputStream = __webpack_require__(76).InputStream;
var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? __webpack_require__(199) : null;

function FileStream(fileName) {
	var data = fs.readFileSync(fileName, "utf8");
	InputStream.call(this, data);
	this.fileName = fileName;
	return this;
}

FileStream.prototype = Object.create(InputStream.prototype);
FileStream.prototype.constructor = FileStream;

exports.FileStream = FileStream;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var Set = __webpack_require__(2).Set;
var BitSet = __webpack_require__(2).BitSet;
var Token = __webpack_require__(4).Token;
var ATNConfig = __webpack_require__(34).ATNConfig;
var Interval = __webpack_require__(7).Interval;
var IntervalSet = __webpack_require__(7).IntervalSet;
var RuleStopState = __webpack_require__(10).RuleStopState;
var RuleTransition = __webpack_require__(16).RuleTransition;
var NotSetTransition = __webpack_require__(16).NotSetTransition;
var WildcardTransition = __webpack_require__(16).WildcardTransition;
var AbstractPredicateTransition = __webpack_require__(16).AbstractPredicateTransition;

var pc = __webpack_require__(13);
var predictionContextFromRuleContext = pc.predictionContextFromRuleContext;
var PredictionContext = pc.PredictionContext;
var SingletonPredictionContext = pc.SingletonPredictionContext;

function LL1Analyzer (atn) {
    this.atn = atn;
}

//* Special value added to the lookahead sets to indicate that we hit
//  a predicate during analysis if {@code seeThruPreds==false}.
///
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;


//*
// Calculates the SLL(1) expected lookahead set for each outgoing transition
// of an {@link ATNState}. The returned array has one element for each
// outgoing transition in {@code s}. If the closure from transition
// <em>i</em> leads to a semantic predicate before matching a symbol, the
// element at index <em>i</em> of the result will be {@code null}.
//
// @param s the ATN state
// @return the expected symbols for each outgoing transition of {@code s}.
///
LL1Analyzer.prototype.getDecisionLookahead = function(s) {
    if (s === null) {
        return null;
    }
    var count = s.transitions.length;
    var look = [];
    for(var alt=0; alt< count; alt++) {
        look[alt] = new IntervalSet();
        var lookBusy = new Set();
        var seeThruPreds = false; // fail to get lookahead upon pred
        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
              look[alt], lookBusy, new BitSet(), seeThruPreds, false);
        // Wipe out lookahead for this alternative if we found nothing
        // or we had a predicate when we !seeThruPreds
        if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
            look[alt] = null;
        }
    }
    return look;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and the end of the rule containing
// {@code s} is reached, {@link Token//EPSILON} is added to the result set.
// If {@code ctx} is not {@code null} and the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx the complete parser context, or {@code null} if the context
// should be ignored
//
// @return The set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
///
LL1Analyzer.prototype.LOOK = function(s, stopState, ctx) {
    var r = new IntervalSet();
    var seeThruPreds = true; // ignore preds; get all lookahead
	ctx = ctx || null;
    var lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
    return r;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
// rule containing {@code s} is reached, {@link Token//EPSILON} is added to
// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
// {@code true} and {@code stopState} or the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state.
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx The outer context, or {@code null} if the outer context should
// not be used.
// @param look The result lookahead set.
// @param lookBusy A set used for preventing epsilon closures in the ATN
// from causing a stack overflow. Outside code should pass
// {@code new Set<ATNConfig>} for this argument.
// @param calledRuleStack A set used for preventing left recursion in the
// ATN from causing a stack overflow. Outside code should pass
// {@code new BitSet()} for this argument.
// @param seeThruPreds {@code true} to true semantic predicates as
// implicitly {@code true} and "see through them", otherwise {@code false}
// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
// result if one is encountered.
// @param addEOF Add {@link Token//EOF} to the result if the end of the
// outermost context is reached. This parameter has no effect if {@code ctx}
// is {@code null}.
///
LL1Analyzer.prototype._LOOK = function(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
    var c = new ATNConfig({state:s, alt:0, context: ctx}, null);
    if (lookBusy.contains(c)) {
        return;
    }
    lookBusy.add(c);
    if (s === stopState) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
    }
    if (s instanceof RuleStopState ) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
        if (ctx !== PredictionContext.EMPTY) {
            // run thru all possible stack tops in ctx
            for(var i=0; i<ctx.length; i++) {
                var returnState = this.atn.states[ctx.getReturnState(i)];
                var removed = calledRuleStack.contains(returnState.ruleIndex);
                try {
                    calledRuleStack.remove(returnState.ruleIndex);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    if (removed) {
                        calledRuleStack.add(returnState.ruleIndex);
                    }
                }
            }
            return;
        }
    }
    for(var j=0; j<s.transitions.length; j++) {
        var t = s.transitions[j];
        if (t.constructor === RuleTransition) {
            if (calledRuleStack.contains(t.target.ruleIndex)) {
                continue;
            }
            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
            try {
                calledRuleStack.add(t.target.ruleIndex);
                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } finally {
                calledRuleStack.remove(t.target.ruleIndex);
            }
        } else if (t instanceof AbstractPredicateTransition ) {
            if (seeThruPreds) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else {
                look.addOne(LL1Analyzer.HIT_PRED);
            }
        } else if( t.isEpsilon) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === WildcardTransition) {
            look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
        } else {
            var set = t.label;
            if (set !== null) {
                if (t instanceof NotSetTransition) {
                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                }
                look.addSet(set);
            }
        }
    }
};

exports.LL1Analyzer = LL1Analyzer;



/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = __webpack_require__(4).Token;
var ParseTreeListener = __webpack_require__(12).ParseTreeListener;
var Recognizer = __webpack_require__(77).Recognizer;
var DefaultErrorStrategy = __webpack_require__(83).DefaultErrorStrategy;
var ATNDeserializer = __webpack_require__(79).ATNDeserializer;
var ATNDeserializationOptions = __webpack_require__(78).ATNDeserializationOptions;
var TerminalNode = __webpack_require__(12).TerminalNode;
var ErrorNode = __webpack_require__(12).ErrorNode;

function TraceListener(parser) {
	ParseTreeListener.call(this);
    this.parser = parser;
	return this;
}

TraceListener.prototype = Object.create(ParseTreeListener);
TraceListener.prototype.constructor = TraceListener;

TraceListener.prototype.enterEveryRule = function(ctx) {
	console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

TraceListener.prototype.visitTerminal = function( node) {
	console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
};

TraceListener.prototype.exitEveryRule = function(ctx) {
	console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

// this is all the parsing support code essentially; most of it is error
// recovery stuff.//
function Parser(input) {
	Recognizer.call(this);
	// The input stream.
	this._input = null;
	// The error handling strategy for the parser. The default value is a new
	// instance of {@link DefaultErrorStrategy}.
	this._errHandler = new DefaultErrorStrategy();
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	// The {@link ParserRuleContext} object for the currently executing rule.
	// this is always non-null during the parsing process.
	this._ctx = null;
	// Specifies whether or not the parser should construct a parse tree during
	// the parsing process. The default value is {@code true}.
	this.buildParseTrees = true;
	// When {@link //setTrace}{@code (true)} is called, a reference to the
	// {@link TraceListener} is stored here so it can be easily removed in a
	// later call to {@link //setTrace}{@code (false)}. The listener itself is
	// implemented as a parser listener so this field is not directly used by
	// other parser methods.
	this._tracer = null;
	// The list of {@link ParseTreeListener} listeners registered to receive
	// events during the parse.
	this._parseListeners = null;
	// The number of syntax errors reported during parsing. this value is
	// incremented each time {@link //notifyErrorListeners} is called.
	this._syntaxErrors = 0;
	this.setInputStream(input);
	return this;
}

Parser.prototype = Object.create(Recognizer.prototype);
Parser.prototype.contructor = Parser;

// this field maps from the serialized ATN string to the deserialized {@link
// ATN} with
// bypass alternatives.
//
// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
//
Parser.bypassAltsAtnCache = {};

// reset the parser's state//
Parser.prototype.reset = function() {
	if (this._input !== null) {
		this._input.seek(0);
	}
	this._errHandler.reset(this);
	this._ctx = null;
	this._syntaxErrors = 0;
	this.setTrace(false);
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	if (this._interp !== null) {
		this._interp.reset();
	}
};

// Match current input symbol against {@code ttype}. If the symbol type
// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
// called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @param ttype the token type to match
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// {@code ttype} and the error strategy could not recover from the
// mismatched symbol

Parser.prototype.match = function(ttype) {
	var t = this.getCurrentToken();
	if (t.type === ttype) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this.buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};
// Match current input symbol as a wildcard. If the symbol type matches
// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
// and {@link //consume} are called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// a wildcard and the error strategy could not recover from the mismatched
// symbol

Parser.prototype.matchWildcard = function() {
	var t = this.getCurrentToken();
	if (t.type > 0) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this._buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};

Parser.prototype.getParseListeners = function() {
	return this._parseListeners || [];
};

// Registers {@code listener} to receive events during the parsing process.
//
// <p>To support output-preserving grammar transformations (including but not
// limited to left-recursion removal, automated left-factoring, and
// optimized code generation), calls to listener methods during the parse
// may differ substantially from calls made by
// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
// particular, rule entry and exit events may occur in a different order
// during the parse than after the parser. In addition, calls to certain
// rule entry methods may be omitted.</p>
//
// <p>With the following specific exceptions, calls to listener events are
// <em>deterministic</em>, i.e. for identical input the calls to listener
// methods will be the same.</p>
//
// <ul>
// <li>Alterations to the grammar used to generate code may change the
// behavior of the listener calls.</li>
// <li>Alterations to the command line options passed to ANTLR 4 when
// generating the parser may change the behavior of the listener calls.</li>
// <li>Changing the version of the ANTLR Tool used to generate the parser
// may change the behavior of the listener calls.</li>
// </ul>
//
// @param listener the listener to add
//
// @throws NullPointerException if {@code} listener is {@code null}
//
Parser.prototype.addParseListener = function(listener) {
	if (listener === null) {
		throw "listener";
	}
	if (this._parseListeners === null) {
		this._parseListeners = [];
	}
	this._parseListeners.push(listener);
};

//
// Remove {@code listener} from the list of parse listeners.
//
// <p>If {@code listener} is {@code null} or has not been added as a parse
// listener, this method does nothing.</p>
// @param listener the listener to remove
//
Parser.prototype.removeParseListener = function(listener) {
	if (this._parseListeners !== null) {
		var idx = this._parseListeners.indexOf(listener);
		if (idx >= 0) {
			this._parseListeners.splice(idx, 1);
		}
		if (this._parseListeners.length === 0) {
			this._parseListeners = null;
		}
	}
};

// Remove all parse listeners.
Parser.prototype.removeParseListeners = function() {
	this._parseListeners = null;
};

// Notify any parse listeners of an enter rule event.
Parser.prototype.triggerEnterRuleEvent = function() {
	if (this._parseListeners !== null) {
        var ctx = this._ctx;
		this._parseListeners.map(function(listener) {
			listener.enterEveryRule(ctx);
			ctx.enterRule(listener);
		});
	}
};

//
// Notify any parse listeners of an exit rule event.
//
// @see //addParseListener
//
Parser.prototype.triggerExitRuleEvent = function() {
	if (this._parseListeners !== null) {
		// reverse order walk of listeners
        var ctx = this._ctx;
		this._parseListeners.slice(0).reverse().map(function(listener) {
			ctx.exitRule(listener);
			listener.exitEveryRule(ctx);
		});
	}
};

Parser.prototype.getTokenFactory = function() {
	return this._input.tokenSource._factory;
};

// Tell our token source and error strategy about a new way to create tokens.//
Parser.prototype.setTokenFactory = function(factory) {
	this._input.tokenSource._factory = factory;
};

// The ATN with bypass alternatives is expensive to create so we create it
// lazily.
//
// @throws UnsupportedOperationException if the current parser does not
// implement the {@link //getSerializedATN()} method.
//
Parser.prototype.getATNWithBypassAlts = function() {
	var serializedAtn = this.getSerializedATN();
	if (serializedAtn === null) {
		throw "The current parser does not support an ATN with bypass alternatives.";
	}
	var result = this.bypassAltsAtnCache[serializedAtn];
	if (result === null) {
		var deserializationOptions = new ATNDeserializationOptions();
		deserializationOptions.generateRuleBypassTransitions = true;
		result = new ATNDeserializer(deserializationOptions)
				.deserialize(serializedAtn);
		this.bypassAltsAtnCache[serializedAtn] = result;
	}
	return result;
};

// The preferred method of getting a tree pattern. For example, here's a
// sample use:
//
// <pre>
// ParseTree t = parser.expr();
// ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
// MyParser.RULE_expr);
// ParseTreeMatch m = p.match(t);
// String id = m.get("ID");
// </pre>

var Lexer = __webpack_require__(32).Lexer;

Parser.prototype.compileParseTreePattern = function(pattern, patternRuleIndex, lexer) {
	lexer = lexer || null;
	if (lexer === null) {
		if (this.getTokenStream() !== null) {
			var tokenSource = this.getTokenStream().tokenSource;
			if (tokenSource instanceof Lexer) {
				lexer = tokenSource;
			}
		}
	}
	if (lexer === null) {
		throw "Parser can't discover a lexer to use";
	}
	var m = new ParseTreePatternMatcher(lexer, this);
	return m.compile(pattern, patternRuleIndex);
};

Parser.prototype.getInputStream = function() {
	return this.getTokenStream();
};

Parser.prototype.setInputStream = function(input) {
	this.setTokenStream(input);
};

Parser.prototype.getTokenStream = function() {
	return this._input;
};

// Set the token stream and reset the parser.//
Parser.prototype.setTokenStream = function(input) {
	this._input = null;
	this.reset();
	this._input = input;
};

// Match needs to return the current input symbol, which gets put
// into the label for the associated token ref; e.g., x=ID.
//
Parser.prototype.getCurrentToken = function() {
	return this._input.LT(1);
};

Parser.prototype.notifyErrorListeners = function(msg, offendingToken, err) {
	offendingToken = offendingToken || null;
	err = err || null;
	if (offendingToken === null) {
		offendingToken = this.getCurrentToken();
	}
	this._syntaxErrors += 1;
	var line = offendingToken.line;
	var column = offendingToken.column;
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, offendingToken, line, column, msg, err);
};

//
// Consume and return the {@linkplain //getCurrentToken current symbol}.
//
// <p>E.g., given the following input with {@code A} being the current
// lookahead symbol, this function moves the cursor to {@code B} and returns
// {@code A}.</p>
//
// <pre>
// A B
// ^
// </pre>
//
// If the parser is not in error recovery mode, the consumed symbol is added
// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
// If the parser <em>is</em> in error recovery mode, the consumed symbol is
// added to the parse tree using
// {@link ParserRuleContext//addErrorNode(Token)}, and
// {@link ParseTreeListener//visitErrorNode} is called on any parse
// listeners.
//
Parser.prototype.consume = function() {
	var o = this.getCurrentToken();
	if (o.type !== Token.EOF) {
		this.getInputStream().consume();
	}
	var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
	if (this.buildParseTrees || hasListener) {
		var node;
		if (this._errHandler.inErrorRecoveryMode(this)) {
			node = this._ctx.addErrorNode(o);
		} else {
			node = this._ctx.addTokenNode(o);
		}
        node.invokingState = this.state;
		if (hasListener) {
			this._parseListeners.map(function(listener) {
				if (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {
					listener.visitErrorNode(node);
				} else if (node instanceof TerminalNode) {
					listener.visitTerminal(node);
				}
			});
		}
	}
	return o;
};

Parser.prototype.addContextToParseTree = function() {
	// add current context to parent if we have a parent
	if (this._ctx.parentCtx !== null) {
		this._ctx.parentCtx.addChild(this._ctx);
	}
};

// Always called by generated parsers upon entry to a rule. Access field
// {@link //_ctx} get the current context.

Parser.prototype.enterRule = function(localctx, state, ruleIndex) {
	this.state = state;
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this.buildParseTrees) {
		this.addContextToParseTree();
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent();
	}
};

Parser.prototype.exitRule = function() {
	this._ctx.stop = this._input.LT(-1);
	// trigger event on _ctx, before it reverts to parent
	if (this._parseListeners !== null) {
		this.triggerExitRuleEvent();
	}
	this.state = this._ctx.invokingState;
	this._ctx = this._ctx.parentCtx;
};

Parser.prototype.enterOuterAlt = function(localctx, altNum) {
   	localctx.setAltNumber(altNum);
	// if we have new localctx, make sure we replace existing ctx
	// that is previous child of parse tree
	if (this.buildParseTrees && this._ctx !== localctx) {
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.removeLastChild();
			this._ctx.parentCtx.addChild(localctx);
		}
	}
	this._ctx = localctx;
};

// Get the precedence level for the top-most precedence rule.
//
// @return The precedence level for the top-most precedence rule, or -1 if
// the parser context is not nested within a precedence rule.

Parser.prototype.getPrecedence = function() {
	if (this._precedenceStack.length === 0) {
		return -1;
	} else {
		return this._precedenceStack[this._precedenceStack.length-1];
	}
};

Parser.prototype.enterRecursionRule = function(localctx, state, ruleIndex,
		precedence) {
	this.state = state;
	this._precedenceStack.push(precedence);
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

//
// Like {@link //enterRule} but for recursive rules.

Parser.prototype.pushNewRecursionContext = function(localctx, state, ruleIndex) {
	var previous = this._ctx;
	previous.parentCtx = localctx;
	previous.invokingState = state;
	previous.stop = this._input.LT(-1);

	this._ctx = localctx;
	this._ctx.start = previous.start;
	if (this.buildParseTrees) {
		this._ctx.addChild(previous);
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

Parser.prototype.unrollRecursionContexts = function(parentCtx) {
	this._precedenceStack.pop();
	this._ctx.stop = this._input.LT(-1);
	var retCtx = this._ctx; // save current ctx (return value)
	// unroll so _ctx is as it was before call to recursive method
	if (this._parseListeners !== null) {
		while (this._ctx !== parentCtx) {
			this.triggerExitRuleEvent();
			this._ctx = this._ctx.parentCtx;
		}
	} else {
		this._ctx = parentCtx;
	}
	// hook into tree
	retCtx.parentCtx = parentCtx;
	if (this.buildParseTrees && parentCtx !== null) {
		// add return ctx into invoking rule's tree
		parentCtx.addChild(retCtx);
	}
};

Parser.prototype.getInvokingContext = function(ruleIndex) {
	var ctx = this._ctx;
	while (ctx !== null) {
		if (ctx.ruleIndex === ruleIndex) {
			return ctx;
		}
		ctx = ctx.parentCtx;
	}
	return null;
};

Parser.prototype.precpred = function(localctx, precedence) {
	return precedence >= this._precedenceStack[this._precedenceStack.length-1];
};

Parser.prototype.inContext = function(context) {
	// TODO: useful in parser?
	return false;
};

//
// Checks whether or not {@code symbol} can follow the current state in the
// ATN. The behavior of this method is equivalent to the following, but is
// implemented such that the complete context-sensitive follow set does not
// need to be explicitly constructed.
//
// <pre>
// return getExpectedTokens().contains(symbol);
// </pre>
//
// @param symbol the symbol type to check
// @return {@code true} if {@code symbol} can follow the current state in
// the ATN, otherwise {@code false}.

Parser.prototype.isExpectedToken = function(symbol) {
	var atn = this._interp.atn;
	var ctx = this._ctx;
	var s = atn.states[this.state];
	var following = atn.nextTokens(s);
	if (following.contains(symbol)) {
		return true;
	}
	if (!following.contains(Token.EPSILON)) {
		return false;
	}
	while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
		var invokingState = atn.states[ctx.invokingState];
		var rt = invokingState.transitions[0];
		following = atn.nextTokens(rt.followState);
		if (following.contains(symbol)) {
			return true;
		}
		ctx = ctx.parentCtx;
	}
	if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
		return true;
	} else {
		return false;
	}
};

// Computes the set of input symbols which could follow the current parser
// state and context, as given by {@link //getState} and {@link //getContext},
// respectively.
//
// @see ATN//getExpectedTokens(int, RuleContext)
//
Parser.prototype.getExpectedTokens = function() {
	return this._interp.atn.getExpectedTokens(this.state, this._ctx);
};

Parser.prototype.getExpectedTokensWithinCurrentRule = function() {
	var atn = this._interp.atn;
	var s = atn.states[this.state];
	return atn.nextTokens(s);
};

// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//
Parser.prototype.getRuleIndex = function(ruleName) {
	var ruleIndex = this.getRuleIndexMap()[ruleName];
	if (ruleIndex !== null) {
		return ruleIndex;
	} else {
		return -1;
	}
};

// Return List&lt;String&gt; of the rule names in your parser instance
// leading up to a call to the current rule. You could override if
// you want more details such as the file/line info of where
// in the ATN a rule is invoked.
//
// this is very useful for error messages.
//
Parser.prototype.getRuleInvocationStack = function(p) {
	p = p || null;
	if (p === null) {
		p = this._ctx;
	}
	var stack = [];
	while (p !== null) {
		// compute what follows who invoked us
		var ruleIndex = p.ruleIndex;
		if (ruleIndex < 0) {
			stack.push("n/a");
		} else {
			stack.push(this.ruleNames[ruleIndex]);
		}
		p = p.parentCtx;
	}
	return stack;
};

// For debugging and other purposes.//
Parser.prototype.getDFAStrings = function() {
	return this._interp.decisionToDFA.toString();
};
// For debugging and other purposes.//
Parser.prototype.dumpDFA = function() {
	var seenOne = false;
	for (var i = 0; i < this._interp.decisionToDFA.length; i++) {
		var dfa = this._interp.decisionToDFA[i];
		if (dfa.states.length > 0) {
			if (seenOne) {
				console.log();
			}
			this.printer.println("Decision " + dfa.decision + ":");
			this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
			seenOne = true;
		}
	}
};

/*
"			printer = function() {\r\n" +
"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
"			};\r\n" +
*/

Parser.prototype.getSourceName = function() {
	return this._input.sourceName;
};

// During a parse is sometimes useful to listen in on the rule entry and exit
// events as well as token matches. this is for quick and dirty debugging.
//
Parser.prototype.setTrace = function(trace) {
	if (!trace) {
		this.removeParseListener(this._tracer);
		this._tracer = null;
	} else {
		if (this._tracer !== null) {
			this.removeParseListener(this._tracer);
		}
		this._tracer = new TraceListener(this);
		this.addParseListener(this._tracer);
	}
};

exports.Parser = Parser;

/***/ }),
/* 158 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents the type of recognizer an ATN applies to.

function ATNType() {

}

ATNType.LEXER = 0;
ATNType.PARSER = 1;

exports.ATNType = ATNType;



/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// When we hit an accept state in either the DFA or the ATN, we
//  have to notify the character stream to start buffering characters
//  via {@link IntStream//mark} and record the current state. The current sim state
//  includes the current index into the input, the current line,
//  and current character position in that line. Note that the Lexer is
//  tracking the starting line and characterization of the token. These
//  variables track the "state" of the simulator when it hits an accept state.
//
//  <p>We track these variables separately for the DFA and ATN simulation
//  because the DFA simulation often has to fail over to the ATN
//  simulation. If the ATN simulation fails, we need the DFA to fall
//  back to its previously accepted state, if any. If the ATN succeeds,
//  then the ATN does the accept and the DFA simulator that invoked it
//  can simply return the predicted token type.</p>
///

var Token = __webpack_require__(4).Token;
var Lexer = __webpack_require__(32).Lexer;
var ATN = __webpack_require__(15).ATN;
var ATNSimulator = __webpack_require__(80).ATNSimulator;
var DFAState = __webpack_require__(24).DFAState;
var ATNConfigSet = __webpack_require__(20).ATNConfigSet;
var OrderedATNConfigSet = __webpack_require__(20).OrderedATNConfigSet;
var PredictionContext = __webpack_require__(13).PredictionContext;
var SingletonPredictionContext = __webpack_require__(13).SingletonPredictionContext;
var RuleStopState = __webpack_require__(10).RuleStopState;
var LexerATNConfig = __webpack_require__(34).LexerATNConfig;
var Transition = __webpack_require__(16).Transition;
var LexerActionExecutor = __webpack_require__(160).LexerActionExecutor;
var LexerNoViableAltException = __webpack_require__(11).LexerNoViableAltException;

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

function SimState() {
	resetSimState(this);
	return this;
}

SimState.prototype.reset = function() {
	resetSimState(this);
};

function LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
	this.decisionToDFA = decisionToDFA;
	this.recog = recog;
	// The current token's starting index into the character stream.
	// Shared across DFA to ATN simulation in case the ATN fails and the
	// DFA did not have a previous accept state. In this case, we use the
	// ATN-generated exception object.
	this.startIndex = -1;
	// line number 1..n within the input///
	this.line = 1;
	// The index of the character relative to the beginning of the line
	// 0..n-1///
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
	// Used during DFA/ATN exec to record the most recent accept configuration
	// info
	this.prevAccept = new SimState();
	// done
	return this;
}

LexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);
LexerATNSimulator.prototype.constructor = LexerATNSimulator;

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

LexerATNSimulator.prototype.copyState = function(simulator) {
	this.column = simulator.column;
	this.line = simulator.line;
	this.mode = simulator.mode;
	this.startIndex = simulator.startIndex;
};

LexerATNSimulator.prototype.match = function(input, mode) {
	this.match_calls += 1;
	this.mode = mode;
	var mark = input.mark();
	try {
		this.startIndex = input.index;
		this.prevAccept.reset();
		var dfa = this.decisionToDFA[mode];
		if (dfa.s0 === null) {
			return this.matchATN(input);
		} else {
			return this.execATN(input, dfa.s0);
		}
	} finally {
		input.release(mark);
	}
};

LexerATNSimulator.prototype.reset = function() {
	this.prevAccept.reset();
	this.startIndex = -1;
	this.line = 1;
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
};

LexerATNSimulator.prototype.matchATN = function(input) {
	var startState = this.atn.modeToStartState[this.mode];

	if (LexerATNSimulator.debug) {
		console.log("matchATN mode " + this.mode + " start: " + startState);
	}
	var old_mode = this.mode;
	var s0_closure = this.computeStartState(input, startState);
	var suppressEdge = s0_closure.hasSemanticContext;
	s0_closure.hasSemanticContext = false;

	var next = this.addDFAState(s0_closure);
	if (!suppressEdge) {
		this.decisionToDFA[this.mode].s0 = next;
	}

	var predict = this.execATN(input, next);

	if (LexerATNSimulator.debug) {
		console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
	}
	return predict;
};

LexerATNSimulator.prototype.execATN = function(input, ds0) {
	if (LexerATNSimulator.debug) {
		console.log("start state closure=" + ds0.configs);
	}
	if (ds0.isAcceptState) {
		// allow zero-length tokens
		this.captureSimState(this.prevAccept, input, ds0);
	}
	var t = input.LA(1);
	var s = ds0; // s is current/from DFA state

	while (true) { // while more work
		if (LexerATNSimulator.debug) {
			console.log("execATN loop starting closure: " + s.configs);
		}

		// As we move src->trg, src->trg, we keep track of the previous trg to
		// avoid looking up the DFA state again, which is expensive.
		// If the previous target was already part of the DFA, we might
		// be able to avoid doing a reach operation upon t. If s!=null,
		// it means that semantic predicates didn't prevent us from
		// creating a DFA state. Once we know s!=null, we check to see if
		// the DFA state has an edge already for t. If so, we can just reuse
		// it's configuration set; there's no point in re-computing it.
		// This is kind of like doing DFA simulation within the ATN
		// simulation because DFA simulation is really just a way to avoid
		// computing reach/closure sets. Technically, once we know that
		// we have a previously added DFA state, we could jump over to
		// the DFA simulator. But, that would mean popping back and forth
		// a lot and making things more complicated algorithmically.
		// This optimization makes a lot of sense for loops within DFA.
		// A character will take us back to an existing DFA state
		// that already has lots of edges out of it. e.g., .* in comments.
		// print("Target for:" + str(s) + " and:" + str(t))
		var target = this.getExistingTargetState(s, t);
		// print("Existing:" + str(target))
		if (target === null) {
			target = this.computeTargetState(input, s, t);
			// print("Computed:" + str(target))
		}
		if (target === ATNSimulator.ERROR) {
			break;
		}
		// If this is a consumable input element, make sure to consume before
		// capturing the accept state so the input index, line, and char
		// position accurately reflect the state of the interpreter at the
		// end of the token.
		if (t !== Token.EOF) {
			this.consume(input);
		}
		if (target.isAcceptState) {
			this.captureSimState(this.prevAccept, input, target);
			if (t === Token.EOF) {
				break;
			}
		}
		t = input.LA(1);
		s = target; // flip; current DFA target becomes new src/from state
	}
	return this.failOrAccept(this.prevAccept, input, s.configs, t);
};

// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param s The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
LexerATNSimulator.prototype.getExistingTargetState = function(s, t) {
	if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
		return null;
	}

	var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
	if(target===undefined) {
		target = null;
	}
	if (LexerATNSimulator.debug && target !== null) {
		console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
	}
	return target;
};

// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param input The input stream
// @param s The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
LexerATNSimulator.prototype.computeTargetState = function(input, s, t) {
	var reach = new OrderedATNConfigSet();
	// if we don't find an existing DFA state
	// Fill reach starting from closure, following t transitions
	this.getReachableConfigSet(input, s.configs, reach, t);

	if (reach.items.length === 0) { // we got nowhere on t from s
		if (!reach.hasSemanticContext) {
			// we got nowhere on t, don't throw out this knowledge; it'd
			// cause a failover from DFA later.
			this.addDFAEdge(s, t, ATNSimulator.ERROR);
		}
		// stop when we can't match any more char
		return ATNSimulator.ERROR;
	}
	// Add an edge from s to target DFA found/created for reach
	return this.addDFAEdge(s, t, null, reach);
};

LexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) {
	if (this.prevAccept.dfaState !== null) {
		var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
		this.accept(input, lexerActionExecutor, this.startIndex,
				prevAccept.index, prevAccept.line, prevAccept.column);
		return prevAccept.dfaState.prediction;
	} else {
		// if no accept and EOF is first char, return EOF
		if (t === Token.EOF && input.index === this.startIndex) {
			return Token.EOF;
		}
		throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
	}
};

// Given a starting configuration set, figure out all ATN configurations
// we can reach upon input {@code t}. Parameter {@code reach} is a return
// parameter.
LexerATNSimulator.prototype.getReachableConfigSet = function(input, closure,
		reach, t) {
	// this is used to skip processing for configs which have a lower priority
	// than a config that already reached an accept state for the same rule
	var skipAlt = ATN.INVALID_ALT_NUMBER;
	for (var i = 0; i < closure.items.length; i++) {
		var cfg = closure.items[i];
		var currentAltReachedAcceptState = (cfg.alt === skipAlt);
		if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
			continue;
		}
		if (LexerATNSimulator.debug) {
			console.log("testing %s at %s\n", this.getTokenName(t), cfg
					.toString(this.recog, true));
		}
		for (var j = 0; j < cfg.state.transitions.length; j++) {
			var trans = cfg.state.transitions[j]; // for each transition
			var target = this.getReachableTarget(trans, t);
			if (target !== null) {
				var lexerActionExecutor = cfg.lexerActionExecutor;
				if (lexerActionExecutor !== null) {
					lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
				}
				var treatEofAsEpsilon = (t === Token.EOF);
				var config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
				if (this.closure(input, config, reach,
						currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
					// any remaining configs for this alt have a lower priority
					// than the one that just reached an accept state.
					skipAlt = cfg.alt;
				}
			}
		}
	}
};

LexerATNSimulator.prototype.accept = function(input, lexerActionExecutor,
		startIndex, index, line, charPos) {
	if (LexerATNSimulator.debug) {
		console.log("ACTION %s\n", lexerActionExecutor);
	}
	// seek to after last char in token
	input.seek(index);
	this.line = line;
	this.column = charPos;
	if (lexerActionExecutor !== null && this.recog !== null) {
		lexerActionExecutor.execute(this.recog, input, startIndex);
	}
};

LexerATNSimulator.prototype.getReachableTarget = function(trans, t) {
	if (trans.matches(t, 0, 0xFFFE)) {
		return trans.target;
	} else {
		return null;
	}
};

LexerATNSimulator.prototype.computeStartState = function(input, p) {
	var initialContext = PredictionContext.EMPTY;
	var configs = new OrderedATNConfigSet();
	for (var i = 0; i < p.transitions.length; i++) {
		var target = p.transitions[i].target;
        var cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
		this.closure(input, cfg, configs, false, false, false);
	}
	return configs;
};

// Since the alternatives within any lexer decision are ordered by
// preference, this method stops pursuing the closure as soon as an accept
// state is reached. After the first accept state is reached by depth-first
// search from {@code config}, all other (potentially reachable) states for
// this rule would have a lower priority.
//
// @return {@code true} if an accept state is reached, otherwise
// {@code false}.
LexerATNSimulator.prototype.closure = function(input, config, configs,
		currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (LexerATNSimulator.debug) {
		console.log("closure(" + config.toString(this.recog, true) + ")");
	}
	if (config.state instanceof RuleStopState) {
		if (LexerATNSimulator.debug) {
			if (this.recog !== null) {
				console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
			} else {
				console.log("closure at rule stop %s\n", config);
			}
		}
		if (config.context === null || config.context.hasEmptyPath()) {
			if (config.context === null || config.context.isEmpty()) {
				configs.add(config);
				return true;
			} else {
				configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
				currentAltReachedAcceptState = true;
			}
		}
		if (config.context !== null && !config.context.isEmpty()) {
			for (var i = 0; i < config.context.length; i++) {
				if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
					var newContext = config.context.getParent(i); // "pop" return state
					var returnState = this.atn.states[config.context.getReturnState(i)];
					cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
					currentAltReachedAcceptState = this.closure(input, cfg,
							configs, currentAltReachedAcceptState, speculative,
							treatEofAsEpsilon);
				}
			}
		}
		return currentAltReachedAcceptState;
	}
	// optimization
	if (!config.state.epsilonOnlyTransitions) {
		if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
			configs.add(config);
		}
	}
	for (var j = 0; j < config.state.transitions.length; j++) {
		var trans = config.state.transitions[j];
		cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
		if (cfg !== null) {
			currentAltReachedAcceptState = this.closure(input, cfg, configs,
					currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
		}
	}
	return currentAltReachedAcceptState;
};

// side-effect: can alter configs.hasSemanticContext
LexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans,
		configs, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (trans.serializationType === Transition.RULE) {
		var newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
		cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
	} else if (trans.serializationType === Transition.PRECEDENCE) {
		throw "Precedence predicates are not supported in lexers.";
	} else if (trans.serializationType === Transition.PREDICATE) {
		// Track traversing semantic predicates. If we traverse,
		// we cannot add a DFA state for this "reach" computation
		// because the DFA would not test the predicate again in the
		// future. Rather than creating collections of semantic predicates
		// like v3 and testing them on prediction, v4 will test them on the
		// fly all the time using the ATN not the DFA. This is slower but
		// semantically it's not used that often. One of the key elements to
		// this predicate mechanism is not adding DFA states that see
		// predicates immediately afterwards in the ATN. For example,

		// a : ID {p1}? | ID {p2}? ;

		// should create the start state for rule 'a' (to save start state
		// competition), but should not create target of ID state. The
		// collection of ATN states the following ID references includes
		// states reached by traversing predicates. Since this is when we
		// test them, we cannot cash the DFA state target of ID.

		if (LexerATNSimulator.debug) {
			console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
		}
		configs.hasSemanticContext = true;
		if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.ACTION) {
		if (config.context === null || config.context.hasEmptyPath()) {
			// execute actions anywhere in the start rule for a token.
			//
			// TODO: if the entry rule is invoked recursively, some
			// actions may be executed during the recursive call. The
			// problem can appear when hasEmptyPath() is true but
			// isEmpty() is false. In this case, the config needs to be
			// split into two contexts - one with just the empty path
			// and another with everything but the empty path.
			// Unfortunately, the current algorithm does not allow
			// getEpsilonTarget to return two configurations, so
			// additional modifications are needed before we can support
			// the split operation.
			var lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
					this.atn.lexerActions[trans.actionIndex]);
			cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
		} else {
			// ignore actions in referenced rules
			cfg = new LexerATNConfig( { state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.EPSILON) {
		cfg = new LexerATNConfig({ state:trans.target}, config);
	} else if (trans.serializationType === Transition.ATOM ||
				trans.serializationType === Transition.RANGE ||
				trans.serializationType === Transition.SET) {
		if (treatEofAsEpsilon) {
			if (trans.matches(Token.EOF, 0, 0xFFFF)) {
				cfg = new LexerATNConfig( { state:trans.target }, config);
			}
		}
	}
	return cfg;
};

// Evaluate a predicate specified in the lexer.
//
// <p>If {@code speculative} is {@code true}, this method was called before
// {@link //consume} for the matched character. This method should call
// {@link //consume} before evaluating the predicate to ensure position
// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
// and {@link Lexer//getcolumn}, properly reflect the current
// lexer state. This method should restore {@code input} and the simulator
// to the original state before returning (i.e. undo the actions made by the
// call to {@link //consume}.</p>
//
// @param input The input stream.
// @param ruleIndex The rule containing the predicate.
// @param predIndex The index of the predicate within the rule.
// @param speculative {@code true} if the current index in {@code input} is
// one character before the predicate's location.
//
// @return {@code true} if the specified predicate evaluates to
// {@code true}.
// /
LexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex,
		predIndex, speculative) {
	// assume true if no recognizer was provided
	if (this.recog === null) {
		return true;
	}
	if (!speculative) {
		return this.recog.sempred(null, ruleIndex, predIndex);
	}
	var savedcolumn = this.column;
	var savedLine = this.line;
	var index = input.index;
	var marker = input.mark();
	try {
		this.consume(input);
		return this.recog.sempred(null, ruleIndex, predIndex);
	} finally {
		this.column = savedcolumn;
		this.line = savedLine;
		input.seek(index);
		input.release(marker);
	}
};

LexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) {
	settings.index = input.index;
	settings.line = this.line;
	settings.column = this.column;
	settings.dfaState = dfaState;
};

LexerATNSimulator.prototype.addDFAEdge = function(from_, tk, to, cfgs) {
	if (to === undefined) {
		to = null;
	}
	if (cfgs === undefined) {
		cfgs = null;
	}
	if (to === null && cfgs !== null) {
		// leading to this call, ATNConfigSet.hasSemanticContext is used as a
		// marker indicating dynamic predicate evaluation makes this edge
		// dependent on the specific input sequence, so the static edge in the
		// DFA should be omitted. The target DFAState is still created since
		// execATN has the ability to resynchronize with the DFA state cache
		// following the predicate evaluation step.
		//
		// TJP notes: next time through the DFA, we see a pred again and eval.
		// If that gets us to a previously created (but dangling) DFA
		// state, we can continue in pure DFA mode from there.
		// /
		var suppressEdge = cfgs.hasSemanticContext;
		cfgs.hasSemanticContext = false;

		to = this.addDFAState(cfgs);

		if (suppressEdge) {
			return to;
		}
	}
	// add the edge
	if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
		// Only track edges within the DFA bounds
		return to;
	}
	if (LexerATNSimulator.debug) {
		console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
	}
	if (from_.edges === null) {
		// make room for tokens 1..n and -1 masquerading as index 0
		from_.edges = [];
	}
	from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

	return to;
};

// Add a new DFA state if there isn't one with this set of
// configurations already. This method also detects the first
// configuration containing an ATN rule stop state. Later, when
// traversing the DFA, we will know which rule to accept.
LexerATNSimulator.prototype.addDFAState = function(configs) {
	var proposed = new DFAState(null, configs);
	var firstConfigWithRuleStopState = null;
	for (var i = 0; i < configs.items.length; i++) {
		var cfg = configs.items[i];
		if (cfg.state instanceof RuleStopState) {
			firstConfigWithRuleStopState = cfg;
			break;
		}
	}
	if (firstConfigWithRuleStopState !== null) {
		proposed.isAcceptState = true;
		proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
		proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
	}
	var dfa = this.decisionToDFA[this.mode];
	var existing = dfa.states.get(proposed);
	if (existing!==null) {
		return existing;
	}
	var newState = proposed;
	newState.stateNumber = dfa.states.length;
	configs.setReadonly(true);
	newState.configs = configs;
	dfa.states.add(newState);
	return newState;
};

LexerATNSimulator.prototype.getDFA = function(mode) {
	return this.decisionToDFA[mode];
};

// Get the text matched so far for the current token.
LexerATNSimulator.prototype.getText = function(input) {
	// index is first lookahead char, don't include.
	return input.getText(this.startIndex, input.index - 1);
};

LexerATNSimulator.prototype.consume = function(input) {
	var curChar = input.LA(1);
	if (curChar === "\n".charCodeAt(0)) {
		this.line += 1;
		this.column = 0;
	} else {
		this.column += 1;
	}
	input.consume();
};

LexerATNSimulator.prototype.getTokenName = function(tt) {
	if (tt === -1) {
		return "EOF";
	} else {
		return "'" + String.fromCharCode(tt) + "'";
	}
};

exports.LexerATNSimulator = LexerATNSimulator;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents an executor for a sequence of lexer actions which traversed during
// the matching operation of a lexer rule (token).
//
// <p>The executor tracks position information for position-dependent lexer actions
// efficiently, ensuring that actions appearing only at the end of the rule do
// not cause bloating of the {@link DFA} created for the lexer.</p>

var hashStuff = __webpack_require__(2).hashStuff;
var LexerIndexedCustomAction = __webpack_require__(81).LexerIndexedCustomAction;

function LexerActionExecutor(lexerActions) {
	this.lexerActions = lexerActions === null ? [] : lexerActions;
	// Caches the result of {@link //hashCode} since the hash code is an element
	// of the performance-critical {@link LexerATNConfig//hashCode} operation.
	this.cachedHashCode = hashStuff(lexerActions); // "".join([str(la) for la in
	// lexerActions]))
	return this;
}

// Creates a {@link LexerActionExecutor} which executes the actions for
// the input {@code lexerActionExecutor} followed by a specified
// {@code lexerAction}.
//
// @param lexerActionExecutor The executor for actions already traversed by
// the lexer while matching a token within a particular
// {@link LexerATNConfig}. If this is {@code null}, the method behaves as
// though it were an empty executor.
// @param lexerAction The lexer action to execute after the actions
// specified in {@code lexerActionExecutor}.
//
// @return A {@link LexerActionExecutor} for executing the combine actions
// of {@code lexerActionExecutor} and {@code lexerAction}.
LexerActionExecutor.append = function(lexerActionExecutor, lexerAction) {
	if (lexerActionExecutor === null) {
		return new LexerActionExecutor([ lexerAction ]);
	}
	var lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
	return new LexerActionExecutor(lexerActions);
};

// Creates a {@link LexerActionExecutor} which encodes the current offset
// for position-dependent lexer actions.
//
// <p>Normally, when the executor encounters lexer actions where
// {@link LexerAction//isPositionDependent} returns {@code true}, it calls
// {@link IntStream//seek} on the input {@link CharStream} to set the input
// position to the <em>end</em> of the current token. This behavior provides
// for efficient DFA representation of lexer actions which appear at the end
// of a lexer rule, even when the lexer rule matches a variable number of
// characters.</p>
//
// <p>Prior to traversing a match transition in the ATN, the current offset
// from the token start index is assigned to all position-dependent lexer
// actions which have not already been assigned a fixed offset. By storing
// the offsets relative to the token start index, the DFA representation of
// lexer actions which appear in the middle of tokens remains efficient due
// to sharing among tokens of the same length, regardless of their absolute
// position in the input stream.</p>
//
// <p>If the current executor already has offsets assigned to all
// position-dependent lexer actions, the method returns {@code this}.</p>
//
// @param offset The current offset to assign to all position-dependent
// lexer actions which do not already have offsets assigned.
//
// @return A {@link LexerActionExecutor} which stores input stream offsets
// for all position-dependent lexer actions.
// /
LexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) {
	var updatedLexerActions = null;
	for (var i = 0; i < this.lexerActions.length; i++) {
		if (this.lexerActions[i].isPositionDependent &&
				!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
			if (updatedLexerActions === null) {
				updatedLexerActions = this.lexerActions.concat([]);
			}
			updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
					this.lexerActions[i]);
		}
	}
	if (updatedLexerActions === null) {
		return this;
	} else {
		return new LexerActionExecutor(updatedLexerActions);
	}
};

// Execute the actions encapsulated by this executor within the context of a
// particular {@link Lexer}.
//
// <p>This method calls {@link IntStream//seek} to set the position of the
// {@code input} {@link CharStream} prior to calling
// {@link LexerAction//execute} on a position-dependent action. Before the
// method returns, the input position will be restored to the same position
// it was in when the method was invoked.</p>
//
// @param lexer The lexer instance.
// @param input The input stream which is the source for the current token.
// When this method is called, the current {@link IntStream//index} for
// {@code input} should be the start of the following token, i.e. 1
// character past the end of the current token.
// @param startIndex The token start index. This value may be passed to
// {@link IntStream//seek} to set the {@code input} position to the beginning
// of the token.
// /
LexerActionExecutor.prototype.execute = function(lexer, input, startIndex) {
	var requiresSeek = false;
	var stopIndex = input.index;
	try {
		for (var i = 0; i < this.lexerActions.length; i++) {
			var lexerAction = this.lexerActions[i];
			if (lexerAction instanceof LexerIndexedCustomAction) {
				var offset = lexerAction.offset;
				input.seek(startIndex + offset);
				lexerAction = lexerAction.action;
				requiresSeek = (startIndex + offset) !== stopIndex;
			} else if (lexerAction.isPositionDependent) {
				input.seek(stopIndex);
				requiresSeek = false;
			}
			lexerAction.execute(lexer);
		}
	} finally {
		if (requiresSeek) {
			input.seek(stopIndex);
		}
	}
};

LexerActionExecutor.prototype.hashCode = function() {
	return this.cachedHashCode;
};

LexerActionExecutor.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};


LexerActionExecutor.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof LexerActionExecutor)) {
		return false;
	} else if (this.cachedHashCode != other.cachedHashCode) {
		return false;
	} else if (this.lexerActions.length != other.lexerActions.length) {
		return false;
	} else {
		var numActions = this.lexerActions.length
		for (var idx = 0; idx < numActions; ++idx) {
			if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
				return false;
			}
		}
		return true;
	}
};

exports.LexerActionExecutor = LexerActionExecutor;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
//
// <p>
// The basic complexity of the adaptive strategy makes it harder to understand.
// We begin with ATN simulation to build paths in a DFA. Subsequent prediction
// requests go through the DFA first. If they reach a state without an edge for
// the current symbol, the algorithm fails over to the ATN simulation to
// complete the DFA path for the current input (until it finds a conflict state
// or uniquely predicting state).</p>
//
// <p>
// All of that is done without using the outer context because we want to create
// a DFA that is not dependent upon the rule invocation stack when we do a
// prediction. One DFA works in all contexts. We avoid using context not
// necessarily because it's slower, although it can be, but because of the DFA
// caching problem. The closure routine only considers the rule invocation stack
// created during prediction beginning in the decision rule. For example, if
// prediction occurs without invoking another rule's ATN, there are no context
// stacks in the configurations. When lack of context leads to a conflict, we
// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
// strategy (versus full LL(*)).</p>
//
// <p>
// When SLL yields a configuration set with conflict, we rewind the input and
// retry the ATN simulation, this time using full outer context without adding
// to the DFA. Configuration context stacks will be the full invocation stacks
// from the start rule. If we get a conflict using full context, then we can
// definitively say we have a true ambiguity for that input sequence. If we
// don't get a conflict, it implies that the decision is sensitive to the outer
// context. (It is not context-sensitive in the sense of context-sensitive
// grammars.)</p>
//
// <p>
// The next time we reach this DFA state with an SLL conflict, through DFA
// simulation, we will again retry the ATN simulation using full context mode.
// This is slow because we can't save the results and have to "interpret" the
// ATN each time we get that input.</p>
//
// <p>
// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
//
// <p>
// We could cache results from full context to predicted alternative easily and
// that saves a lot of time but doesn't work in presence of predicates. The set
// of visible predicates from the ATN start state changes depending on the
// context, because closure can fall off the end of a rule. I tried to cache
// tuples (stack context, semantic context, predicted alt) but it was slower
// than interpreting and much more complicated. Also required a huge amount of
// memory. The goal is not to create the world's fastest parser anyway. I'd like
// to keep this algorithm simple. By launching multiple threads, we can improve
// the speed of parsing across a large number of files.</p>
//
// <p>
// There is no strict ordering between the amount of input used by SLL vs LL,
// which makes it really hard to build a cache for full context. Let's say that
// we have input A B C that leads to an SLL conflict with full context X. That
// implies that using X we might only use A B but we could also use A B C D to
// resolve conflict. Input A B C D could predict alternative 1 in one position
// in the input and A B C E could predict alternative 2 in another position in
// input. The conflicting SLL configurations could still be non-unique in the
// full context prediction, which would lead us to requiring more input than the
// original A B C.	To make a	prediction cache work, we have to track	the exact
// input	used during the previous prediction. That amounts to a cache that maps
// X to a specific DFA for that context.</p>
//
// <p>
// Something should be done for left-recursive expression predictions. They are
// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
// with full LL thing Sam does.</p>
//
// <p>
// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
//
// <p>
// We avoid doing full context retry when the outer context is empty, we did not
// dip into the outer context by falling off the end of the decision state rule,
// or when we force SLL mode.</p>
//
// <p>
// As an example of the not dip into outer context case, consider as super
// constructor calls versus function calls. One grammar might look like
// this:</p>
//
// <pre>
// ctorBody
//   : '{' superCall? stat* '}'
//   ;
// </pre>
//
// <p>
// Or, you might see something like</p>
//
// <pre>
// stat
//   : superCall ';'
//   | expression ';'
//   | ...
//   ;
// </pre>
//
// <p>
// In both cases I believe that no closure operations will dip into the outer
// context. In the first case ctorBody in the worst case will stop at the '}'.
// In the 2nd case it should stop at the ';'. Both cases should stay within the
// entry rule and not dip into the outer context.</p>
//
// <p>
// <strong>PREDICATES</strong></p>
//
// <p>
// Predicates are always evaluated if present in either SLL or LL both. SLL and
// LL simulation deals with predicates differently. SLL collects predicates as
// it performs closure operations like ANTLR v3 did. It delays predicate
// evaluation until it reaches and accept state. This allows us to cache the SLL
// ATN simulation whereas, if we had evaluated predicates on-the-fly during
// closure, the DFA state configuration sets would be different and we couldn't
// build up a suitable DFA.</p>
//
// <p>
// When building a DFA accept state during ATN simulation, we evaluate any
// predicates and return the sole semantically valid alternative. If there is
// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
// we throw an exception. Alternatives without predicates act like they have
// true predicates. The simple way to think about it is to strip away all
// alternatives with false predicates and choose the minimum alternative that
// remains.</p>
//
// <p>
// When we start in the DFA and reach an accept state that's predicated, we test
// those and return the minimum semantically viable alternative. If no
// alternatives are viable, we throw an exception.</p>
//
// <p>
// During full LL ATN simulation, closure always evaluates predicates and
// on-the-fly. This is crucial to reducing the configuration set size during
// closure. It hits a landmine when parsing with the Java grammar, for example,
// without this on-the-fly evaluation.</p>
//
// <p>
// <strong>SHARING DFA</strong></p>
//
// <p>
// All instances of the same parser share the same decision DFAs through a
// static field. Each instance gets its own ATN simulator but they share the
// same {@link //decisionToDFA} field. They also share a
// {@link PredictionContextCache} object that makes sure that all
// {@link PredictionContext} objects are shared among the DFA states. This makes
// a big size difference.</p>
//
// <p>
// <strong>THREAD SAFETY</strong></p>
//
// <p>
// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
// it adds a new DFA object to that array. {@link //addDFAEdge}
// locks on the DFA for the current decision when setting the
// {@link DFAState//edges} field. {@link //addDFAState} locks on
// the DFA for the current decision when looking up a DFA state to see if it
// already exists. We must make sure that all requests to add DFA states that
// are equivalent result in the same shared DFA object. This is because lots of
// threads will be trying to update the DFA at once. The
// {@link //addDFAState} method also locks inside the DFA lock
// but this time on the shared context cache when it rebuilds the
// configurations' {@link PredictionContext} objects using cached
// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
// safe as long as we can guarantee that all threads referencing
// {@code s.edge[t]} get the same physical target {@link DFAState}, or
// {@code null}. Once into the DFA, the DFA simulation does not reference the
// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
// targets. The DFA simulator will either find {@link DFAState//edges} to be
// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
// {@code dfa.edges[t]} to be non-null. The
// {@link //addDFAEdge} method could be racing to set the field
// but in either case the DFA simulator works; if {@code null}, and requests ATN
// simulation. It could also race trying to get {@code dfa.edges[t]}, but either
// way it will work because it's not doing a test and set operation.</p>
//
// <p>
// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
// Parsing)</strong></p>
//
// <p>
// Sam pointed out that if SLL does not give a syntax error, then there is no
// point in doing full LL, which is slower. We only have to try LL if we get a
// syntax error. For maximum speed, Sam starts the parser set to pure SLL
// mode with the {@link BailErrorStrategy}:</p>
//
// <pre>
// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
// </pre>
//
// <p>
// If it does not get a syntax error, then we're done. If it does get a syntax
// error, we need to retry with the combined SLL/LL strategy.</p>
//
// <p>
// The reason this works is as follows. If there are no SLL conflicts, then the
// grammar is SLL (at least for that input set). If there is an SLL conflict,
// the full LL analysis must yield a set of viable alternatives which is a
// subset of the alternatives reported by SLL. If the LL set is a singleton,
// then the grammar is LL but not SLL. If the LL set is the same size as the SLL
// set, the decision is SLL. If the LL set has size &gt; 1, then that decision
// is truly ambiguous on the current input. If the LL set is smaller, then the
// SLL conflict resolution might choose an alternative that the full LL would
// rule out as a possibility based upon better context information. If that's
// the case, then the SLL parse will definitely get an error because the full LL
// analysis says it's not viable. If SLL conflict resolution chooses an
// alternative within the LL set, them both SLL and LL would choose the same
// alternative because they both choose the minimum of multiple conflicting
// alternatives.</p>
//
// <p>
// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
// parsing will get an error because SLL will pursue alternative 1. If
// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
// choose the same alternative because alternative one is the minimum of either
// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
//
// <p>
// Of course, if the input is invalid, then we will get an error for sure in
// both SLL and LL parsing. Erroneous input will therefore require 2 passes over
// the input.</p>
//

var Utils = __webpack_require__(2);
var Set = Utils.Set;
var BitSet = Utils.BitSet;
var DoubleDict = Utils.DoubleDict;
var ATN = __webpack_require__(15).ATN;
var ATNState = __webpack_require__(10).ATNState;
var ATNConfig = __webpack_require__(34).ATNConfig;
var ATNConfigSet = __webpack_require__(20).ATNConfigSet;
var Token = __webpack_require__(4).Token;
var DFAState = __webpack_require__(24).DFAState;
var PredPrediction = __webpack_require__(24).PredPrediction;
var ATNSimulator = __webpack_require__(80).ATNSimulator;
var PredictionMode = __webpack_require__(82).PredictionMode;
var RuleContext = __webpack_require__(33).RuleContext;
var ParserRuleContext = __webpack_require__(44).ParserRuleContext;
var SemanticContext = __webpack_require__(23).SemanticContext;
var StarLoopEntryState = __webpack_require__(10).StarLoopEntryState;
var RuleStopState = __webpack_require__(10).RuleStopState;
var PredictionContext = __webpack_require__(13).PredictionContext;
var Interval = __webpack_require__(7).Interval;
var Transitions = __webpack_require__(16);
var Transition = Transitions.Transition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var ActionTransition = Transitions.ActionTransition;
var NoViableAltException = __webpack_require__(11).NoViableAltException;

var SingletonPredictionContext = __webpack_require__(13).SingletonPredictionContext;
var predictionContextFromRuleContext = __webpack_require__(13).predictionContextFromRuleContext;

function ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
    this.parser = parser;
    this.decisionToDFA = decisionToDFA;
    // SLL, LL, or LL + exact ambig detection?//
    this.predictionMode = PredictionMode.LL;
    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
    this._input = null;
    this._startIndex = 0;
    this._outerContext = null;
    this._dfa = null;
    // Each prediction operation uses a cache for merge of prediction contexts.
    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
    //  isn't synchronized but we're ok since two threads shouldn't reuse same
    //  parser/atnsim object because it can only handle one input at a time.
    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
    //  also be examined during cache lookup.
    //
    this.mergeCache = null;
    return this;
}

ParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);
ParserATNSimulator.prototype.constructor = ParserATNSimulator;

ParserATNSimulator.prototype.debug = false;
ParserATNSimulator.prototype.debug_closure = false;
ParserATNSimulator.prototype.debug_add = false;
ParserATNSimulator.prototype.debug_list_atn_decisions = false;
ParserATNSimulator.prototype.dfa_debug = false;
ParserATNSimulator.prototype.retry_debug = false;


ParserATNSimulator.prototype.reset = function() {
};

ParserATNSimulator.prototype.adaptivePredict = function(input, decision, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision +
                               " exec LA(1)==" + this.getLookaheadName(input) +
                               " line " + input.LT(1).line + ":" +
                               input.LT(1).column);
    }
    this._input = input;
    this._startIndex = input.index;
    this._outerContext = outerContext;

    var dfa = this.decisionToDFA[decision];
    this._dfa = dfa;
    var m = input.mark();
    var index = input.index;

    // Now we are certain to have a specific decision's DFA
    // But, do we still need an initial state?
    try {
        var s0;
        if (dfa.precedenceDfa) {
            // the start state for a precedence DFA depends on the current
            // parser precedence, and is provided by a DFA method.
            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
            // the start state for a "regular" DFA is just s0
            s0 = dfa.s0;
        }
        if (s0===null) {
            if (outerContext===null) {
                outerContext = RuleContext.EMPTY;
            }
            if (this.debug || this.debug_list_atn_decisions) {
                console.log("predictATN decision " + dfa.decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   ", outerContext=" + outerContext.toString(this.parser.ruleNames));
            }

            var fullCtx = false;
            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

            if( dfa.precedenceDfa) {
                // If this is a precedence DFA, we use applyPrecedenceFilter
                // to convert the computed start state to a precedence start
                // state. We then use DFA.setPrecedenceStartState to set the
                // appropriate start state for the precedence level rather
                // than simply setting DFA.s0.
                //
                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                s0_closure = this.applyPrecedenceFilter(s0_closure);
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
            } else {
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.s0 = s0;
            }
        }
        var alt = this.execATN(dfa, s0, input, index, outerContext);
        if (this.debug) {
            console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
        }
        return alt;
    } finally {
        this._dfa = null;
        this.mergeCache = null; // wack cache after each prediction
        input.seek(index);
        input.release(m);
    }
};
// Performs ATN simulation to compute a predicted alternative based
//  upon the remaining input, but also updates the DFA cache to avoid
//  having to traverse the ATN again for the same input sequence.

// There are some key conditions we're looking for after computing a new
// set of ATN configs (proposed DFA state):
      // if the set is empty, there is no viable alternative for current symbol
      // does the state uniquely predict an alternative?
      // does the state have a conflict that would prevent us from
      //   putting it on the work list?

// We also have some key operations to do:
      // add an edge from previous DFA state to potentially new DFA state, D,
      //   upon current symbol but only if adding to work list, which means in all
      //   cases except no viable alternative (and possibly non-greedy decisions?)
      // collecting predicates and adding semantic context to DFA accept states
      // adding rule context to context-sensitive DFA accept states
      // consuming an input symbol
      // reporting a conflict
      // reporting an ambiguity
      // reporting a context sensitivity
      // reporting insufficient predicates

// cover these cases:
//    dead end
//    single alt
//    single alt + preds
//    conflict
//    conflict + preds
//
ParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext ) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision +
                " exec LA(1)==" + this.getLookaheadName(input) +
                " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    var alt;
    var previousD = s0;

    if (this.debug) {
        console.log("s0 = " + s0);
    }
    var t = input.LA(1);
    while(true) { // while more work
        var D = this.getExistingTargetState(previousD, t);
        if(D===null) {
            D = this.computeTargetState(dfa, previousD, t);
        }
        if(D===ATNSimulator.ERROR) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for SLL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
            input.seek(startIndex);
            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
            var conflictingAlts = null;
            if (D.predicates!==null) {
                if (this.debug) {
                    console.log("DFA state has preds in DFA sim LL failover");
                }
                var conflictIndex = input.index;
                if(conflictIndex !== startIndex) {
                    input.seek(startIndex);
                }
                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (conflictingAlts.length===1) {
                    if(this.debug) {
                        console.log("Full LL avoided");
                    }
                    return conflictingAlts.minValue();
                }
                if (conflictIndex !== startIndex) {
                    // restore the index so reporting the fallback to full
                    // context occurs with the index at the correct spot
                    input.seek(conflictIndex);
                }
            }
            if (this.dfa_debug) {
                console.log("ctx sensitive state " + outerContext +" in " + D);
            }
            var fullCtx = true;
            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
            return alt;
        }
        if (D.isAcceptState) {
            if (D.predicates===null) {
                return D.prediction;
            }
            var stopIndex = input.index;
            input.seek(startIndex);
            var alts = this.evalSemanticContext(D.predicates, outerContext, true);
            if (alts.length===0) {
                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
            } else if (alts.length===1) {
                return alts.minValue();
            } else {
                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                return alts.minValue();
            }
        }
        previousD = D;

        if (t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
};
//
// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param previousD The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
//
ParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) {
    var edges = previousD.edges;
    if (edges===null) {
        return null;
    } else {
        return edges[t + 1] || null;
    }
};
//
// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param dfa The DFA
// @param previousD The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
//
ParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) {
   var reach = this.computeReachSet(previousD.configs, t, false);
    if(reach===null) {
        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
        return ATNSimulator.ERROR;
    }
    // create new target state; we'll add to DFA after it's complete
    var D = new DFAState(null, reach);

    var predictedAlt = this.getUniqueAlt(reach);

    if (this.debug) {
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                    ", previous=" + previousD.configs +
                    ", configs=" + reach +
                    ", predict=" + predictedAlt +
                    ", allSubsetsConflict=" +
                    PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                    this.getConflictingAlts(reach));
    }
    if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
        // NO CONFLICT, UNIQUELY PREDICTED ALT
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        // MORE THAN ONE VIABLE ALTERNATIVE
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true;
        // in SLL-only mode, we will stop at this state and return the minimum alt
        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
    }
    if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
        if( D.predicates!==null) {
            D.prediction = ATN.INVALID_ALT_NUMBER;
        }
    }
    // all adds to dfa are done after we've created full D state
    D = this.addDFAEdge(dfa, previousD, t, D);
    return D;
};

ParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) {
    // We need to test all predicates, even in DFA states that
    // uniquely predict alternative.
    var nalts = decisionState.transitions.length;
    // Update DFA so reach becomes accept state with (predicate,alt)
    // pairs if preds found for conflicting alts
    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
    if (altToPred!==null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
    } else {
        // There are preds in configs but they might go away
        // when OR'd together like {p}? || NONE == NONE. If neither
        // alt has preds, resolve to min alt
        dfaState.prediction = altsToCollectPredsFrom.minValue();
    }
};

// comes back with reach.uniqueAlt set to a valid alt
ParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, // how far we got before failing over
                                     s0,
                                     input,
                                     startIndex,
                                     outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext "+s0);
    }
    var fullCtx = true;
    var foundExactAmbig = false;
    var reach = null;
    var previous = s0;
    input.seek(startIndex);
    var t = input.LA(1);
    var predictedAlt = -1;
    while (true) { // while more work
        reach = this.computeReachSet(previous, t, fullCtx);
        if (reach===null) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for LL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previous, startIndex);
            input.seek(startIndex);
            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        if(this.debug) {
            console.log("LL altSubSets=" + altSubSets + ", predict=" +
                  PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                  PredictionMode.resolvesToJustOneViableAlt(altSubSets));
        }
        reach.uniqueAlt = this.getUniqueAlt(reach);
        // unique prediction?
        if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
            predictedAlt = reach.uniqueAlt;
            break;
        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
            if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                break;
            }
        } else {
            // In exact ambiguity mode, we never try to terminate early.
            // Just keeps scarfing until we know what the conflict is
            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                foundExactAmbig = true;
                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                break;
            }
            // else there are multiple non-conflicting subsets or
            // we're not sure what the ambiguity is yet.
            // So, keep going.
        }
        previous = reach;
        if( t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
    // If the configuration set uniquely predicts an alternative,
    // without conflict, then we know that it's a full LL decision
    // not SLL.
    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
    }
    // We do not check predicates here because we have checked them
    // on-the-fly when doing full context prediction.

    //
    // In non-exact ambiguity detection mode, we might	actually be able to
    // detect an exact ambiguity, but I'm not going to spend the cycles
    // needed to check. We only emit ambiguity warnings in exact ambiguity
    // mode.
    //
    // For example, we might know that we have conflicting configurations.
    // But, that does not mean that there is no way forward without a
    // conflict. It's possible to have nonconflicting alt subsets as in:

    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

    // from
    //
    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
    //
    // In this case, (17,1,[5 $]) indicates there is some next sequence that
    // would resolve this without conflict to alternative 1. Any other viable
    // next sequence, however, is associated with a conflict.  We stop
    // looking for input because no amount of further lookahead will alter
    // the fact that we should predict alternative 1.  We just can't say for
    // sure that there is an ambiguity without looking further.

    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

    return predictedAlt;
};

ParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) {
    if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
    }
    if( this.mergeCache===null) {
        this.mergeCache = new DoubleDict();
    }
    var intermediate = new ATNConfigSet(fullCtx);

    // Configurations already in a rule stop state indicate reaching the end
    // of the decision rule (local context) or end of the start rule (full
    // context). Once reached, these configurations are never updated by a
    // closure operation, so they are handled separately for the performance
    // advantage of having a smaller intermediate set when calling closure.
    //
    // For full-context reach operations, separate handling is required to
    // ensure that the alternative matching the longest overall sequence is
    // chosen when multiple such configurations can match the input.

    var skippedStopStates = null;

    // First figure out where we can reach on input t
    for (var i=0; i<closure.items.length;i++) {
        var c = closure.items[i];
        if(this.debug_add) {
            console.log("testing " + this.getTokenName(t) + " at " + c);
        }
        if (c.state instanceof RuleStopState) {
            if (fullCtx || t === Token.EOF) {
                if (skippedStopStates===null) {
                    skippedStopStates = [];
                }
                skippedStopStates.push(c);
                if(this.debug_add) {
                    console.log("added " + c + " to skippedStopStates");
                }
            }
            continue;
        }
        for(var j=0;j<c.state.transitions.length;j++) {
            var trans = c.state.transitions[j];
            var target = this.getReachableTarget(trans, t);
            if (target!==null) {
                var cfg = new ATNConfig({state:target}, c);
                intermediate.add(cfg, this.mergeCache);
                if(this.debug_add) {
                    console.log("added " + cfg + " to intermediate");
                }
            }
        }
    }
    // Now figure out where the reach operation can take us...
    var reach = null;

    // This block optimizes the reach operation for intermediate sets which
    // trivially indicate a termination state for the overall
    // adaptivePredict operation.
    //
    // The conditions assume that intermediate
    // contains all configurations relevant to the reach set, but this
    // condition is not true when one or more configurations have been
    // withheld in skippedStopStates, or when the current symbol is EOF.
    //
    if (skippedStopStates===null && t!==Token.EOF) {
        if (intermediate.items.length===1) {
            // Don't pursue the closure if there is just one state.
            // It can only have one alternative; just add to result
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        }
    }
    // If the reach set could not be trivially determined, perform a closure
    // operation on the intermediate set to compute its initial value.
    //
    if (reach===null) {
        reach = new ATNConfigSet(fullCtx);
        var closureBusy = new Set();
        var treatEofAsEpsilon = t === Token.EOF;
        for (var k=0; k<intermediate.items.length;k++) {
            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
    }
    if (t === Token.EOF) {
        // After consuming EOF no additional input is possible, so we are
        // only interested in configurations which reached the end of the
        // decision rule (local context) or end of the start rule (full
        // context). Update reach to contain only these configurations. This
        // handles both explicit EOF transitions in the grammar and implicit
        // EOF transitions following the end of the decision or start rule.
        //
        // When reach==intermediate, no closure operation was performed. In
        // this case, removeAllConfigsNotInRuleStopState needs to check for
        // reachable rule stop states as well as configurations already in
        // a rule stop state.
        //
        // This is handled before the configurations in skippedStopStates,
        // because any configurations potentially added from that list are
        // already guaranteed to meet this condition whether or not it's
        // required.
        //
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
    }
    // If skippedStopStates!==null, then it contains at least one
    // configuration. For full-context reach operations, these
    // configurations reached the end of the start rule, in which case we
    // only add them back to reach if no configuration during the current
    // closure operation reached such a state. This ensures adaptivePredict
    // chooses an alternative matching the longest overall sequence when
    // multiple alternatives are viable.
    //
    if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
        for (var l=0; l<skippedStopStates.length;l++) {
            reach.add(skippedStopStates[l], this.mergeCache);
        }
    }
    if (reach.items.length===0) {
        return null;
    } else {
        return reach;
    }
};
//
// Return a configuration set containing only the configurations from
// {@code configs} which are in a {@link RuleStopState}. If all
// configurations in {@code configs} are already in a rule stop state, this
// method simply returns {@code configs}.
//
// <p>When {@code lookToEndOfRule} is true, this method uses
// {@link ATN//nextTokens} for each configuration in {@code configs} which is
// not already in a rule stop state to see if a rule stop state is reachable
// from the configuration via epsilon-only transitions.</p>
//
// @param configs the configuration set to update
// @param lookToEndOfRule when true, this method checks for rule stop states
// reachable by epsilon-only transitions from each configuration in
// {@code configs}.
//
// @return {@code configs} if all configurations in {@code configs} are in a
// rule stop state, otherwise return a new configuration set containing only
// the configurations from {@code configs} which are in a rule stop state
//
ParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
    }
    var result = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length;i++) {
        var config = configs.items[i];
        if (config.state instanceof RuleStopState) {
            result.add(config, this.mergeCache);
            continue;
        }
        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
            var nextTokens = this.atn.nextTokens(config.state);
            if (nextTokens.contains(Token.EPSILON)) {
                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
            }
        }
    }
    return result;
};

ParserATNSimulator.prototype.computeStartState = function(p, ctx, fullCtx) {
    // always at least the implicit call to start rule
    var initialContext = predictionContextFromRuleContext(this.atn, ctx);
    var configs = new ATNConfigSet(fullCtx);
    for(var i=0;i<p.transitions.length;i++) {
        var target = p.transitions[i].target;
        var c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
        var closureBusy = new Set();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
    }
    return configs;
};

//
// This method transforms the start state computed by
// {@link //computeStartState} to the special start state used by a
// precedence DFA for a particular precedence value. The transformation
// process applies the following changes to the start state's configuration
// set.
//
// <ol>
// <li>Evaluate the precedence predicates for each configuration using
// {@link SemanticContext//evalPrecedence}.</li>
// <li>Remove all configurations which predict an alternative greater than
// 1, for which another configuration that predicts alternative 1 is in the
// same ATN state with the same prediction context. This transformation is
// valid for the following reasons:
// <ul>
// <li>The closure block cannot contain any epsilon transitions which bypass
// the body of the closure, so all states reachable via alternative 1 are
// part of the precedence alternatives of the transformed left-recursive
// rule.</li>
// <li>The "primary" portion of a left recursive rule cannot contain an
// epsilon transition, so the only way an alternative other than 1 can exist
// in a state that is also reachable via alternative 1 is by nesting calls
// to the left-recursive rule, with the outer calls not being at the
// preferred precedence level.</li>
// </ul>
// </li>
// </ol>
//
// <p>
// The prediction context must be considered by this filter to address
// situations like the following.
// </p>
// <code>
// <pre>
// grammar TA;
// prog: statement* EOF;
// statement: letterA | statement letterA 'b' ;
// letterA: 'a';
// </pre>
// </code>
// <p>
// If the above grammar, the ATN state immediately before the token
// reference {@code 'a'} in {@code letterA} is reachable from the left edge
// of both the primary and closure blocks of the left-recursive rule
// {@code statement}. The prediction context associated with each of these
// configurations distinguishes between them, and prevents the alternative
// which stepped out to {@code prog} (and then back in to {@code statement}
// from being eliminated by the filter.
// </p>
//
// @param configs The configuration set computed by
// {@link //computeStartState} as the start state for the DFA.
// @return The transformed configuration set representing the start state
// for a precedence DFA at a particular precedence level (determined by
// calling {@link Parser//getPrecedence}).
//
ParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) {
	var config;
	var statesFromAlt1 = [];
    var configSet = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        // handle alt 1 first
        if (config.alt !== 1) {
            continue;
        }
        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
        if (updatedContext===null) {
            // the configuration was eliminated
            continue;
        }
        statesFromAlt1[config.state.stateNumber] = config.context;
        if (updatedContext !== config.semanticContext) {
            configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
        } else {
            configSet.add(config, this.mergeCache);
        }
    }
    for(i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt === 1) {
            // already handled
            continue;
        }
        // In the future, this elimination step could be updated to also
        // filter the prediction context for alternatives predicting alt>1
        // (basically a graph subtraction algorithm).
		if (!config.precedenceFilterSuppressed) {
            var context = statesFromAlt1[config.state.stateNumber] || null;
            if (context!==null && context.equals(config.context)) {
                // eliminated
                continue;
            }
		}
        configSet.add(config, this.mergeCache);
    }
    return configSet;
};

ParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) {
    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
    } else {
        return null;
    }
};

ParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {
    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
    // altToPred starts as an array of all null contexts. The entry at index i
    // corresponds to alternative i. altToPred[i] may have one of three values:
    //   1. null: no ATNConfig c is found such that c.alt==i
    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
    //      alt i has at least one unpredicated config.
    //   3. Non-NONE Semantic Context: There exists at least one, and for all
    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
    //
    // From this, it is clear that NONE||anything==NONE.
    //
    var altToPred = [];
    for(var i=0;i<configs.items.length;i++) {
        var c = configs.items[i];
        if(ambigAlts.contains( c.alt )) {
            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
    }
    var nPredAlts = 0;
    for (i =1;i< nalts+1;i++) {
        var pred = altToPred[i] || null;
        if (pred===null) {
            altToPred[i] = SemanticContext.NONE;
        } else if (pred !== SemanticContext.NONE) {
            nPredAlts += 1;
        }
    }
    // nonambig alts are null in altToPred
    if (nPredAlts===0) {
        altToPred = null;
    }
    if (this.debug) {
        console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
    }
    return altToPred;
};

ParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {
    var pairs = [];
    var containsPredicate = false;
    for (var i=1; i<altToPred.length;i++) {
        var pred = altToPred[i];
        // unpredicated is indicated by SemanticContext.NONE
        if( ambigAlts!==null && ambigAlts.contains( i )) {
            pairs.push(new PredPrediction(pred, i));
        }
        if (pred !== SemanticContext.NONE) {
            containsPredicate = true;
        }
    }
    if (! containsPredicate) {
        return null;
    }
    return pairs;
};

//
// This method is used to improve the localization of error messages by
// choosing an alternative rather than throwing a
// {@link NoViableAltException} in particular prediction scenarios where the
// {@link //ERROR} state was reached during ATN simulation.
//
// <p>
// The default implementation of this method uses the following
// algorithm to identify an ATN configuration which successfully parsed the
// decision entry rule. Choosing such an alternative ensures that the
// {@link ParserRuleContext} returned by the calling rule will be complete
// and valid, and the syntax error will be reported later at a more
// localized location.</p>
//
// <ul>
// <li>If a syntactically valid path or paths reach the end of the decision rule and
// they are semantically valid if predicated, return the min associated alt.</li>
// <li>Else, if a semantically invalid but syntactically valid path exist
// or paths exist, return the minimum associated alt.
// </li>
// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
// </ul>
//
// <p>
// In some scenarios, the algorithm described above could predict an
// alternative which will result in a {@link FailedPredicateException} in
// the parser. Specifically, this could occur if the <em>only</em> configuration
// capable of successfully parsing to the end of the decision rule is
// blocked by a semantic predicate. By choosing this alternative within
// {@link //adaptivePredict} instead of throwing a
// {@link NoViableAltException}, the resulting
// {@link FailedPredicateException} in the parser will identify the specific
// predicate which is preventing the parser from successfully parsing the
// decision rule, which helps developers identify and correct logic errors
// in semantic predicates.
// </p>
//
// @param configs The ATN configurations which were valid immediately before
// the {@link //ERROR} state was reached
// @param outerContext The is the \gamma_0 initial parser context from the paper
// or the parser stack at the instant before prediction commences.
//
// @return The value to return from {@link //adaptivePredict}, or
// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
// identified and {@link //adaptivePredict} should report an error instead.
//
ParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {
    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
    var semValidConfigs = cfgs[0];
    var semInvalidConfigs = cfgs[1];
    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
    if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
        return alt;
    }
    // Is there a syntactically valid path with a failed pred?
    if (semInvalidConfigs.items.length>0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
            return alt;
        }
    }
    return ATN.INVALID_ALT_NUMBER;
};

ParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function(configs) {
    var alts = [];
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
            if(alts.indexOf(c.alt)<0) {
                alts.push(c.alt);
            }
        }
    }
    if (alts.length===0) {
        return ATN.INVALID_ALT_NUMBER;
    } else {
        return Math.min.apply(null, alts);
    }
};
// Walk the list of configurations and split them according to
//  those that have preds evaluating to true/false.  If no pred, assume
//  true pred and include in succeeded set.  Returns Pair of sets.
//
//  Create a new set so as not to alter the incoming parameter.
//
//  Assumption: the input stream has been restored to the starting point
//  prediction, which is where predicates need to evaluate.
//
ParserATNSimulator.prototype.splitAccordingToSemanticValidity = function( configs, outerContext) {
    var succeeded = new ATNConfigSet(configs.fullCtx);
    var failed = new ATNConfigSet(configs.fullCtx);
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.semanticContext !== SemanticContext.NONE) {
            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
            if (predicateEvaluationResult) {
                succeeded.add(c);
            } else {
                failed.add(c);
            }
        } else {
            succeeded.add(c);
        }
    }
    return [succeeded, failed];
};

// Look through a list of predicate/alt pairs, returning alts for the
//  pairs that win. A {@code NONE} predicate indicates an alt containing an
//  unpredicated config which behaves as "always true." If !complete
//  then we stop at the first predicate that evaluates to true. This
//  includes pairs with null predicates.
//
ParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {
    var predictions = new BitSet();
    for(var i=0;i<predPredictions.length;i++) {
    	var pair = predPredictions[i];
        if (pair.pred === SemanticContext.NONE) {
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
            continue;
        }
        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
        if (this.debug || this.dfa_debug) {
            console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }
        if (predicateEvaluationResult) {
            if (this.debug || this.dfa_debug) {
                console.log("PREDICT " + pair.alt);
            }
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
        }
    }
    return predictions;
};

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//

ParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
    var initialDepth = 0;
    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                             fullCtx, initialDepth, treatEofAsEpsilon);
};


ParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    if (this.debug || this.debug_closure) {
        console.log("closure(" + config.toString(this.parser,true) + ")");
        // console.log("configs(" + configs.toString() + ")");
        if(config.reachesIntoOuterContext>50) {
            throw "problem";
        }
    }
    if (config.state instanceof RuleStopState) {
        // We hit rule end. If we have context info, use it
        // run thru all possible stack tops in ctx
        if (! config.context.isEmpty()) {
            for ( var i =0; i<config.context.length; i++) {
                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                    if (fullCtx) {
                        configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                        continue;
                    } else {
                        // we have no context info, just chase follow links (if greedy)
                        if (this.debug) {
                            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                        }
                        this.closure_(config, configs, closureBusy, collectPredicates,
                                 fullCtx, depth, treatEofAsEpsilon);
                    }
                    continue;
                }
                var returnState = this.atn.states[config.context.getReturnState(i)];
                var newContext = config.context.getParent(i); // "pop" return state
                var parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                var c = new ATNConfig(parms, null);
                // While we have context to pop back from, we may have
                // gotten that context AFTER having falling off a rule.
                // Make sure we track that we are now out of context.
                c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
            }
            return;
        } else if( fullCtx) {
            // reached end of start rule
            configs.add(config, this.mergeCache);
            return;
        } else {
            // else if we have no context info, just chase follow links (if greedy)
            if (this.debug) {
                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
            }
        }
    }
    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
};


// Do the actual work of walking epsilon edges//
ParserATNSimulator.prototype.closure_ = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    var p = config.state;
    // optimization
    if (! p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache);
        // make sure to not return here, because EOF transitions can act as
        // both epsilon transitions and non-epsilon transitions.
    }
    for(var i = 0;i<p.transitions.length; i++) {
        if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
            continue;

        var t = p.transitions[i];
        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);
        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
        if (c!==null) {
			if (!t.isEpsilon && closureBusy.add(c)!==c){
				// avoid infinite recursion for EOF* and EOF+
				continue;
			}
            var newDepth = depth;
            if ( config.state instanceof RuleStopState) {
                // target fell off end of rule; mark resulting c as having dipped into outer context
                // We can't get here if incoming config was rule stop and we had context
                // track how far we dip into outer context.  Might
                // come in handy and we avoid evaluating context dependent
                // preds if this is > 0.

                if (closureBusy.add(c)!==c) {
                    // avoid infinite recursion for right-recursive rules
                    continue;
                }

				if (this._dfa !== null && this._dfa.precedenceDfa) {
					if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
						c.precedenceFilterSuppressed = true;
					}
				}

                c.reachesIntoOuterContext += 1;
                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                newDepth -= 1;
                if (this.debug) {
                    console.log("dips into outer ctx: " + c);
                }
            } else if (t instanceof RuleTransition) {
                // latch when newDepth goes negative - once we step out of the entry context we can't return
                if (newDepth >= 0) {
                    newDepth += 1;
                }
            }
            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
    }
};


ParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function(config) {
    // return False
    var p = config.state;
    // First check to see if we are in StarLoopEntryState generated during
    // left-recursion elimination. For efficiency, also check if
    // the context has an empty stack case. If so, it would mean
    // global FOLLOW so we can't perform optimization
    // Are we the special loop entry/exit state? or SLL wildcard
    if(p.stateType != ATNState.STAR_LOOP_ENTRY)
        return false;
    if(p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||
           config.context.isEmpty() || config.context.hasEmptyPath())
        return false;

    // Require all return states to return back to the same rule that p is in.
    var numCtxs = config.context.length;
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnState = this.atn.states[config.context.getReturnState(i)];
        if (returnState.ruleIndex != p.ruleIndex)
            return false;
    }

    var decisionStartState = p.transitions[0].target;
    var blockEndStateNum = decisionStartState.endState.stateNumber;
    var blockEndState = this.atn.states[blockEndStateNum];

    // Verify that the top of each stack context leads to loop entry/exit
    // state through epsilon edges and w/o leaving rule.
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnStateNumber = config.context.getReturnState(i);
        var returnState = this.atn.states[returnStateNumber];
        // all states must have single outgoing epsilon edge
        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)
            return false;

        // Look for prefix op case like 'not expr', (' type ')' expr
        var returnStateTarget = returnState.transitions[0].target;
        if ( returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p )
            continue;

        // Look for 'expr op expr' or case where expr's return state is block end
        // of (...)* internal block; the block end points to loop back
        // which points to p but we don't need to check that
        if ( returnState == blockEndState )
            continue;

        // Look for ternary expr ? expr : expr. The return state points at block end,
        // which points at loop entry state
        if ( returnStateTarget == blockEndState )
            continue;

        // Look for complex prefix 'between expr and expr' case where 2nd expr's
        // return state points at block end state of (...)* internal block
        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1
                && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)
            continue;

        // anything else ain't conforming
        return false;
    }
    return true;
};


ParserATNSimulator.prototype.getRuleName = function( index) {
    if (this.parser!==null && index>=0) {
        return this.parser.ruleNames[index];
    } else {
        return "<rule " + index + ">";
    }
};

ParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
    switch(t.serializationType) {
    case Transition.RULE:
        return this.ruleTransition(config, t);
    case Transition.PRECEDENCE:
        return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.PREDICATE:
        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.ACTION:
        return this.actionTransition(config, t);
    case Transition.EPSILON:
        return new ATNConfig({state:t.target}, config);
    case Transition.ATOM:
    case Transition.RANGE:
    case Transition.SET:
        // EOF transitions act like epsilon transitions after the first EOF
        // transition is traversed
        if (treatEofAsEpsilon) {
            if (t.matches(Token.EOF, 0, 1)) {
                return new ATNConfig({state: t.target}, config);
            }
        }
        return null;
    default:
    	return null;
    }
};

ParserATNSimulator.prototype.actionTransition = function(config, t) {
    if (this.debug) {
        var index = t.actionIndex==-1 ? 65535 : t.actionIndex;
        console.log("ACTION edge " + t.ruleIndex + ":" + index);
    }
    return new ATNConfig({state:t.target}, config);
};

ParserATNSimulator.prototype.precedenceTransition = function(config, pt,  collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.precedence + ">=_p, ctx dependent=true");
        if (this.parser!==null) {
        	console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && inContext) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this.parser!==null) {
            console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.ruleTransition = function(config, t) {
    if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
    }
    var returnState = t.followState;
    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
    return new ATNConfig({state:t.target, context:newContext}, config );
};

ParserATNSimulator.prototype.getConflictingAlts = function(configs) {
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.getAlts(altsets);
};

 // Sam pointed out a problem with the previous definition, v3, of
 // ambiguous states. If we have another state associated with conflicting
 // alternatives, we should keep going. For example, the following grammar
 //
 // s : (ID | ID ID?) ';' ;
 //
 // When the ATN simulation reaches the state before ';', it has a DFA
 // state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
 // 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
 // because alternative to has another way to continue, via [6|2|[]].
 // The key is that we have a single state that has config's only associated
 // with a single alternative, 2, and crucially the state transitions
 // among the configurations are all non-epsilon transitions. That means
 // we don't consider any conflicts that include alternative 2. So, we
 // ignore the conflict between alts 1 and 2. We ignore a set of
 // conflicting alts when there is an intersection with an alternative
 // associated with a single alt state in the state&rarr;config-list map.
 //
 // It's also the case that we might have two conflicting configurations but
 // also a 3rd nonconflicting configuration for a different alternative:
 // [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
 //
 // a : A | A | A B ;
 //
 // After matching input A, we reach the stop state for rule A, state 1.
 // State 8 is the state right before B. Clearly alternatives 1 and 2
 // conflict and no amount of further lookahead will separate the two.
 // However, alternative 3 will be able to continue and so we do not
 // stop working on this state. In the previous example, we're concerned
 // with states associated with the conflicting alternatives. Here alt
 // 3 is not associated with the conflicting configs, but since we can continue
 // looking for input reasonably, I don't declare the state done. We
 // ignore a set of conflicting alts when we have an alternative
 // that we still need to pursue.
//

ParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) {
    var conflictingAlts = null;
    if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet();
        conflictingAlts.add(configs.uniqueAlt);
    } else {
        conflictingAlts = configs.conflictingAlts;
    }
    return conflictingAlts;
};

ParserATNSimulator.prototype.getTokenName = function( t) {
    if (t===Token.EOF) {
        return "EOF";
    }
    if( this.parser!==null && this.parser.literalNames!==null) {
        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
            console.log("" + t + " ttype out of range: " + this.parser.literalNames);
            console.log("" + this.parser.getInputStream().getTokens());
        } else {
            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
            return name + "<" + t + ">";
        }
    }
    return "" + t;
};

ParserATNSimulator.prototype.getLookaheadName = function(input) {
    return this.getTokenName(input.LA(1));
};

// Used for debugging in adaptivePredict around execATN but I cut
//  it out for clarity now that alg. works well. We can leave this
//  "dead" code for a bit.
//
ParserATNSimulator.prototype.dumpDeadEndConfigs = function(nvae) {
    console.log("dead end configs: ");
    var decs = nvae.getDeadEndConfigs();
    for(var i=0; i<decs.length; i++) {
    	var c = decs[i];
        var trans = "no edges";
        if (c.state.transitions.length>0) {
            var t = c.state.transitions[0];
            if (t instanceof AtomTransition) {
                trans = "Atom "+ this.getTokenName(t.label);
            } else if (t instanceof SetTransition) {
                var neg = (t instanceof NotSetTransition);
                trans = (neg ? "~" : "") + "Set " + t.set;
            }
        }
        console.error(c.toString(this.parser, true) + ":" + trans);
    }
};

ParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {
    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
};

ParserATNSimulator.prototype.getUniqueAlt = function(configs) {
    var alt = ATN.INVALID_ALT_NUMBER;
    for(var i=0;i<configs.items.length;i++) {
    	var c = configs.items[i];
        if (alt === ATN.INVALID_ALT_NUMBER) {
            alt = c.alt // found first alt
        } else if( c.alt!==alt) {
            return ATN.INVALID_ALT_NUMBER;
        }
    }
    return alt;
};

//
// Add an edge to the DFA, if possible. This method calls
// {@link //addDFAState} to ensure the {@code to} state is present in the
// DFA. If {@code from} is {@code null}, or if {@code t} is outside the
// range of edges that can be represented in the DFA tables, this method
// returns without adding the edge to the DFA.
//
// <p>If {@code to} is {@code null}, this method returns {@code null}.
// Otherwise, this method returns the {@link DFAState} returned by calling
// {@link //addDFAState} for the {@code to} state.</p>
//
// @param dfa The DFA
// @param from The source state for the edge
// @param t The input symbol
// @param to The target state for the edge
//
// @return If {@code to} is {@code null}, this method returns {@code null};
// otherwise this method returns the result of calling {@link //addDFAState}
// on {@code to}
//
ParserATNSimulator.prototype.addDFAEdge = function(dfa, from_, t, to) {
    if( this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
    }
    if (to===null) {
        return null;
    }
    to = this.addDFAState(dfa, to); // used existing if possible not incoming
    if (from_===null || t < -1 || t > this.atn.maxTokenType) {
        return to;
    }
    if (from_.edges===null) {
        from_.edges = [];
    }
    from_.edges[t+1] = to; // connect

    if (this.debug) {
        var literalNames = this.parser===null ? null : this.parser.literalNames;
        var symbolicNames = this.parser===null ? null : this.parser.symbolicNames;
        console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
    }
    return to;
};
//
// Add state {@code D} to the DFA if it is not already present, and return
// the actual instance stored in the DFA. If a state equivalent to {@code D}
// is already in the DFA, the existing state is returned. Otherwise this
// method returns {@code D} after adding it to the DFA.
//
// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
// does not change the DFA.</p>
//
// @param dfa The dfa
// @param D The DFA state to add
// @return The state stored in the DFA. This will be either the existing
// state if {@code D} is already in the DFA, or {@code D} itself if the
// state was not already present.
//
ParserATNSimulator.prototype.addDFAState = function(dfa, D) {
    if (D == ATNSimulator.ERROR) {
        return D;
    }
    var existing = dfa.states.get(D);
    if(existing!==null) {
        return existing;
    }
    D.stateNumber = dfa.states.length;
    if (! D.configs.readOnly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
    }
    dfa.states.add(D);
    if (this.debug) {
        console.log("adding new DFA state: " + D);
    }
    return D;
};

ParserATNSimulator.prototype.reportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
    }
};

ParserATNSimulator.prototype.reportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
    }
};

// If context sensitive parsing, we know it's ambiguity not conflict//
ParserATNSimulator.prototype.reportAmbiguity = function(dfa, D, startIndex, stopIndex,
                               exact, ambigAlts, configs ) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
    }
};

exports.ParserATNSimulator = ParserATNSimulator;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.ATN = __webpack_require__(15).ATN;
exports.ATNDeserializer = __webpack_require__(79).ATNDeserializer;
exports.LexerATNSimulator = __webpack_require__(159).LexerATNSimulator;
exports.ParserATNSimulator = __webpack_require__(161).ParserATNSimulator;
exports.PredictionMode = __webpack_require__(82).PredictionMode;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Set = __webpack_require__(2).Set;
var DFAState = __webpack_require__(24).DFAState;
var StarLoopEntryState = __webpack_require__(10).StarLoopEntryState;
var ATNConfigSet = __webpack_require__(20).ATNConfigSet;
var DFASerializer = __webpack_require__(35).DFASerializer;
var LexerDFASerializer = __webpack_require__(35).LexerDFASerializer;



function DFA(atnStartState, decision) {
	if (decision === undefined) {
		decision = 0;
	}
	// From which ATN state did we create this DFA?
	this.atnStartState = atnStartState;
	this.decision = decision;
	// A set of all DFA states. Use {@link Map} so we can get old state back
	// ({@link Set} only allows you to see if it's there).
	this._states = new Set();
	this.s0 = null;
	// {@code true} if this DFA is for a precedence decision; otherwise,
	// {@code false}. This is the backing field for {@link //isPrecedenceDfa},
	// {@link //setPrecedenceDfa}.
	this.precedenceDfa = false;
    if (atnStartState instanceof StarLoopEntryState)
    {
        if (atnStartState.isPrecedenceDecision) {
            this.precedenceDfa = true;
            precedenceState = new DFAState(null, new ATNConfigSet());
            precedenceState.edges = [];
            precedenceState.isAcceptState = false;
            precedenceState.requiresFullContext = false;
            this.s0 = precedenceState;
        }
    }
	return this;
}

// Get the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @return The start state corresponding to the specified precedence, or
// {@code null} if no start state exists for the specified precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()

DFA.prototype.getPrecedenceStartState = function(precedence) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	// s0.edges is never null for a precedence DFA
	if (precedence < 0 || precedence >= this.s0.edges.length) {
		return null;
	}
	return this.s0.edges[precedence] || null;
};

// Set the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @param startState The start state corresponding to the specified
// precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()
//
DFA.prototype.setPrecedenceStartState = function(precedence, startState) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	if (precedence < 0) {
		return;
	}

	// synchronization on s0 here is ok. when the DFA is turned into a
	// precedence DFA, s0 will be initialized once and not updated again
	// s0.edges is never null for a precedence DFA
	this.s0.edges[precedence] = startState;
};

//
// Sets whether this is a precedence DFA. If the specified value differs
// from the current DFA configuration, the following actions are taken;
// otherwise no changes are made to the current DFA.
//
// <ul>
// <li>The {@link //states} map is cleared</li>
// <li>If {@code precedenceDfa} is {@code false}, the initial state
// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
// store the start states for individual precedence values.</li>
// <li>The {@link //precedenceDfa} field is updated</li>
// </ul>
//
// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
// {@code false}

DFA.prototype.setPrecedenceDfa = function(precedenceDfa) {
	if (this.precedenceDfa!==precedenceDfa) {
		this._states = new DFAStatesSet();
		if (precedenceDfa) {
			var precedenceState = new DFAState(null, new ATNConfigSet());
			precedenceState.edges = [];
			precedenceState.isAcceptState = false;
			precedenceState.requiresFullContext = false;
			this.s0 = precedenceState;
		} else {
			this.s0 = null;
		}
		this.precedenceDfa = precedenceDfa;
	}
};

Object.defineProperty(DFA.prototype, "states", {
	get : function() {
		return this._states;
	}
});

// Return a list of all states in this DFA, ordered by state number.
DFA.prototype.sortedStates = function() {
	var list = this._states.values();
	return list.sort(function(a, b) {
		return a.stateNumber - b.stateNumber;
	});
};

DFA.prototype.toString = function(literalNames, symbolicNames) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	if (this.s0 === null) {
		return "";
	}
	var serializer = new DFASerializer(this, literalNames, symbolicNames);
	return serializer.toString();
};

DFA.prototype.toLexerString = function() {
	if (this.s0 === null) {
		return "";
	}
	var serializer = new LexerDFASerializer(this);
	return serializer.toString();
};

exports.DFA = DFA;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.DFA = __webpack_require__(163).DFA;
exports.DFASerializer = __webpack_require__(35).DFASerializer;
exports.LexerDFASerializer = __webpack_require__(35).LexerDFASerializer;
exports.PredPrediction = __webpack_require__(24).PredPrediction;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This implementation of {@link ANTLRErrorListener} can be used to identify
// certain potential correctness and performance problems in grammars. "Reports"
// are made by calling {@link Parser//notifyErrorListeners} with the appropriate
// message.
//
// <ul>
// <li><b>Ambiguities</b>: These are cases where more than one path through the
// grammar can match the input.</li>
// <li><b>Weak context sensitivity</b>: These are cases where full-context
// prediction resolved an SLL conflict to a unique alternative which equaled the
// minimum alternative of the SLL conflict.</li>
// <li><b>Strong (forced) context sensitivity</b>: These are cases where the
// full-context prediction resolved an SLL conflict to a unique alternative,
// <em>and</em> the minimum alternative of the SLL conflict was found to not be
// a truly viable alternative. Two-stage parsing cannot be used for inputs where
// this situation occurs.</li>
// </ul>

var BitSet = __webpack_require__(2).BitSet;
var ErrorListener = __webpack_require__(36).ErrorListener;
var Interval = __webpack_require__(7).Interval;

function DiagnosticErrorListener(exactOnly) {
	ErrorListener.call(this);
	exactOnly = exactOnly || true;
	// whether all ambiguities or only exact ambiguities are reported.
	this.exactOnly = exactOnly;
	return this;
}

DiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);
DiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;

DiagnosticErrorListener.prototype.reportAmbiguity = function(recognizer, dfa,
		startIndex, stopIndex, exact, ambigAlts, configs) {
	if (this.exactOnly && !exact) {
		return;
	}
	var msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportAttemptingFullContext = function(
		recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	var msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportContextSensitivity = function(
		recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	var msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.getDecisionDescription = function(recognizer, dfa) {
	var decision = dfa.decision;
	var ruleIndex = dfa.atnStartState.ruleIndex;

	var ruleNames = recognizer.ruleNames;
	if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
		return "" + decision;
	}
	var ruleName = ruleNames[ruleIndex] || null;
	if (ruleName === null || ruleName.length === 0) {
		return "" + decision;
	}
	return "" + decision + " (" + ruleName + ")";
};

//
// Computes the set of conflicting or ambiguous alternatives from a
// configuration set, if that information was not already provided by the
// parser.
//
// @param reportedAlts The set of conflicting or ambiguous alternatives, as
// reported by the parser.
// @param configs The conflicting or ambiguous configuration set.
// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
// returns the set of alternatives represented in {@code configs}.
//
DiagnosticErrorListener.prototype.getConflictingAlts = function(reportedAlts, configs) {
	if (reportedAlts !== null) {
		return reportedAlts;
	}
	var result = new BitSet();
	for (var i = 0; i < configs.items.length; i++) {
		result.add(configs.items[i].alt);
	}
	return "{" + result.values().join(", ") + "}";
};

exports.DiagnosticErrorListener = DiagnosticErrorListener;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.RecognitionException = __webpack_require__(11).RecognitionException;
exports.NoViableAltException = __webpack_require__(11).NoViableAltException;
exports.LexerNoViableAltException = __webpack_require__(11).LexerNoViableAltException;
exports.InputMismatchException = __webpack_require__(11).InputMismatchException;
exports.FailedPredicateException = __webpack_require__(11).FailedPredicateException;
exports.DiagnosticErrorListener = __webpack_require__(165).DiagnosticErrorListener;
exports.BailErrorStrategy = __webpack_require__(83).BailErrorStrategy;
exports.ErrorListener = __webpack_require__(36).ErrorListener;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2016 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Tree = __webpack_require__(12);
exports.Trees = __webpack_require__(84).Trees;
exports.RuleNode = Tree.RuleNode;
exports.ParseTreeListener = Tree.ParseTreeListener;
exports.ParseTreeVisitor = Tree.ParseTreeVisitor;
exports.ParseTreeWalker = Tree.ParseTreeWalker;


/***/ }),
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */
/***/ (function(module, exports) {

module.exports = isPromise;

function isPromise(obj) {
  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
}


/***/ }),
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */
/***/ (function(module, exports) {



/***/ }),
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */
/***/ (function(module, exports) {

/*!
 * word-wrap <https://github.com/jonschlinkert/word-wrap>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 *
 * @attribution
 * Adapted from http://james.padolsey.com/javascript/wordwrap-for-javascript/
 */

module.exports = function(str, options) {
  options = options || {};
  if (str == null) {
    return str;
  }

  var width = options.width || 50;
  var indent = (typeof options.indent === 'string')
    ? options.indent
    : '  ';

  var newline = options.newline || '\n' + indent;
  var escape = typeof options.escape === 'function'
    ? options.escape
    : identity;

  var regexString = '.{1,' + width + '}';
  if (options.cut !== true) {
    regexString += '([\\s\u200B]+|$)|[^\\s\u200B]+?([\\s\u200B]+|$)';
  }

  var re = new RegExp(regexString, 'g');
  var lines = str.match(re) || [];
  var result = indent + lines.map(function(line) {
    if (line.slice(-1) === '\n') {
      line = line.slice(0, line.length - 1);
    }
    return escape(line);
  }).join(newline);

  if (options.trim === true) {
    result = result.replace(/[ \t]*$/gm, '');
  }
  return result;
};

function identity(str) {
  return str;
}


/***/ })
/******/ ]);
//# sourceMappingURL=acsl2rworker.min.js.map